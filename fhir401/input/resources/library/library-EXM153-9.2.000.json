{
  "resourceType": "Library",
  "id": "library-EXM153-9.2.000",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "#cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/dbcg/connectathon/Library/EXM153",
  "version": "9.2.000",
  "name": "EXM153",
  "status": "active",
  "experimental": true,
  "type": {
    "coding": [ {
      "system": "http://terminology.hl7.org/CodeSystem/library-type",
      "code": "logic-library"
    } ]
  },
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}