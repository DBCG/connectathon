{
  "resourceType": "Library",
  "id": "library-EXM347-4.3.000",
  "extension": [ {
    "url": "http://hl7.org/fhir/us/cqfmeasures/StructureDefinition/cqfm-softwaresystem",
    "valueReference": {
      "reference": "#cqf-tooling"
    }
  } ],
  "url": "http://fhir.org/guides/dbcg/connectathon/Library/EXM347",
  "version": "4.3.000",
  "name": "EXM347",
  "content": [ {
    "contentType": "text/cql",
    "data": ""
  } ]
}