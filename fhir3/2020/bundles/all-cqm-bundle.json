{
  "resourceType": "Bundle",
  "type": "transaction",
  "entry": [
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-asf-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-asf-logic/_history/2</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>Library_ASF</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Unhealthy Alcohol Use Screening and Follow-up Library</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"10\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1339</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1074</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1437</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1437</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1337</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1337</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\r\nUnhealthy Alcohol Use Screening and Follow-up (ASF)\r\n*/library ASF_FHIR version '1.0.0'\r\n\r\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\r\n\r\n/*\r\nMeasure Description\r\nThe percentage of members 18 years of age and older who were screened for\r\nunhealthy alcohol use using a standardized tool and, if screened\r\npositive, received appropriate follow-up care. Two rates are reported.\r\n1. Unhealthy Alcohol Use Screening. The percentage of members who had a\r\nsystematic screening for unhealthy alcohol use.\r\n2. Counseling or Other Follow-up. The percentage of members who screened\r\npositive for unhealthy alcohol use and received brief counseling or\r\nother follow-up care within 2 months of a positive screening.\r\n*/\r\n\r\ncodesystem \"LOINC\": 'http://loinc.org'\r\ncodesystem \"CQFramework\": 'http://cqframework.info/codesystem/placeholder'\r\n\r\n// valueset \"Alcohol Screening and Brief Counseling\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\r\n// valueset \"Five or more drinks per day\": 'urn:oid:2.16.840.1.113883.3.464.1003.106.11.1035' // Value Set\r\n// valueset \"Four or more drinks per day\": 'urn:oid:2.16.840.1.113762.1.4.1072.14' // Value Set\r\n// valueset \"Alcohol abuse or dependence\": 'urn:oid:2.16.840.1.113883.3.464.1003.106.12.1010' // Grouping Value Set\r\n// valueset \"Dementia\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1101' // Grouping Value Set\r\n// valueset \"Alcohol use disorder\": 'TODO' // not in spec Data Criteria\r\n\r\n// Update\r\n\r\nvalueset \"Alcohol Counseling and Treatment\": '2.16.840.1.113883.3.464.1004.1437'\r\nvalueset \"Alcohol Screening\": '2.16.840.1.113883.3.464.1004.1337'\r\nvalueset \"Alcohol use disorder\": '2.16.840.1.113883.3.464.1004.1339'\r\nvalueset \"Dementia\": '2.16.840.1.113883.3.464.1004.1074'\r\n// valueset \"Hospice\": '2.16.840.1.113883.3.464.1004.1418'\r\n\r\ncode \"Five or more drinks per day\": '00005' from \"CQFramework\"\r\ncode \"Four or more drinks per day\": '00004' from \"CQFramework\"\r\ncode \"AUDIT Total Score (in points)\": '75624-7' from \"LOINC\"\r\ncode \"AUDIT-C Total Score (in points)\": '75626-2' from \"LOINC\"\r\n\r\n/*\r\nThis library has an explicit parameter which is the measurement year.\r\nWhile the actual parameter's type accepts all intervals, this library\r\nexpects it will only be given arguments corresponding exactly to one whole\r\ncalendar year, and it will not behave properly otherwise; 2017 for example:\r\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\r\n*/\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\r\n\r\n/*\r\nThis library evaluates with respect to exactly 1 candidate patient at a time,\r\nthat patient being given by the special context parameter Patient.\r\n*/\r\n\r\ncontext Patient\r\n\r\n/*\r\nInitial Population\r\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\r\n*/\r\n\r\ndefine \"Initial Population\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 18\r\n\r\n/*\r\nExclusions\r\n*/\r\n\r\ndefine \"Denominator Exclusion\":\r\n  exists ( [Condition: \"Alcohol use disorder\"] AlcoholUse\r\n      where AlcoholUse.clinicalStatus in { 'active', 'recurrence' }\r\n        and AlcoholUse.assertedDate during day of Interval[start of \"Measurement Period\" - 1 year, \r\n        end of \"Measurement Period\"]\r\n  )\r\n    or exists ( [Condition: \"Dementia\"] D\r\n        where D.clinicalStatus in { 'active', 'recurrence' }\r\n          and D.assertedDate during day of Interval[start of \"Measurement Period\", \r\n          end of \"Measurement Period\" - 60 days]\r\n    )\r\n\r\n/*\r\nDenominators and Numerators\r\n*/\r\n\r\n// Unhealthy Alcohol Use Screening\r\n\r\ndefine \"Denominator 1\":\r\n\t// \"Initial Population\"\r\n  true\r\n\r\n// Unhealthy Alcohol Use Screening\r\n\r\ndefine \"Numerator 1\":\r\n\t// \"Initial Population\"\r\n  exists ( \"AUDIT-C Assessment\" )\r\n    or exists ( \"AUDIT Assessment\" )\r\n    or ( \"Patient is Male\"\r\n        and exists ( \"Five or more drinks per day Assessment\" )\r\n    )\r\n    or ( \"Patient is Female\"\r\n        and ( exists ( \"Four or more drinks per day Assessment\" )\r\n            or exists ( \"Five or more drinks per day Assessment\" )\r\n        )\r\n    )\r\n    or ( \"Patient is 65 or Over\"\r\n        and ( exists ( \"Four or more drinks per day Assessment\" )\r\n            or exists ( \"Five or more drinks per day Assessment\" )\r\n        )\r\n    )\r\n   // Note: The spec doesn't include the over 65 test here but does in dependent N/D 2.\r\n\r\ndefine \"AUDIT-C Assessment\":\r\n  [Observation: \"AUDIT-C Total Score (in points)\"] A\r\n    where A.status.value in { 'final', 'amended', 'corrected' }\r\n      and A.effective.value in day of \"Measurement Period\"\r\n      and A.value is not null\r\n\r\ndefine \"AUDIT Assessment\":\r\n  [Observation: \"AUDIT Total Score (in points)\"] A\r\n    where A.status.value in { 'final', 'amended', 'corrected' }\r\n      and A.effective.value in day of \"Measurement Period\"\r\n      and A.value is not null\r\n\r\ndefine \"Patient is Male\":\r\n  Patient.gender.value = 'male'\r\n\r\ndefine \"Five or more drinks per day Assessment\":\r\n  [Observation: \"Five or more drinks per day\"] A\r\n    where A.status.value in { 'final', 'amended', 'corrected' }\r\n      and A.effective.value in day of \"Measurement Period\"\r\n      and A.value is not null\r\n\r\ndefine \"Patient is Female\":\r\n  Patient.gender.value = 'female'\r\n\r\ndefine \"Patient is 65 or Over\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\r\n\r\ndefine \"Four or more drinks per day Assessment\":\r\n  [Observation: \"Four or more drinks per day\"] A\r\n    where A.status.value in { 'final', 'amended', 'corrected' }\r\n      and A.effective.value in day of \"Measurement Period\"\r\n      and A.value is not null\r\n\r\n// Counseling or Other Follow-Up on Positive Screen\r\n\r\n/*\r\nInitial Population\r\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\r\n*/\r\n\r\ndefine \"Denominator 2\":\r\n\t// \"Initial Population\"\r\n  exists \"Positive Assessment for Unhealthy Alcohol Use\"\r\n\r\n// Counseling or Other Follow-Up on Positive Screen\r\n\r\ndefine \"Numerator 2\":\r\n\t// \"Initial Population\"\r\n  exists ( \"Initial Positive Assessment for Unhealthy Alcohol Use\" A\r\n      with \"Followup After Positive Screen\" F\r\n        such that if F is Observation then F.effective.value 2 months or less on or after day of A.effective.value \r\n          else F.performed.\"end\".value 2 months or less on or after day of A.effective.value\r\n  )\r\n\r\ndefine \"Positive Assessment for Unhealthy Alcohol Use\":\r\n  ( \"AUDIT Assessment\" A\r\n      where ( A.value as Quantity ).value.value &gt;= 8\r\n  )\r\n    union ( \"AUDIT-C Assessment\" A\r\n        where ( \"Patient is Male\"\r\n            and ( A.value as Quantity ).value.value &gt;= 4\r\n        )\r\n          or ( \"Patient is Female\"\r\n              and ( A.value as Quantity ).value.value &gt;= 3\r\n          )\r\n    )\r\n    union ( \"Five or more drinks per day Assessment\" A\r\n        where \"Patient is Male\"\r\n          and ( A.value as Quantity ).value.value &gt;= 1\r\n    )\r\n    union ( \"Four or more drinks per day Assessment\" A\r\n        where ( \"Patient is Female\"\r\n            or \"Patient is 65 or Over\"\r\n        )\r\n          and ( A.value as Quantity ).value.value &gt;= 1\r\n    )\r\n\r\ndefine \"Followup After Positive Screen\":\r\n  ( [Procedure: \"Alcohol Counseling and Treatment\"] Proc\r\n      where Proc.status.value = 'completed'\r\n  )\r\n    union ( [Observation: \"Alcohol Counseling and Treatment\"] Obs\r\n        where Obs.status.value in { 'final', 'amended', 'corrected' }\r\n    )\r\n    union ( [Procedure: \"Alcohol Screening\"] Proc\r\n        where Proc.status.value = 'completed'\r\n    )\r\n    union ( [Observation: \"Alcohol Screening\"] Obs\r\n        where Obs.status.value in { 'final', 'amended', 'corrected' }\r\n    )\r\n\r\ndefine \"Initial Positive Assessment for Unhealthy Alcohol Use\":\r\n  { First(\"Positive Assessment for Unhealthy Alcohol Use\" A\r\n      sort by effective.value\r\n  )}\r\n\r\n/*\r\nStratifiers\r\n*/\r\n\r\ndefine \"Stratifier 1\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[18, 44]\r\n\r\ndefine \"Stratifier 2\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[45, 64]\r\n\r\ndefine \"Stratifier 3\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\r\n\r\n\r\n/*\r\nUtility Functions\r\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-asf-logic",
        "identifier": [
          {
            "use": "official",
            "value": "Library_ASF"
          }
        ],
        "version": "1.0.0",
        "name": "ASF_FHIR",
        "title": "Unhealthy Alcohol Use Screening and Follow-up Library",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1339"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1074"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1437"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1437"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1337"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1337"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-asf-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-bcs-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-bcs-logic/_history/2</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>Library_BCS</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"18\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1168</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1042</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1331.6</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Claim</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1256</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1043.5</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1256</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1256</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Claim</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1256</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1148.7</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1334.15</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1329.1</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Claim</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1256</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1230.12</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1335.16</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1330.2</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nBreast Cancer Screening (BCS)\n*/library BCS_FHIR version '1.0.1'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n//include Participation version '1.0.0' called Participation\n\n/*\nDescription\nThe percentage of women 50-74 years of age who had a mammogram to screen for breast cancer.\n*/\r\n\r\nvalueset \"Absence of Left Breast Value Set\": '2.16.840.1.113883.3.464.1004.1329.1' // ICD10CM\r\nvalueset \"Absence of Right Breast Value Set\": '2.16.840.1.113883.3.464.1004.1330.2' // ICD10CM\r\nvalueset \"Bilateral Mastectomy Value Set\": '2.16.840.1.113883.3.464.1004.1042' // Grouping\n// valueset \"Bilateral Mastectomy Value Set\": '2.16.840.1.113883.3.464.1004.1042.3' // ICD10PCS\n// valueset \"Bilateral Mastectomy Value Set\": 'urn:oid:2.16.840.1.113883.3.464.1004.1042.4' // ICD9CMProc\r\nvalueset \"Bilateral Modifier Value Set\": '2.16.840.1.113883.3.464.1004.1043.5' // CPT-Mod\r\nvalueset \"History of Bilateral Mastectomy Value Set\": '2.16.840.1.113883.3.464.1004.1331.6' // ICD10CM\r\nvalueset \"Left Modifier Value Set\": '2.16.840.1.113883.3.464.1004.1148.7' // CPT-Mod\r\nvalueset \"Mammography Value Set\": '2.16.840.1.113883.3.464.1004.1168' // Grouping\n// valueset \"Mammography Value Set\": '2.16.840.1.113883.3.464.1004.1168.8' // CPT\n// valueset \"Mammography Value Set\": 'urn:oid:2.16.840.1.113883.3.464.1004.1168.9' // HCPCS\n// valueset \"Mammography Value Set\": 'urn:oid:2.16.840.1.113883.3.464.1004.1168.10' // ICD9CMProc\n// valueset \"Mammography Value Set\": 'urn:oid:2.16.840.1.113883.3.464.1004.1168.11' // RevCode\r\nvalueset \"Right Modifier Value Set\": '2.16.840.1.113883.3.464.1004.1230.12' // CPT-Mod\r\nvalueset \"Unilateral Mastectomy Value Set\": '2.16.840.1.113883.3.464.1004.1256' // Grouping\n// valueset \"Unilateral Mastectomy Value Set\": '2.16.840.1.113883.3.464.1004.1256.13' // CPT\n// valueset \"Unilateral Mastectomy Value Set\": 'urn:oid:2.16.840.1.113883.3.464.1004.1256.14' // ICD9CMProc\r\nvalueset \"Unilateral Mastectomy Left Value Set\": '2.16.840.1.113883.3.464.1004.1334.15' // ICD10PCS\r\nvalueset \"Unilateral Mastectomy Right Value Set\": '2.16.840.1.113883.3.464.1004.1335.16' // ICD10PCS\n\n/*\nThis library has an explicit parameter which is the product line.\nRecognized normal arguments are {'commercial', 'medicaid', 'medicare'}.\nIf one of these normal arguments is given, the patient will only be\nconsidered to be in the Initial Population if they have an appropriate\ncontinuous enrollment in that kind of medical plan.\nIf instead a null argument is given, their enrollment status will have no\neffect on whether they are considered to be in the Initial Population.\nIf instead some other argument is given (an unrecognized plan type),\nthe patient will unconditionally NOT be in the Initial Population.\n*/\r\n\r\nparameter \"Product Line\" String\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\r\n\r\ndefine \"Lookback Interval 27 More Months\":\r\n  Interval[start of \"Measurement Period\" - 27 months, \r\n  end of \"Measurement Period\" )\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  \"Is Female\"\r\n    and \"Is Age 52 to 74 at End\"\n/*\n\t\tand (not \"Is In Hospice\")\n\t\tand Participation.\"Is Enrolled\"(\n\t\t\t\"Product Line\", \n\t\t\tstart of \"Measurement Period\", \n\t\t\tInterval[start of \"Measurement Period\" - 27 months, end of \"Measurement Period\"],\n\t\t\t45\n\t\t)\n*/\r\n\r\ndefine \"Is Female\":\r\n  Patient.gender.value = 'female'\r\n\r\ndefine \"Is Age 52 to 74 at End\":\r\n  CalendarAgeInYearsAt(Patient.birthDate.value, \r\n    end of \"Measurement Period\"\r\n  )between 52 and 74\n\n/*\ndefine \"Is In Hospice\":\n\texists(\n\t\t[Encounter: \"Hospice Value Set\"] Enc\n\t\t\twhere Enc.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\n\t\t\t\tand PeriodToIntervalOfDT(Enc.period) overlaps day of \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[Claim: \"Hospice Value Set\"] Clm\n\t\t\twhere Clm.status.value in { 'active', 'draft' }\n\t\t\t\tand PeriodToIntervalOfDT(Clm.item.service.period) overlaps day of \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[Encounter: \"Encounter Inpatient\"] DischargeHospice\n\t\t\twhere DischargeHospice.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\n\t\t\t\tand (CodingToCode(DischargeHospice.hospitalization.dischargeDisposition.coding)\n\t\t\t\t\t\tin \"Discharged to Home for Hospice Care\"\n\t\t\t\t\tor CodingToCode(DischargeHospice.hospitalization.dischargeDisposition.coding)\n\t\t\t\t\t\tin \"Discharged to Health Care Facility for Hospice Care\")\n\t\t\t\tand PeriodToIntervalOfDT(DischargeHospice.period) ends during day of \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[ProcedureRequest: \"Hospice care ambulatory\"] HospiceOrder\n\t\t\twhere HospiceOrder.status.value in { 'active', 'completed' }\n\t\t\t\tand HospiceOrder.authoredOn.value during \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[Procedure: \"Hospice care ambulatory\"] HospicePerformed\n\t\t\twhere HospicePerformed.status.value in { 'preparation', 'in-progress', 'suspended', 'aborted', 'completed' }\n\t\t\t\tand date form PeriodToIntervalOfDT(HospicePerformed.performed) overlaps day of \"Measurement Period\"\n\t)\n*/\n\n/*\nAdministrative Specification\n*/\r\n\r\ndefine \"Denominator\":\n    // was \"Initial Population\", but that will always be true if this expression is executed\r\n  true\r\n\r\ndefine \"Numerator\":\r\n  \"Is Mammogram In Last 39 Months\"\r\n\r\ndefine \"Is Mammogram In Last 39 Months\":\r\n  exists ( [Procedure: \"Mammography Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n        and PeriodToIntervalOfDT(Proc.performed)included in day of \"Lookback Interval 27 More Months\"\r\n  )\r\n\r\ndefine \"Denominator Exclusion\":\r\n  ( \"Is Lacking Both Breasts\"\r\n      or ( \"Is Lacking Left Breast\"\r\n          and \"Is Lacking Right Breast\"\r\n      )\r\n  )\r\n\r\ndefine \"Is Lacking Both Breasts\":\r\n  \"Is Bilateral Mastectomy\"\r\n    or \"Is History Of Bilateral Mastectomy\"\r\n    or \"Is Unilateral Mastectomy With Bilateral Modifier\"\r\n    or \"Is Unilateral Mastectomy Twice Spread Two Weeks\"\r\n\r\ndefine \"Is Lacking Left Breast\":\r\n  \"Is Unilateral Mastectomy With Left Modifier\"\r\n    or \"Is Unilateral Mastectomy Left\"\r\n    or \"Is Absence Of Left Breast\"\r\n\r\ndefine \"Is Lacking Right Breast\":\r\n  \"Is Unilateral Mastectomy With Right Modifier\"\r\n    or \"Is Unilateral Mastectomy Right\"\r\n    or \"Is Absence Of Right Breast\"\r\n\r\ndefine \"Is Bilateral Mastectomy\":\r\n  exists ( [Procedure: \"Bilateral Mastectomy Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n        and \r\n        end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n        end of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Is History Of Bilateral Mastectomy\":\r\n  exists ( [Condition: \"History of Bilateral Mastectomy Value Set\"] Cond\r\n      where Cond.verificationStatus.value = 'confirmed'\r\n        and Cond.assertedDate.value same day or before \r\n        end of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Is Unilateral Mastectomy With Bilateral Modifier\":\r\n  exists ( [Claim] Claim\r\n      where Claim.status.value = 'active'\r\n        and exists ( Claim.procedure BbElem\r\n            with ( [Procedure: \"Unilateral Mastectomy Value Set\"] Proc\r\n              where Proc.status.value = 'completed'\r\n                and \r\n                end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n                end of \"Measurement Period\" ) Proc1\r\n              such that ( if BbElem.procedure is FHIR.Reference then ( BbElem.procedure as FHIR.Reference ).identifier ~ Proc1.identifier \r\n                  else false\r\n              )\r\n            with ( [Procedure: \"Bilateral Modifier Value Set\"] Proc\r\n              where Proc.status.value = 'completed'\r\n                and \r\n                end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n                end of \"Measurement Period\" ) Proc2\r\n              such that ( if BbElem.procedure is FHIR.Reference then ( BbElem.procedure as FHIR.Reference ).identifier ~ Proc2.identifier \r\n                  else false\r\n              )\r\n        )\r\n  )\r\n\r\ndefine \"Is Unilateral Mastectomy Twice Spread Two Weeks\":\r\n  exists ( ( [Procedure: \"Unilateral Mastectomy Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n      return PeriodToIntervalOfDT(Proc.performed)) WhenUM1\r\n      with ( [Procedure: \"Unilateral Mastectomy Value Set\"] Proc\r\n        where Proc.status.value = 'completed'\r\n        return PeriodToIntervalOfDT(Proc.performed)) WhenUM2\r\n        such that ( ( ( difference in days between start of WhenUM1 and start of WhenUM2 ) &gt;= 14 )\r\n            and \r\n            end of WhenUM1 same day or before \r\n            end of \"Measurement Period\"\r\n            and \r\n            end of WhenUM2 same day or before \r\n            end of \"Measurement Period\"\r\n        )\r\n  )\r\n\r\ndefine \"Is Unilateral Mastectomy With Left Modifier\":\r\n  exists ( [Claim] Claim\r\n      where Claim.status.value = 'active'\r\n        and exists ( Claim.procedure BbElem\r\n            with ( [Procedure: \"Unilateral Mastectomy Value Set\"] Proc\r\n              where Proc.status.value = 'completed'\r\n                and \r\n                end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n                end of \"Measurement Period\" ) Proc1\r\n              such that ( if BbElem.procedure is FHIR.Reference then ( BbElem.procedure as FHIR.Reference ).identifier ~ Proc1.identifier \r\n                  else false\r\n              )\r\n            with ( [Procedure: \"Left Modifier Value Set\"] Proc\r\n              where Proc.status.value = 'completed'\r\n                and \r\n                end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n                end of \"Measurement Period\" ) Proc2\r\n              such that ( if BbElem.procedure is FHIR.Reference then ( BbElem.procedure as FHIR.Reference ).identifier ~ Proc2.identifier \r\n                  else false\r\n              )\r\n        )\r\n  )\r\n\r\ndefine \"Is Unilateral Mastectomy Left\":\r\n  exists ( [Procedure: \"Unilateral Mastectomy Left Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n        and \r\n        end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n        end of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Is Absence Of Left Breast\":\r\n  exists ( [Observation: \"Absence of Left Breast Value Set\"] Obs\r\n      where Obs.status.value in { 'final', 'amended' }\r\n        and Obs.effective.value same day or before \r\n        end of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Is Unilateral Mastectomy With Right Modifier\":\r\n  exists ( [Claim] Claim\r\n      where Claim.status.value = 'active'\r\n        and exists ( Claim.procedure BbElem\r\n            with ( [Procedure: \"Unilateral Mastectomy Value Set\"] Proc\r\n              where Proc.status.value = 'completed'\r\n                and \r\n                end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n                end of \"Measurement Period\" ) Proc1\r\n              such that ( if BbElem.procedure is FHIR.Reference then ( BbElem.procedure as FHIR.Reference ).identifier ~ Proc1.identifier \r\n                  else false\r\n              )\r\n            with ( [Procedure: \"Right Modifier Value Set\"] Proc\r\n              where Proc.status.value = 'completed'\r\n                and \r\n                end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n                end of \"Measurement Period\" ) Proc2\r\n              such that ( if BbElem.procedure is FHIR.Reference then ( BbElem.procedure as FHIR.Reference ).identifier ~ Proc2.identifier \r\n                  else false\r\n              )\r\n        )\r\n  )\r\n\r\ndefine \"Is Unilateral Mastectomy Right\":\r\n  exists ( [Procedure: \"Unilateral Mastectomy Right Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n        and \r\n        end of PeriodToIntervalOfDT(Proc.performed)same day or before \r\n        end of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Is Absence Of Right Breast\":\r\n  exists ( [Observation: \"Absence of Right Breast Value Set\"] Obs\r\n      where Obs.status.value in { 'final', 'amended' }\r\n        and \r\n        end of PeriodToIntervalOfDT(Obs.effective)same day or before \r\n        end of \"Measurement Period\"\r\n  )\n\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n\r\ndefine function CodingToCode(coding FHIR.Coding):\r\n  System.Code { code: coding.code.value, system: coding.system.value, version: coding.version.value, display: coding.display.value }\n\t// From FHIRHelpers\r\n\r\ndefine function \"ToDate\"(Value DateTime):\r\n  DateTime(year from Value, month from Value, day from Value, 0, 0, 0, 0, timezone from Value)\r\n\r\ndefine function CalendarAgeInYearsAt(BirthDateTime DateTime, AsOf DateTime):\r\n  years between ToDate(BirthDateTime)and ToDate(AsOf)\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-bcs-logic",
        "identifier": [
          {
            "use": "official",
            "value": "Library_BCS"
          }
        ],
        "version": "1.0.1",
        "name": "BCS_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-participation-logic"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-common-logic"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.43"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1108.15"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1168"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1042"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1331.6"
              }
            ]
          },
          {
            "type": "Claim"
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Claim"
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1334.15"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1329.1"
              }
            ]
          },
          {
            "type": "Claim"
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1335.16"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1330.2"
              }
            ]
          },
          {
            "type": "Claim"
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1043.5"
              }
            ]
          },
          {
            "type": "Claim"
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1148.7"
              }
            ]
          },
          {
            "type": "Claim"
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1256"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1230.12"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-bcs-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-cbp-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-cbp-logic/_history/2</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>Library_CBP</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Population criteria logic for the Controlling Blood Pressure Measure</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Topic: </b></th><td style=\"padding-right: 25px;\"><span style=\"padding-left: 25px;\"><b>text: </b><span>Controlling Blood Pressure</span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"13\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1203</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1122</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1077</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1202</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1191</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1086</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1189</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1189</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationDispense</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medicationCodeableConcept</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>DiabetesMedicationsList</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1105</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library CBP version '2'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\n\n/*\n\nDescription:\nThe percentage of members 1885 years of age who had a diagnosis of hypertension (HTN)\n  and whose BP was adequately controlled during the measurement year\n  based on the following criteria:\n    - Members 1859 years of age whose BP was &lt;140/90 mm Hg.\n    - Members 6085 years of age with a diagnosis of diabetes whose BP was &lt;140/90 mm Hg.\n    - Members 6085 years of age without a diagnosis of diabetes whose BP was &lt;150/90 mm Hg.\nNote: Use the Hybrid Method for this measure. A single rate is reported and is the sum of all three groups.\n\n*/\n\n/*\n// These are valuesets containing CPT codes indicating these concepts\nvalueset \"Systolic Less Than 140\": '2.16.840.1.113883.3.464.1004.1243'\nvalueset \"Systolic Greater Than/Equal To 140\": '2.16.840.1.113883.3.464.1004.1242'\nvalueset \"Diastolic Less Than 80\": '2.16.840.1.113883.3.464.1004.1084'\nvalueset \"Diastolic 80-89\": '2.16.840.1.113883.3.464.1004.1082'\nvalueset \"Diastolic Greater Than/Equal To 90\": '2.16.840.1.113883.3.464.1004.1083'\n*/\r\n\r\ncodesystem \"LOINC\": 'http://loinc.org'\r\n\r\nvalueset \"Acute Inpatient\": '2.16.840.1.113883.3.464.1004.1017'\r\nvalueset \"Diabetes\": '2.16.840.1.113883.3.464.1004.1077'\r\nvalueset \"Diabetes Exclusions\": '2.16.840.1.113883.3.464.1004.1105'\r\nvalueset \"ED\": '2.16.840.1.113883.3.464.1004.1086'\r\nvalueset \"ESRD\": '2.16.840.1.113883.3.464.1004.1089'\r\nvalueset \"ESRD Obsolete\": '2.16.840.1.113883.3.464.1004.1090'\r\nvalueset \"Essential Hypertension\": '2.16.840.1.113883.3.464.1004.1122'\r\nvalueset \"Inpatient Stay\": '2.16.840.1.113883.3.464.1004.1395'\r\nvalueset \"Kidney Transplant\": '2.16.840.1.113883.3.464.1004.1141'\r\nvalueset \"Nonacute Inpatient\": '2.16.840.1.113883.3.464.1004.1189'\r\nvalueset \"Nonacute Inpatient Stay\": '2.16.840.1.113883.3.464.1004.1398'\r\nvalueset \"Observation\": '2.16.840.1.113883.3.464.1004.1191'\r\nvalueset \"Outpatient\": '2.16.840.1.113883.3.464.1004.1202'\r\nvalueset \"Outpatient Without UBREV\": '2.16.840.1.113883.3.464.1004.1203'\r\nvalueset \"Pregnancy\": '2.16.840.1.113883.3.464.1004.1219'\r\nvalueset \"Diabetes Medications List\": 'DiabetesMedicationsList' // NDC Codes\r\n\r\ncode \"Blood Pressure\": '55284-4' from \"LOINC\" display 'Blood pressure'\r\ncode \"Systolic Blood Pressure\": '8480-6' from \"LOINC\" display 'Systolic blood pressure'\r\ncode \"Diastolic Blood Pressure\": '8462-4' from \"LOINC\" display 'Diastolic blood pressure'\r\n\r\nparameter \"Measurement Period\" default Interval[@2018-01-01, @2019-01-01 )\r\n\r\ncontext Patient\r\n\r\ndefine \"First 6 Months of Measurement Period\":\r\n  Interval[start of \"Measurement Period\", DateTime(year from start of \"Measurement Period\", 6, 30)]\r\n\r\ndefine \"Initial Population\":\r\n  \"In Demographic\"\r\n    and \"Event Diagnosis\"\n\n/*\n    TODO: Members in hospice are excluded from the eligible population.\n      If a member is found to be in hospice or using hospice services during medical record review,\n      the member is removed from the sample and replaced by a member from the oversample.\n      Refer to General Guideline 20: Members in Hospice.\n*/\n\n// TODO: Product lines - Commercial, Medicaid, Medicare (report each product line separately).\n// TODO: Continuous enrollment - The measurement year.\n\n/*\n    TODO: Allowable gap\tNo more than one gap in continuous enrollment of up to 45 days during the measurement year.\n      To determine continuous enrollment for a Medicaid beneficiary for whom enrollment is verified monthly,\n      the member may not have more than a 1-month gap in coverage (i.e., a member whose coverage lapses for\n      2 months [60 days] is not considered continuously enrolled).\n*/\n\n/*\n    TODO: Required exclusion\tExclude Medicare members age 65 and older as of January 1 of the measurement year who are:\n      Enrolled in an Institutional SNP (I-SNP) any time during the measurement year.\n      Living long-term in an institution any time during the measurement year.\n      Organizations may use the LTI flag in the Medicare Part C monthly membership file.\n*/\n\n// Ages\t1885 years as of December 31 of the measurement year.\r\n\r\ndefine \"In Demographic\":\r\n  AgeInYearsAt(DateTime(year from start of \"Measurement Period\", 12, 31))in Interval[18, 85]\n\n/*\n    Members are identified as hypertensive if there is at least one outpatient visit (Outpatient Without UBREV Value Set)\n    with a diagnosis of hypertension (Essential Hypertension Value Set) during the first six months of the measurement year.\n*/\r\n\r\ndefine \"Outpatient Encounters Without UBREV\":\r\n  [Encounter: \"Outpatient Without UBREV\"] Encounters\r\n    where Encounters.status = 'finished'\r\n      and Encounters.period.\"start\" in day of \"First 6 Months of Measurement Period\"\r\n\r\ndefine \"Hypertension Diagnosis\":\r\n  [Condition: \"Essential Hypertension\"] HTDiagnosis\r\n    where HTDiagnosis.clinicalStatus = 'active'\r\n      and HTDiagnosis.verificationStatus = 'confirmed'\r\n      and HTDiagnosis.assertedDate in day of \"First 6 Months of Measurement Period\"\r\n    sort by assertedDate desc\r\n\r\ndefine \"Event Diagnosis\":\r\n  AnyTrue({ \"Event Diagnosis Context Match\", \"Event Diagnosis Date Match\" })\n\n// one way - match context reference to Encounter id\r\n\r\ndefine \"Event Diagnosis Context Match\":\r\n  exists ( \"Outpatient Encounters Without UBREV\" Encounters\r\n      with \"Hypertension Diagnosis\" HTDiagnosis\r\n        such that EndsWith(HTDiagnosis.\"context\".reference, Encounters.id)\r\n  )\n\n// another way - if they occur on the same day\r\n\r\ndefine \"Event Diagnosis Date Match\":\r\n  exists ( \"Outpatient Encounters Without UBREV\" Encounters\r\n      with \"Hypertension Diagnosis\" HTDiagnosis\r\n        such that HTDiagnosis.assertedDate in day of Encounters.period\r\n  )\n\n/*\n    After the Eligible Population is identified, assign each member either a diabetic\n    or not diabetic flag using only administrative data and the steps below. The flag\n    is used to determine the appropriate BP threshold to use during numerator assessment\n    (the threshold for members with diabetes is different than the threshold for members without diabetes).\n*/\n\n/*\n    Step 1:\n      Assign a flag of diabetic to members identified as diabetic using *** claim/encounter data *** or\n      *** pharmacy data ***. The organization must use both methods to assign the diabetes flag, but a\n      member only needs to be identified by one method. Members may be identified as having diabetes during\n      the measurement year or the year prior to the measurement year.\n*/\r\n\r\ndefine \"Lookback Period Year Prior to End of Measurement Period\":\r\n  Interval[start of \"Measurement Period\" - 1 year, \r\n  end of \"Measurement Period\"]\r\n\r\ndefine \"Step 1 Is Diabetic Flag\":\r\n  \"Is Diabetic Using Claim and Encounter Data?\"\r\n    or \"Is Diabetic Using Pharmacy Data\"\n\n/*\n    Claim/encounter data. Members who met any of the following criteria during the measurement year\n    or the year prior to the measurement year (count services that occur over both years):\n      - At least two outpatient visits (Outpatient Value Set), observation visits (Observation Value Set),\n        ED visits (ED Value Set) or nonacute inpatient encounters (Nonacute Inpatient Value Set) on different\n        dates of service, with a diagnosis of diabetes (Diabetes Value Set). Visit type need not be the same\n        for the two visits.\n      - At least one acute inpatient encounter (Acute Inpatient Value Set) with a diagnosis of diabetes (Diabetes Value Set).\n*/\n\n/*\n    TODO - determine best method to use for Claim data\n      Current best guess:\n      Claim during \"Lookback Period Year Prior to End of Measurement Period\" with Diabetes diagnosis (see \"Get Concept from Claim Diagnosis\" function)\n        AND (\n          At least two outpatient visits,\n            observation visits,\n            ED visits\n            or nonacute inpatient encounters\n              on different dates of service\n          OR At least one acute inpatient encounter\n        )\n*/\r\n\r\ndefine \"Is Diabetic Using Claim and Encounter Data?\":\r\n  if exists ( \"Diabetes Condition\" ) then ( \"Count Encounters with Diabetes Diagnosis on Different Dates of Service\" &gt;= 2\r\n      or \"Count Acute Encounters with Diabetes Diagnosis\" &gt;= 1\r\n  ) \r\n    else false\n\n// TODO - Hmmm... need to verify that this method is valid\r\n\r\ndefine \"Diabetes Condition\":\r\n  [Condition: code in \"Diabetes\"] DiabetesCondition\r\n    where DiabetesCondition.clinicalStatus = 'active'\r\n      and DiabetesCondition.verificationStatus = 'confirmed'\r\n      and exists ( DiabetesCondition.category CategoryConcepts\r\n          where exists ( CategoryConcepts.coding ConceptCodes\r\n              where ConceptCodes.code = 'encounter-diagnosis'\r\n          )\r\n      )\r\n      and DiabetesCondition.assertedDate in day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n\r\ndefine \"Count Encounters with Diabetes Diagnosis on Different Dates of Service\":\r\n  Count(\"Encounters with Diabetes Diagnosis\" DiabetesDiagnosisEncounters\r\n      return distinct(DiabetesDiagnosisEncounters.period)\r\n  )\r\n\r\ndefine \"Count Acute Encounters with Diabetes Diagnosis\":\r\n  Count(\"Acute Encounters with Diabetes Diagnosis\" DiabetesDiagnosisEncounters)\r\n\r\ndefine \"Encounters with Diabetes Diagnosis\":\r\n  ( \"Outpatient Encounters\"\r\n    union \"Observation Encounters\"\r\n    union \"ED Encounters\"\r\n    union \"Nonacute Inpatient Encounters\" ) Encounters\r\n    with \"Diabetes Condition\" DiabetesCondition\r\n      such that EndsWith(Encounters.diagnosis.condition.reference, DiabetesCondition.id)\r\n        or EndsWith(DiabetesCondition.\"context\".reference, Encounters.id)\r\n    return Encounters\r\n\r\ndefine \"Acute Encounters with Diabetes Diagnosis\":\r\n  \"Acute Inpatient Encounters\" Encounters\r\n    with \"Diabetes Condition\" DiabetesCondition\r\n      such that EndsWith(Encounters.diagnosis.condition.reference, DiabetesCondition.id)\r\n        or EndsWith(DiabetesCondition.\"context\".reference, Encounters.id)\r\n    return Encounters\r\n\r\ndefine \"Outpatient Encounters\":\r\n  [Encounter: type in \"Outpatient\"] OutpatientEncounters\r\n    where OutpatientEncounters.status = 'finished'\r\n      and OutpatientEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"Observation Encounters\":\r\n  [Encounter: type in \"Observation\"] ObservationEncounters\r\n    where ObservationEncounters.status = 'finished'\r\n      and ObservationEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"ED Encounters\":\r\n  [Encounter: type in \"ED\"] EDEncounters\r\n    where EDEncounters.status = 'finished'\r\n      and EDEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"Nonacute Inpatient Encounters\":\r\n  [Encounter: type in \"Nonacute Inpatient\"] NonacuteEncounters\r\n    where NonacuteEncounters.status = 'finished'\r\n      and NonacuteEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\r\n\r\ndefine \"Acute Inpatient Encounters\":\r\n  [Encounter: type in \"Nonacute Inpatient\"] AcuteEncounters\r\n    where AcuteEncounters.status = 'finished'\r\n      and AcuteEncounters.period during day of \"Lookback Period Year Prior to End of Measurement Period\"\r\n    sort by period.\"start\" desc\n\n/*\n    Pharmacy data. Members who were dispensed insulin or hypoglycemics/ antihyperglycemics\n      on an ambulatory basis during the measurement year or the year prior to the\n      measurement year (Diabetes Medications List).\n*/\r\n\r\ndefine \"Is Diabetic Using Pharmacy Data\":\r\n  exists ( \"Members Dispensed Diabetes Medications During Step 1 Period\" )\r\n\r\ndefine \"Members Dispensed Diabetes Medications During Step 1 Period\":\r\n  [MedicationDispense: medicationCodeableConcept in \"Diabetes Medications List\"] DiabetesMedicationDispense\r\n    where DiabetesMedicationDispense.status = 'completed'\r\n      and DiabetesMedicationDispense.whenHandedOver in day of \"Lookback Period Year Prior to End of Measurement Period\"\n\n\n/*\n    Step 2:\n      From the members identified in step 1, assign a flag of not diabetic to members who\n        do not have a diagnosis of diabetes (Diabetes Value Set), in any setting, during the\n        measurement year or year prior to the measurement year and who had a diagnosis of\n        gestational diabetes or steroid-induced diabetes (Diabetes Exclusions Value Set),\n        in any setting, during the measurement year or the year prior to the measurement year.\n      Note: Members classified as diabetic in step 1 based on pharmacy data alone and who had\n        a diagnosis of gestational or steroid-induced diabetes as specified above are reclassified\n        as not diabetic in this step.\n*/\r\n\r\ndefine \"Step 2 Is Diabetic Flag\":\r\n  not ( ( not \"Diabetes Diagnosis in Any Setting\"\r\n        or ( \"Is Diabetic Using Pharmacy Data\"\r\n            and not exists ( \"Encounters with Diabetes Diagnosis\" )\r\n        )\r\n    )\r\n      and exists ( \"Has Diagnosis of Gestational or Steroid-Induced Diabetes\" )\r\n  )\r\n\r\ndefine \"Diabetes Diagnosis in Any Setting\":\r\n  exists ( [Encounter] Encounters\r\n      with \"Diabetes Condition\" DiabetesCondition\r\n        such that EndsWith(Encounters.diagnosis.condition.reference, DiabetesCondition.id)\r\n          or EndsWith(DiabetesCondition.\"context\".reference, Encounters.id)\r\n      return Encounters\r\n  )\r\n\r\ndefine \"Has Diagnosis of Gestational or Steroid-Induced Diabetes\":\r\n  [Condition: code in \"Diabetes Exclusions\"] InducedDiabetesCondition\r\n    where InducedDiabetesCondition.clinicalStatus = 'active'\r\n      and InducedDiabetesCondition.verificationStatus = 'confirmed'\r\n      and InducedDiabetesCondition.assertedDate in day of \"Lookback Period Year Prior to End of Measurement Period\"\n\n/*\n    Step 3:\n      Assign a flag of not diabetic to members who were not assigned a flag in step 1 or step 2.\n*/\r\n\r\ndefine \"Step 3 Is Diabetic Flag\":\r\n  if ( \"Step 1 Is Diabetic Flag\" is null\r\n      and \"Step 2 Is Diabetic Flag\" is null\r\n  ) then false \r\n    else \"Step 1 Is Diabetic Flag\"\r\n    or \"Step 2 Is Diabetic Flag\"\n\n/*\n    Denominator:\n      To confirm the diagnosis of hypertension, the organization must find notation of one of\n        the following in the medical record anytime during the members history on or before\n        June 30 of the measurement year:\n          - Hypertension\n          - HTN\n          - High BP (HBP)\n          - Elevated BP (�BP)\n          - Borderline HTN\n          - Intermittent HTN\n          - History of HTN\n          - Hypertensive vascular disease (HVD)\n          - Hyperpiesia\n          - Hyperpiesis\n          - A diagnosis code for hypertension documented in the medical record\n      It does not matter if hypertension was treated or is currently being treated.\n        The notation indicating a diagnosis of hypertension may be recorded in any\n        of the following documents:\n          - Problem list (this may include a diagnosis prior to June 30 of the measurement year\n              or an undated diagnosis that is not part of the office visit note; see the Note at\n              the end of this section)\n          - Office note\n          - Subjective, Objective, Assessment, Plan (SOAP) note\n          - Encounter form\n          - Diagnostic report\n          - Hospital discharge summary\n\n      * If the diagnosis of hypertension cannot be confirmed, the member is excluded and replaced\n        by the next member from the oversample.\n*/\r\n\r\ndefine \"Denominator\":\r\n  true\n\n/*\n    Use one medical record for both the confirmation of the diagnosis of hypertension and the\n      representative BP. All eligible BP measurements recorded in the record must be considered.\n      NOTE - If an organization cannot find the medical record, the member remains in the measure\n      denominator and is considered noncompliant for the numerator.\n*/\n\n/*\n    Step 1:\n      Identify the members PCP\n        If the member had more than one PCP for the time period, identify the PCP who most recently\n        provided care to the member\n*/\r\n\r\ndefine \"Member's PCP\":\r\n  if ( Length(\"Patient General Practitioners\")= 1 ) then \"Patient General Practitioners\"[0].reference \r\n    else \"Get PCP Who Most Recently Provided Care\".reference\r\n\r\ndefine \"Patient General Practitioners\":\r\n  Patient.generalPractitioner practitioners\r\n    where practitioners.reference is not null\n\n// NOTE - using Encounters to determine PCP who most recently provided care\r\n\r\ndefine \"Get PCP Who Most Recently Provided Care\":\r\n  ( [Encounter] Encounters\r\n    where Encounters.participant is not null\r\n      and Encounters.status = 'finished'\r\n      and Encounters.period during day of \"Measurement Period\"\r\n    sort by period.\"start\" desc ) MostRecentEncounters\r\n    return First(MostRecentEncounters.participant participants\r\n        where participants.individual is not null\r\n          and participants.individual.reference is not null\r\n        return participants.individual\r\n    )\n\n/*\n    Step 2:\n      Use one medical record to both confirm the diagnosis for the denominator and identify the\n        representative BP level for the numerator.\n      TODO - account for cirumstances when 2 records are needed to either confirm the diagnosis or obtain the BP reading\n*/\n\n// TODO\n\n/*\n    Numerator:\n    The number of members in the denominator whose most recent BP (both systolic and diastolic) is adequately\n      controlled during the measurement year based on the following criteria:\n        - Members 1859 years of age as of December 31 of the measurement year whose BP was &lt;140/90 mm Hg.\n        - Members 6085 years of age as of December 31 of the measurement year who were flagged with a\n          diagnosis of diabetes and whose BP was &lt;140/90 mm Hg.\n        - Members 6085 years of age as of December 31 of the measurement year who were flagged as not having\n          a diagnosis of diabetes and whose BP was &lt;150/90 mm Hg.\n      To determine if the members BP is adequately controlled, the representative BP must be identified.\n*/\n\n/*\n    Step 1:\n    Identify the most recent BP reading noted during the measurement year. The reading must occur after the\n      date when the diagnosis of hypertension was confirmed.\n    Do not include BP readings: TODO\n      - Taken during an acute inpatient stay or an ED visit.\n      - Taken on the same day as a diagnostic test or diagnostic or therapeutic procedure that requires a\n        change in diet or change in medication on or one day before the day of the test or procedure, with\n        the exception of fasting blood tests.\n      - Reported by or taken by the member.\n    If multiple readings were recorded for a single date, use the lowest systolic and lowest diastolic BP\n      on that date as the representative BP. The systolic and diastolic results do not need to be from\n      the same reading. TODO\n*/\r\n\r\ndefine \"Most Recent BP Readings\":\r\n  [Observation: \"Blood Pressure\"] BPObservation\r\n    where BPObservation.effective in day of \"Measurement Period\"\r\n      and ( BPObservation.effective as dateTime ) after day of First(\"Hypertension Diagnosis\").assertedDate\r\n    sort by effective desc\n\n/*\n    Step 2:\n      Determine numerator compliance using the criteria in the Numerator secition above.\n      The member is not compliant if the BP reading does not meet the specified threshold or is missing,\n        if there is no BP reading during the measurement year or if the reading is incomplete\n        (e.g., the systolic or diastolic level is missing).\n*/\n\n/*\n    NOTE\n    I can imagine a couple of different ways an Observation could represent blood pressure values:\n      - Observation with a valueRatio (Systolic/Diastolic)\n      - Observation with component values for Systolic and Diastolic\n*/\n\n\n\n/*\n\n    Helper functions\n\n*/\r\n\r\ndefine function \"Get Concept from Claim Diagnosis\"(value Choice&lt;FHIR.CodeableConcept, FHIR.Reference&gt;):\r\n  if value is FHIR.CodeableConcept then value \r\n    else ( \"Diabetes Condition\" DC\r\n      where EndsWith(value.reference, DC.id)\r\n      return DC.code\r\n  )\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "identifier": [
          {
            "use": "official",
            "value": "Library_CBP"
          }
        ],
        "version": "1.0.0",
        "name": "CBP_FHIR",
        "title": "Population criteria logic for the Controlling Blood Pressure Measure",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "topic": [
          {
            "text": "Controlling Blood Pressure"
          }
        ],
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1203"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1122"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1077"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1202"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1191"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1086"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1189"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1189"
              }
            ]
          },
          {
            "type": "MedicationDispense",
            "codeFilter": [
              {
                "path": "medicationCodeableConcept",
                "valueSetString": "DiabetesMedicationsList"
              }
            ]
          },
          {
            "type": "Encounter"
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1105"
              }
            ]
          },
          {
            "type": "Encounter"
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-cbp-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-ccs-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-ccs-logic/_history/2</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>Library_CCS</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"7\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1208</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1208</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1208</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1265.26</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1265.26</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1265.26</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1123.17</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nCervical Cancer Screening (CCS)\n*/library CCS_FHIR version '1.0.1'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nDescription\nThe percentage of women 21-64 years of age who were screened for cervical\n\t\tcancer using either of the following criteria:\n\t* Women 21-64 years of age who had cervical cytology performed every 3 years.\n\t* Women 30-64 years of age who had cervical cytology/human papillomavirus\n\t\t(HPV) co-testing performed every 5 years.\n*/\r\n\r\nvalueset \"Absence of Cervix Value Set\": '2.16.840.1.113883.3.464.1004.1123.17' // CPT\n// valueset \"Absence of Cervix Value Set\": '2.16.840.1.113883.3.464.1004.1123.18' // ICD10CM\n// valueset \"Absence of Cervix Value Set\": '2.16.840.1.113883.3.464.1004.1123.19' // ICD10PCS\n// valueset \"Absence of Cervix Value Set\": '2.16.840.1.113883.3.464.1004.1123.20' // ICD9CM\n// valueset \"Absence of Cervix Value Set\": '2.16.840.1.113883.3.464.1004.1123.21' // ICD9CMProc\r\nvalueset \"Cervical Cytology Value Set\": '2.16.840.1.113883.3.464.1004.1208' // Grouping\n// valueset \"Cervical Cytology Value Set\": '2.16.840.1.113883.3.464.1004.1208.22' // CPT\n// valueset \"Cervical Cytology Value Set\": '2.16.840.1.113883.3.464.1004.1208.23' // HCPCS\n// valueset \"Cervical Cytology Value Set\": '2.16.840.1.113883.3.464.1004.1208.24' // LOINC\n// valueset \"Cervical Cytology Value Set\": '2.16.840.1.113883.3.464.1004.1208.25' // RevCode\r\nvalueset \"HPV Tests Value Set\": '2.16.840.1.113883.3.464.1004.1265.26' // CPT\n// valueset \"HPV Tests Value Set\": '2.16.840.1.113883.3.464.1004.1265.27' // HCPCS\n// valueset \"HPV Tests Value Set\": '2.16.840.1.113883.3.464.1004.1265.28' // LOINC\n\n// valueset \"Hospice Value Set\": 'TODO'\n// valueset \"Encounter Inpatient\": '2.16.840.1.113883.3.666.5.307' version 'urn:hl7:version:eCQM%20Update%202017-05-05'\n// valueset \"Discharged to Home for Hospice Care\": '2.16.840.1.113883.3.117.1.7.1.209' version 'urn:hl7:version:eCQM%20Update%202017-05-05'\n// valueset \"Discharged to Health Care Facility for Hospice Care\": '2.16.840.1.113883.3.117.1.7.1.207' version 'urn:hl7:version:eCQM%20Update%202017-05-05'\n// valueset \"Hospice care ambulatory\": '2.16.840.1.113762.1.4.1108.15' version 'urn:hl7:version:eCQM%20Update%202017-05-05'\n// valueset \"X Commercial Coverage Value Set\": 'TODO'\n// valueset \"X Medicaid Coverage Value Set\": 'TODO'\n// valueset \"X Medicare Coverage Value Set\": 'TODO'\n// valueset \"X Institutional SNP Value Set\": 'TODO'\n// valueset \"X Long-Term in Institution Value Set\": 'TODO'\n\n/*\nThis library has an explicit parameter which is the product line.\nRecognized normal arguments are {'commercial', 'medicaid', 'medicare'}.\nIf one of these normal arguments is given, the patient will only be\nconsidered to be in the Initial Population if they have an appropriate\ncontinuous enrollment in that kind of medical plan.\nIf instead a null argument is given, their enrollment status will have no\neffect on whether they are considered to be in the Initial Population.\nIf instead some other argument is given (an unrecognized plan type),\nthe patient will unconditionally NOT be in the Initial Population.\n*/\r\n\r\nparameter \"Product Line\" String\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\r\n\r\ndefine \"First Predecessor Year\":\r\n  Interval[start of \"Measurement Period\" - 1 year, \r\n  end of \"Measurement Period\" - 1 year )\r\n\r\ndefine \"Second Predecessor Year\":\r\n  Interval[start of \"Measurement Period\" - 2 years, \r\n  end of \"Measurement Period\" - 2 year )\r\n\r\ndefine \"Third Predecessor Quarter\":\r\n  Interval[start of \"Measurement Period\" - 2 years - 3 months, \r\n  end of \"Measurement Period\" - 3 years )\r\n\r\ndefine \"Lookback Interval Two More Years\":\r\n  Interval[start of \"Measurement Period\" - 2 years, \r\n  end of \"Measurement Period\" )\r\n\r\ndefine \"Lookback Interval Four More Years\":\r\n  Interval[start of \"Measurement Period\" - 4 years, \r\n  end of \"Measurement Period\" )\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  \"Is Female\"\r\n    and \"Is Age 24 to 64 at End\"\n/*\n\t\tand (not \"Is In Hospice\")\n\t\tand \"Is In Applicable Product Line\"\n*/\r\n\r\ndefine \"Is Female\":\r\n  Patient.gender.value = 'female'\r\n\r\ndefine \"Is Age 24 to 64 at End\":\r\n  CalendarAgeInYearsAt(Patient.birthDate.value, \r\n    end of \"Measurement Period\"\r\n  )between 24 and 64\n\n/*\ndefine \"Is In Hospice\":\n\texists(\n\t\t[Encounter: \"Hospice Value Set\"] Enc\n\t\t\twhere Enc.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\n\t\t\t\tand PeriodToIntervalOfDT(Enc.period) overlaps day of \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[Encounter: \"Encounter Inpatient\"] DischargeHospice\n\t\t\twhere DischargeHospice.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\n\t\t\t\tand (CodingToCode(DischargeHospice.hospitalization.dischargeDisposition.coding)\n\t\t\t\t\t\tin \"Discharged to Home for Hospice Care\"\n\t\t\t\t\tor CodingToCode(DischargeHospice.hospitalization.dischargeDisposition.coding)\n\t\t\t\t\t\tin \"Discharged to Health Care Facility for Hospice Care\")\n\t\t\t\tand PeriodToIntervalOfDT(DischargeHospice.period) ends during day of \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[ProcedureRequest: \"Hospice care ambulatory\"] HospiceOrder\n\t\t\twhere HospiceOrder.status.value in { 'active', 'completed' }\n\t\t\t\tand HospiceOrder.authoredOn.value during day of \"Measurement Period\"\n\t)\n\tor\n\texists(\n\t\t[Procedure: \"Hospice care ambulatory\"] HospicePerformed\n\t\t\twhere HospicePerformed.status.value in { 'preparation', 'in-progress', 'suspended', 'aborted', 'completed' }\n\t\t\t\tand PeriodToIntervalOfDT(HospicePerformed.performed) overlaps day of \"Measurement Period\"\n\t)\n\ndefine \"Is In Applicable Product Line\":\n\tcase\n\t\twhen (\"Product Line\" ~ null) then true\n\t\twhen (\"Product Line\" = 'commercial') then \"Is Continuous Enrollment\"\n\t\twhen (\"Product Line\" = 'medicaid') then \"Is Continuous Enrollment\"\n\t\twhen (\"Product Line\" = 'medicare') then\n\t\t\t(\"Is Continuous Enrollment\"\n\t\t\t\tand (if \"Is Age 65 Plus at Start\"\n\t\t\t\t\tthen (\"Is Enrolled in Institutional SNP\"\n\t\t\t\t\t\tor \"Is Living Long-Term in Institution\")\n\t\t\t\t\telse false))\n\t\telse false\n\tend\n\ndefine \"Enrollment Periods\":\n\tcollapse(\n\t\t[Coverage] Cov\n\t\t\twhere Cov.status.value in { 'active', 'cancelled' }\n\t\t\t\tand case \"Product Line\"\n\t\t\t\t\twhen 'commercial' then\n\t\t\t\t\t\tCodingToCode(Cov.type.coding) in \"X Commercial Coverage Value Set\"\n\t\t\t\t\twhen 'medicaid' then\n\t\t\t\t\t\tCodingToCode(Cov.type.coding) in \"X Medicaid Coverage Value Set\"\n\t\t\t\t\twhen 'medicare' then\n\t\t\t\t\t\tCodingToCode(Cov.type.coding) in \"X Medicare Coverage Value Set\"\n\t\t\t\t\telse false\n\t\t\t\tend\n\t\t\treturn PeriodToIntervalOfDT(Cov.period)\n\t)\n\t// We assume [Coverage] in Patient context implicitly has this filter:\n\t// Cov.beneficiary.identifier ~ Patient.identifier\n\t// ... and that the paitient is not connected as a policy holder or payor.\n\t// TODO: Properly determine organization(s) for the product line.\n\t// Note: collapse() also puts the resulting intervals in order.\n\ndefine function \"Enrollment Periods In Year\"(Year Interval&lt;DateTime&gt;):\n\t\"Enrollment Periods\" EnrP\n\t\twhere EnrP overlaps day of Year\n\t\treturn EnrP intersect Year\n\ndefine function \"Is Continuous Enrollment In Year\"(Year Interval&lt;DateTime&gt;):\n\tcase Count(\"Enrollment Periods In Year\"(Year))\n\t\twhen 1 then (\n\t\t\t((\"Enrollment Periods In Year\"(Year)[0] starts Year)\n\t\t\t\tand ((difference in days between\n\t\t\t\t\t\tend of \"Enrollment Periods In Year\"(Year)[0]\n\t\t\t\t\t\tand end of Year\n\t\t\t\t\t) &lt;= 45))\n\t\t\tor\n\t\t\t((\"Enrollment Periods In Year\"(Year)[0] ends Year)\n\t\t\t\tand ((difference in days between\n\t\t\t\t\t\tstart of \"Enrollment Periods In Year\"(Year)[0]\n\t\t\t\t\t\tand start of Year\n\t\t\t\t\t) &lt;= 45))\n\t\t)\n\t\twhen 2 then (\n\t\t\t(\"Enrollment Periods In Year\"(Year)[0] starts Year)\n\t\t\t\tand (\"Enrollment Periods In Year\"(Year)[1] ends Year)\n\t\t\t\tand ((difference in days between\n\t\t\t\t\t\tend of \"Enrollment Periods In Year\"(Year)[0]\n\t\t\t\t\t\tand start of \"Enrollment Periods In Year\"(Year)[1]\n\t\t\t\t\t) &lt;= 45)\n\t\t)\n\t\telse false\n\tend\n\ndefine function \"Is Continuous Enrollment In Quarter\"(Quarter Interval&lt;DateTime&gt;):\n\tcase Count(\"Enrollment Periods In Year\"(Quarter))\n\t\twhen 1 then (\"Enrollment Periods In Year\"(Quarter)[0] = Quarter)\n\t\telse false\n\tend\n\ndefine \"Is Continuous Enrollment\":\n\t\"Is Continuous Enrollment In Year\"(\"Measurement Period\")\n\t\tand \"Is Continuous Enrollment In Year\"(\"First Predecessor Year\")\n\t\tand \"Is Continuous Enrollment In Year\"(\"Second Predecessor Year\")\n\t\tand \"Is Continuous Enrollment In Quarter\"(\"Third Predecessor Quarter\")\n\ndefine \"Is Age 65 Plus at Start\":\n\tCalendarAgeInYearsAt(Patient.birthDate.value, start of \"Measurement Period\") &gt;= 65\n\ndefine \"Is Enrolled in Institutional SNP\":\n\texists(\n\t\t[Encounter: \"X Institutional SNP Value Set\"] Enc\n\t\t\twhere Enc.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\n\t\t\t\tand PeriodToIntervalOfDT(Enc.period) overlaps day of \"Measurement Period\"\n\t)\n\t// TODO: Determine properly whether the patient was in SNP during the measurement year.\n\ndefine \"Is Living Long-Term in Institution\":\n\texists(\n\t\t[Encounter: \"X Long-Term in Institution Value Set\"] Enc\n\t\t\twhere Enc.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\n\t\t\t\tand PeriodToIntervalOfDT(Enc.period) overlaps day of \"Measurement Period\"\n\t)\n\t// TODO: Determine properly whether the patient was in LTI during the measurement year.\n*/\n\n/*\nAdministrative Specification\n*/\r\n\r\ndefine \"Denominator\":\n\t// was \"Initial Population\", but that will always be true if this expression is executed\r\n  true\r\n\r\ndefine \"Numerator\":\r\n  case\r\n    when \"Is Cervical Cytology Test In Last 3 Years\" then true\r\n    when ( not \"Is Age 30 to 64 at End\" ) then false\r\n    when \"Is Cervical Cytology Plus HPV Test In Last 5 Years\" then true \r\n    else false \r\n  end\r\n\r\ndefine \"Is Age 30 to 64 at End\":\r\n  CalendarAgeInYearsAt(Patient.birthDate.value, \r\n    end of \"Measurement Period\"\r\n  )between 30 and 64\r\n\r\ndefine \"Is Cervical Cytology Test In Last 3 Years\":\r\n  exists ( \"Dates of Cervical Cytology Tests\" WhenCC\r\n      where WhenCC included in day of \"Lookback Interval Two More Years\"\r\n  )\r\n\r\ndefine \"Is Cervical Cytology Plus HPV Test In Last 5 Years\":\r\n  exists ( \"Dates of Cervical Cytology Tests\" WhenCC\r\n      with \"Dates of HPV Tests\" WhenHPV\r\n        such that ( ( ( difference in days between start of WhenCC and start of WhenHPV ) &lt;= 4 )\r\n            and CalendarAgeInYearsAt(Patient.birthDate.value, start of WhenCC)&gt;= 30\r\n            and CalendarAgeInYearsAt(Patient.birthDate.value, start of WhenHPV)&gt;= 30\r\n            and WhenCC included in day of \"Lookback Interval Four More Years\"\r\n            and WhenHPV included in day of \"Lookback Interval Four More Years\"\r\n        )\r\n  )\r\n\r\ndefine \"Dates of Cervical Cytology Tests\":\r\n  ( [Procedure: \"Cervical Cytology Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n      return PeriodToIntervalOfDT(Proc.performed)\r\n  )\r\n    union ( [DiagnosticReport: \"Cervical Cytology Value Set\"] DiagRep\r\n        where DiagRep.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        return PeriodToIntervalOfDT(DiagRep.effective)\r\n    )\r\n    union ( [Observation: \"Cervical Cytology Value Set\"] Obs\r\n        where Obs.status.value in { 'final', 'amended' }\r\n        return DateTimeToInterval(Obs.effective)\r\n    )\r\n\r\ndefine \"Dates of HPV Tests\":\r\n  ( [Procedure: \"HPV Tests Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n      return PeriodToIntervalOfDT(Proc.performed)\r\n  )\r\n    union ( [DiagnosticReport: \"HPV Tests Value Set\"] DiagRep\r\n        where DiagRep.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        return PeriodToIntervalOfDT(DiagRep.effective)\r\n    )\r\n    union ( [Observation: \"HPV Tests Value Set\"] Obs\r\n        where Obs.status.value in { 'final', 'amended' }\r\n        return DateTimeToInterval(Obs.effective)\r\n    )\r\n\r\ndefine \"Denominator Exclusion\":\r\n  \"Is Hysterectomy\"\r\n\r\ndefine \"Is Hysterectomy\":\r\n  exists ( [Procedure: \"Absence of Cervix Value Set\"] Proc\r\n      where Proc.status.value = 'completed'\r\n        and \r\n        end of\r\n        case\r\n          when Proc.performed is DateTime then Interval[Proc.performed.value, Proc.performed.value]\r\n          else Interval[Proc.performed.\"start\".value, Proc.performed.\"end\".value]\r\n        end same day or before \r\n        end of \"Measurement Period\"\r\n  )\n\n/*\nHybrid Specification\nTODO, if needed\n*/\n\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function DateTimeToInterval(date FHIR.dateTime):\r\n  Interval[date.value, date.value]\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n\r\ndefine function CodingToCode(coding FHIR.Coding):\r\n  System.Code { code: coding.code.value, system: coding.system.value, version: coding.version.value, display: coding.display.value }\n\t// From FHIRHelpers\r\n\r\ndefine function \"ToDate\"(Value DateTime):\r\n  DateTime(year from Value, month from Value, day from Value, 0, 0, 0, 0, timezone from Value)\r\n\r\ndefine function CalendarAgeInYearsAt(BirthDateTime DateTime, AsOf DateTime):\r\n  years between ToDate(BirthDateTime)and ToDate(AsOf)\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-ccs-logic",
        "identifier": [
          {
            "use": "official",
            "value": "Library_CCS"
          }
        ],
        "version": "1.0.1",
        "name": "CCS_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-common-logic"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-participation-logic"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.43"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1108.15"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1208"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1208"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1208"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1265.26"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1265.26"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1265.26"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1123.17"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "LyoNCkNlcnZpY2FsIENhbmNlciBTY3JlZW5pbmcgKENDUykNCiovDQoNCmxpYnJhcnkgQ0NTX0ZISVIgdmVyc2lvbiAnMS4wLjEnDQoNCnVzaW5nIEZISVIgdmVyc2lvbiAnMy4wLjAnDQoNCmluY2x1ZGUgRkhJUkhlbHBlcnMgdmVyc2lvbiAnMy4wLjAnDQppbmNsdWRlIE5DUUFDb21tb25fRkhJUiB2ZXJzaW9uICczLjEwLjAwMCcgY2FsbGVkIENvbW1vbg0KaW5jbHVkZSBQYXJ0aWNpcGF0aW9uX0ZISVIgdmVyc2lvbiAnMS4wLjAnDQoNCi8qDQpEZXNjcmlwdGlvbg0KVGhlIHBlcmNlbnRhZ2Ugb2Ygd29tZW4gMjEtNjQgeWVhcnMgb2YgYWdlIHdobyB3ZXJlIHNjcmVlbmVkIGZvciBjZXJ2aWNhbA0KICAgIGNhbmNlciB1c2luZyBlaXRoZXIgb2YgdGhlIGZvbGxvd2luZyBjcml0ZXJpYToNCiAgKiBXb21lbiAyMS02NCB5ZWFycyBvZiBhZ2Ugd2hvIGhhZCBjZXJ2aWNhbCBjeXRvbG9neSBwZXJmb3JtZWQgZXZlcnkgMyB5ZWFycy4NCiAgKiBXb21lbiAzMC02NCB5ZWFycyBvZiBhZ2Ugd2hvIGhhZCBjZXJ2aWNhbCBjeXRvbG9neS9odW1hbiBwYXBpbGxvbWF2aXJ1cw0KICAgIChIUFYpIGNvLXRlc3RpbmcgcGVyZm9ybWVkIGV2ZXJ5IDUgeWVhcnMuDQoqLw0KDQp2YWx1ZXNldCAiQWJzZW5jZSBvZiBDZXJ2aXggVmFsdWUgU2V0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTEyMy4xNycgLy8gQ1BUDQovLyB2YWx1ZXNldCAiQWJzZW5jZSBvZiBDZXJ2aXggVmFsdWUgU2V0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTEyMy4xOCcgLy8gSUNEMTBDTQ0KLy8gdmFsdWVzZXQgIkFic2VuY2Ugb2YgQ2Vydml4IFZhbHVlIFNldCI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjExMjMuMTknIC8vIElDRDEwUENTDQovLyB2YWx1ZXNldCAiQWJzZW5jZSBvZiBDZXJ2aXggVmFsdWUgU2V0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTEyMy4yMCcgLy8gSUNEOUNNDQovLyB2YWx1ZXNldCAiQWJzZW5jZSBvZiBDZXJ2aXggVmFsdWUgU2V0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTEyMy4yMScgLy8gSUNEOUNNUHJvYw0KDQp2YWx1ZXNldCAiQ2VydmljYWwgQ3l0b2xvZ3kgVmFsdWUgU2V0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTIwOCcgLy8gR3JvdXBpbmcNCi8vIHZhbHVlc2V0ICJDZXJ2aWNhbCBDeXRvbG9neSBWYWx1ZSBTZXQiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMjA4LjIyJyAvLyBDUFQNCi8vIHZhbHVlc2V0ICJDZXJ2aWNhbCBDeXRvbG9neSBWYWx1ZSBTZXQiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMjA4LjIzJyAvLyBIQ1BDUw0KLy8gdmFsdWVzZXQgIkNlcnZpY2FsIEN5dG9sb2d5IFZhbHVlIFNldCI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEyMDguMjQnIC8vIExPSU5DDQovLyB2YWx1ZXNldCAiQ2VydmljYWwgQ3l0b2xvZ3kgVmFsdWUgU2V0IjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTIwOC4yNScgLy8gUmV2Q29kZQ0KDQp2YWx1ZXNldCAiSFBWIFRlc3RzIFZhbHVlIFNldCI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEyNjUuMjYnIC8vIENQVA0KLy8gdmFsdWVzZXQgIkhQViBUZXN0cyBWYWx1ZSBTZXQiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMjY1LjI3JyAvLyBIQ1BDUw0KLy8gdmFsdWVzZXQgIkhQViBUZXN0cyBWYWx1ZSBTZXQiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMjY1LjI4JyAvLyBMT0lOQw0KDQovKg0KVGhpcyBsaWJyYXJ5IGhhcyBhbiBleHBsaWNpdCBwYXJhbWV0ZXIgd2hpY2ggaXMgdGhlIHByb2R1Y3QgbGluZS4NClJlY29nbml6ZWQgbm9ybWFsIGFyZ3VtZW50cyBhcmUgeydjb21tZXJjaWFsJywgJ21lZGljYWlkJywgJ21lZGljYXJlJ30uDQpJZiBvbmUgb2YgdGhlc2Ugbm9ybWFsIGFyZ3VtZW50cyBpcyBnaXZlbiwgdGhlIHBhdGllbnQgd2lsbCBvbmx5IGJlDQpjb25zaWRlcmVkIHRvIGJlIGluIHRoZSBJbml0aWFsIFBvcHVsYXRpb24gaWYgdGhleSBoYXZlIGFuIGFwcHJvcHJpYXRlDQpjb250aW51b3VzIGVucm9sbG1lbnQgaW4gdGhhdCBraW5kIG9mIG1lZGljYWwgcGxhbi4NCklmIGluc3RlYWQgYSBudWxsIGFyZ3VtZW50IGlzIGdpdmVuLCB0aGVpciBlbnJvbGxtZW50IHN0YXR1cyB3aWxsIGhhdmUgbm8NCmVmZmVjdCBvbiB3aGV0aGVyIHRoZXkgYXJlIGNvbnNpZGVyZWQgdG8gYmUgaW4gdGhlIEluaXRpYWwgUG9wdWxhdGlvbi4NCklmIGluc3RlYWQgc29tZSBvdGhlciBhcmd1bWVudCBpcyBnaXZlbiAoYW4gdW5yZWNvZ25pemVkIHBsYW4gdHlwZSksDQp0aGUgcGF0aWVudCB3aWxsIHVuY29uZGl0aW9uYWxseSBOT1QgYmUgaW4gdGhlIEluaXRpYWwgUG9wdWxhdGlvbi4NCiovDQoNCnBhcmFtZXRlciAiUHJvZHVjdCBMaW5lIiBTdHJpbmcNCg0KLyoNClRoaXMgbGlicmFyeSBoYXMgYW4gZXhwbGljaXQgcGFyYW1ldGVyIHdoaWNoIGlzIHRoZSBtZWFzdXJlbWVudCB5ZWFyLg0KV2hpbGUgdGhlIGFjdHVhbCBwYXJhbWV0ZXIncyB0eXBlIGFjY2VwdHMgYWxsIGludGVydmFscywgdGhpcyBsaWJyYXJ5DQpleHBlY3RzIGl0IHdpbGwgb25seSBiZSBnaXZlbiBhcmd1bWVudHMgY29ycmVzcG9uZGluZyBleGFjdGx5IHRvIG9uZSB3aG9sZQ0KY2FsZW5kYXIgeWVhciwgYW5kIGl0IHdpbGwgbm90IGJlaGF2ZSBwcm9wZXJseSBvdGhlcndpc2U7IDIwMTcgZm9yIGV4YW1wbGU6DQpJbnRlcnZhbFtEYXRlVGltZSgyMDE3LDEsMSwwLDAsMCwwKSwgRGF0ZVRpbWUoMjAxOCwxLDEsMCwwLDAsMCkpDQoqLw0KDQpwYXJhbWV0ZXIgIk1lYXN1cmVtZW50IFBlcmlvZCIgSW50ZXJ2YWw8RGF0ZVRpbWU+DQoNCmRlZmluZSAiRmlyc3QgUHJlZGVjZXNzb3IgWWVhciI6DQogIEludGVydmFsW3N0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiIC0gMSB5ZWFyLCBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIgLSAxIHllYXIpDQoNCmRlZmluZSAiU2Vjb25kIFByZWRlY2Vzc29yIFllYXIiOg0KICBJbnRlcnZhbFtzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDIgeWVhcnMsIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDIgeWVhcikNCg0KZGVmaW5lICJUaGlyZCBQcmVkZWNlc3NvciBRdWFydGVyIjoNCiAgSW50ZXJ2YWxbc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIgLSAyIHllYXJzIC0gMyBtb250aHMsIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDMgeWVhcnMpDQoNCmRlZmluZSAiTG9va2JhY2sgSW50ZXJ2YWwgVHdvIE1vcmUgWWVhcnMiOg0KICBJbnRlcnZhbFtzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDIgeWVhcnMsIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikNCg0KZGVmaW5lICJMb29rYmFjayBJbnRlcnZhbCBGb3VyIE1vcmUgWWVhcnMiOg0KICBJbnRlcnZhbFtzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDQgeWVhcnMsIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikNCg0KLyoNClRoaXMgbGlicmFyeSBldmFsdWF0ZXMgd2l0aCByZXNwZWN0IHRvIGV4YWN0bHkgMSBjYW5kaWRhdGUgcGF0aWVudCBhdCBhIHRpbWUsDQp0aGF0IHBhdGllbnQgYmVpbmcgZ2l2ZW4gYnkgdGhlIHNwZWNpYWwgY29udGV4dCBwYXJhbWV0ZXIgUGF0aWVudC4NCiovDQoNCmNvbnRleHQgUGF0aWVudA0KDQovKg0KSW5pdGlhbCBQb3B1bGF0aW9uDQpQcm9kdWN0IGxpbmVzIC0tIENvbW1lcmNpYWwsIE1lZGljYWlkLCBNZWRpY2FyZSAocmVwb3J0IGVhY2ggcHJvZHVjdCBsaW5lIHNlcGFyYXRlbHkpLg0KKi8NCg0KZGVmaW5lICJJbml0aWFsIFBvcHVsYXRpb24iOg0KICAiSXMgRmVtYWxlIg0KICAgIGFuZCAiSXMgQWdlIDI0IHRvIDY0IGF0IEVuZCINCiAgICBhbmQgbm90IENvbW1vbi4iSGFzIEhvc3BpY2UiDQovKg0KICAgIGFuZCAiSXMgSW4gQXBwbGljYWJsZSBQcm9kdWN0IExpbmUiDQoqLw0KDQpkZWZpbmUgIklzIEZlbWFsZSI6DQogIFBhdGllbnQuZ2VuZGVyID0gJ2ZlbWFsZScNCiAgDQpkZWZpbmUgIklzIEFnZSAyNCB0byA2NCBhdCBFbmQiOg0KICBDb21tb24uQ2FsZW5kYXJBZ2VJblllYXJzQXQoRkhJUkhlbHBlcnMuVG9EYXRlKFBhdGllbnQuYmlydGhEYXRlKSwgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSBiZXR3ZWVuIDI0IGFuZCA2NA0KDQovKg0KQWRtaW5pc3RyYXRpdmUgU3BlY2lmaWNhdGlvbg0KKi8NCg0KZGVmaW5lICJEZW5vbWluYXRvciI6DQogIHRydWUNCg0KZGVmaW5lICJOdW1lcmF0b3IiOg0KICBjYXNlDQogICAgd2hlbiAiSXMgQ2VydmljYWwgQ3l0b2xvZ3kgVGVzdCBJbiBMYXN0IDMgWWVhcnMiIHRoZW4gdHJ1ZQ0KICAgIHdoZW4gKG5vdCAiSXMgQWdlIDMwIHRvIDY0IGF0IEVuZCIpIHRoZW4gZmFsc2UNCiAgICB3aGVuICJJcyBDZXJ2aWNhbCBDeXRvbG9neSBQbHVzIEhQViBUZXN0IEluIExhc3QgNSBZZWFycyIgdGhlbiB0cnVlDQogICAgZWxzZSBmYWxzZQ0KICBlbmQNCg0KZGVmaW5lICJJcyBBZ2UgMzAgdG8gNjQgYXQgRW5kIjoNCiAgQ29tbW9uLkNhbGVuZGFyQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZShQYXRpZW50LmJpcnRoRGF0ZSksIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgYmV0d2VlbiAzMCBhbmQgNjQNCg0KZGVmaW5lICJJcyBDZXJ2aWNhbCBDeXRvbG9neSBUZXN0IEluIExhc3QgMyBZZWFycyI6DQogIGV4aXN0cyAoDQogICAgIkRhdGVzIG9mIENlcnZpY2FsIEN5dG9sb2d5IFRlc3RzIiBXaGVuQ0MNCiAgICAgIHdoZXJlIFdoZW5DQyBpbmNsdWRlZCBpbiBkYXkgb2YgIkxvb2tiYWNrIEludGVydmFsIFR3byBNb3JlIFllYXJzIg0KICApDQoNCmRlZmluZSAiSXMgQ2VydmljYWwgQ3l0b2xvZ3kgUGx1cyBIUFYgVGVzdCBJbiBMYXN0IDUgWWVhcnMiOg0KICBleGlzdHMgKA0KICAgICJEYXRlcyBvZiBDZXJ2aWNhbCBDeXRvbG9neSBUZXN0cyIgV2hlbkNDDQogICAgICB3aXRoICJEYXRlcyBvZiBIUFYgVGVzdHMiIFdoZW5IUFYNCiAgICAgICAgc3VjaCB0aGF0ICgoKGRpZmZlcmVuY2UgaW4gZGF5cyBiZXR3ZWVuIHN0YXJ0IG9mIFdoZW5DQyBhbmQgc3RhcnQgb2YgV2hlbkhQVikgPD0gNCkNCiAgICAgICAgICBhbmQgQ29tbW9uLkNhbGVuZGFyQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZShQYXRpZW50LmJpcnRoRGF0ZSksIHN0YXJ0IG9mIFdoZW5DQykgPj0gMzANCiAgICAgICAgICBhbmQgQ29tbW9uLkNhbGVuZGFyQWdlSW5ZZWFyc0F0KEZISVJIZWxwZXJzLlRvRGF0ZShQYXRpZW50LmJpcnRoRGF0ZSksIHN0YXJ0IG9mIFdoZW5IUFYpID49IDMwDQogICAgICAgICAgYW5kIFdoZW5DQyBpbmNsdWRlZCBpbiBkYXkgb2YgIkxvb2tiYWNrIEludGVydmFsIEZvdXIgTW9yZSBZZWFycyINCiAgICAgICAgICBhbmQgV2hlbkhQViBpbmNsdWRlZCBpbiBkYXkgb2YgIkxvb2tiYWNrIEludGVydmFsIEZvdXIgTW9yZSBZZWFycyIpDQogICkNCg0KZGVmaW5lICJEYXRlcyBvZiBDZXJ2aWNhbCBDeXRvbG9neSBUZXN0cyI6DQogIChbUHJvY2VkdXJlOiAiQ2VydmljYWwgQ3l0b2xvZ3kgVmFsdWUgU2V0Il0gUHJvYw0KICAgIHdoZXJlIFByb2Muc3RhdHVzID0gJ2NvbXBsZXRlZCcNCiAgICByZXR1cm4gUHJvYy5wZXJmb3JtZWQpDQogIHVuaW9uDQogIChbRGlhZ25vc3RpY1JlcG9ydDogIkNlcnZpY2FsIEN5dG9sb2d5IFZhbHVlIFNldCJdIERpYWdSZXANCiAgICB3aGVyZSBEaWFnUmVwLnN0YXR1cyBpbiB7ICdwcmVsaW1pbmFyeScsICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcsICdhcHBlbmRlZCcgfQ0KICAgIHJldHVybiBEaWFnUmVwLmVmZmVjdGl2ZSkNCiAgdW5pb24NCiAgKFtPYnNlcnZhdGlvbjogIkNlcnZpY2FsIEN5dG9sb2d5IFZhbHVlIFNldCJdIE9icw0KICAgIHdoZXJlIE9icy5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcgfQ0KICAgIHJldHVybiBPYnMuZWZmZWN0aXZlKQ0KDQpkZWZpbmUgIkRhdGVzIG9mIEhQViBUZXN0cyI6DQogIChbUHJvY2VkdXJlOiAiSFBWIFRlc3RzIFZhbHVlIFNldCJdIFByb2MNCiAgICB3aGVyZSBQcm9jLnN0YXR1cyA9ICdjb21wbGV0ZWQnDQogICAgcmV0dXJuIFByb2MucGVyZm9ybWVkKQ0KICB1bmlvbg0KICAoW0RpYWdub3N0aWNSZXBvcnQ6ICJIUFYgVGVzdHMgVmFsdWUgU2V0Il0gRGlhZ1JlcA0KICAgIHdoZXJlIERpYWdSZXAuc3RhdHVzLnZhbHVlIGluIHsgJ3ByZWxpbWluYXJ5JywgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJywgJ2FwcGVuZGVkJyB9DQogICAgcmV0dXJuIERpYWdSZXAuZWZmZWN0aXZlKQ0KICB1bmlvbg0KICAoW09ic2VydmF0aW9uOiAiSFBWIFRlc3RzIFZhbHVlIFNldCJdIE9icw0KICAgIHdoZXJlIE9icy5zdGF0dXMudmFsdWUgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcgfQ0KICAgIHJldHVybiBPYnMuZWZmZWN0aXZlKQ0KDQpkZWZpbmUgIkRlbm9taW5hdG9yIEV4Y2x1c2lvbiI6DQogICJJcyBIeXN0ZXJlY3RvbXkiDQoNCmRlZmluZSAiSXMgSHlzdGVyZWN0b215IjoNCiAgZXhpc3RzICgNCiAgICBbUHJvY2VkdXJlOiAiQWJzZW5jZSBvZiBDZXJ2aXggVmFsdWUgU2V0Il0gUHJvYw0KICAgICAgd2hlcmUgUHJvYy5zdGF0dXMgPSAnY29tcGxldGVkJw0KICAgICAgICBhbmQgUHJvYy5wZXJmb3JtZWQgc2FtZSBkYXkgb3IgYmVmb3JlIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIg0KICApDQoNCi8qDQpIeWJyaWQgU3BlY2lmaWNhdGlvbg0KVE9ETywgaWYgbmVlZGVkDQoqLw0K"
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-ccs-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-cdc-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-cdc-logic/_history/9</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>Library_CDC</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Cohort Definition for Comprehensive Diabetes Care Measure</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Topic: </b></th><td style=\"padding-right: 25px;\"><span style=\"padding-left: 25px;\"><b>text: </b><span>Diabetes Care</span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"11\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1116</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1115</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1113</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1114</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationRequest</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medicationCodeableConcept</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.526.3.1139</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1078</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1079</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1080</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1257</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1216</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1078</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library CDC version '1'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\n\n/*\n\nCDC Observation:         Result Description:                                       HL7 Message:     NCQA Value Set Name:                  Code Types:     Time Range:\nHeamoglobin A1C          A1c value, normal adult is generally less than 7.0.�      ORU              \"HbA1c Tests\"                           CPT, LOINC      1 year\nObservation              Provide numbers only, units are assumed.                                   \"HbA1c Level Less than 7.0\"\n                                                                                                    \"HbA1c Level 7.0-9.0\"\n                                                                                                    \"HbA1c Level Greater Than 9.0\"\n\nARB                      Indicates that the provider prescribed an                 RDE              Not in the value set, available         NDC             1 year\nMedication               ARB on the date of service                                                 from ncqa.org as \"CDC-L\" in doc\n                                                                                                    or xls format\n\nACE                      Indicates that the provider prescribed an                 RDE              Not in the value set, available         NDC             1 year\nMedication               ACE on the date of service                                                 from ncqa.org as \"CDC-L\" in doc\n                                                                                                    or xls format\n\nDilated Eye Exam         Indicated a Dilated Eye Exam was Performed                ORU              \"Diabetic Retinal Screening\"            CPT, HCPCS      2 years\nProcedure                                                                                         \"Diabetic Retinal Screening Negative\"\n                                                                                                    \"Diabetic Retinal Screening With Eye Care Professional\"\n\nMacroalbumin             Positive or negative value, normal adults are negative    ORU              \"Urine Protein Tests\"                   CPT, LOINC      N/A\nObservation\n\nMacroalbumin             Microalbumin level in urine, less than 30 is              ORU              \"Urine Protein Tests\"                   CPT, LOINC      1 year\nObservation              normal range.� Provide numbers only,\n                         units are assumed.\n\nRetinopathy Positive     1 = Diabetic retinopathy detected on dilated/retinal      N/A              \"Diabetic Retinal Screening\"            CPT, HCPCS      2 years\nProcedure              eye exam                                                                   \"Diabetic Retinal Screening Negative\"\n                                                                                                    \"Diabetic Retinal Screening With Eye Care Professional\"\n\n*/\n\n// NCQA Value Sets\n// https://ecqi.healthit.gov/system/files/ecqm/2014/EP/measures/CMS122v3.html\n// \"Laboratory Test, Result: HbA1c Laboratory Test\" using \"HbA1c Laboratory Test Grouping Value Set (2.16.840.1.113883.3.464.1003.198.12.1013)\"\r\n\r\nvalueset \"HbA1c Tests\": '2.16.840.1.113883.3.464.1004.1116'\r\nvalueset \"HbA1c Level Less than 7.0\": '2.16.840.1.113883.3.464.1004.1115'\r\nvalueset \"HbA1c Level 7.0-9.0\": '2.16.840.1.113883.3.464.1004.1113'\r\nvalueset \"HbA1c Level Greater Than 9.0\": '2.16.840.1.113883.3.464.1004.1114'\r\nvalueset \"Diabetic Retinal Screening\": '2.16.840.1.113883.3.464.1004.1078'\r\nvalueset \"Diabetic Retinal Screening Negative\": '2.16.840.1.113883.3.464.1004.1079'\r\nvalueset \"Diabetic Retinal Screening With Eye Care Professional\": '2.16.840.1.113883.3.464.1004.1080'\n\n// https://ecqi.healthit.gov/system/files/ecqm/2014/EP/measures/CMS134v4_1.html\n// \"Laboratory Test, Performed: Urine Protein Tests\" using \"Urine Protein Tests Grouping Value Set (2.16.840.1.113883.3.464.1003.109.12.1024)\"\n// \"Medication, Active: ACE Inhibitor or ARB\" using \"ACE Inhibitor or ARB Grouping Value Set (2.16.840.1.113883.3.526.3.1139)\"\r\nvalueset \"ACE Inhibitor or ARB\": '2.16.840.1.113883.3.526.3.1139'\r\nvalueset \"Urine Macroalbumin Tests\": '2.16.840.1.113883.3.464.1004.1257'\r\nvalueset \"Positive Urine Macroalbumin Tests\": '2.16.840.1.113883.3.464.1004.1216'\r\nvalueset \"Urine Protein Test\": 'Urine Protein Test'\r\n\r\nparameter MeasurementPeriod Interval&lt;DateTime&gt;\r\n\r\ncontext Patient\r\n\r\ndefine \"Lookback Interval One Year\":\r\n  Interval[start of MeasurementPeriod - 1 years, \r\n  end of MeasurementPeriod]\r\n\r\ndefine \"Lookback Interval Two Years\":\r\n  Interval[start of MeasurementPeriod - 2 years, \r\n  end of MeasurementPeriod]\n\n// TODO: Need to verify the demographic here\r\n\r\ndefine \"In Demographic\":\r\n  AgeInYearsAt(start of MeasurementPeriod)&gt;= 40\n\n// Heamoglobin A1C Observation\r\n\r\ndefine \"Heamoglobin A1C Tests\":\r\n  [Observation: \"HbA1c Tests\"] T\r\n    where T.status in { 'final', 'amended' }\r\n      and T.effective during day of \"Lookback Interval One Year\"\r\n\r\ndefine \"Heamoglobin A1C Level Less than 7.0\":\r\n  [Observation: \"HbA1c Level Less than 7.0\"] H\r\n    where H.status in { 'final', 'amended' }\r\n      and H.effective during day of \"Lookback Interval One Year\"\r\n\r\ndefine \"Heamoglobin A1C Level 7.0-9.0\":\r\n  [Observation: \"HbA1c Level 7.0-9.0\"] H\r\n    where H.status in { 'final', 'amended' }\r\n      and H.effective during day of \"Lookback Interval One Year\"\r\n\r\ndefine \"Heamoglobin A1C Level Greater than 9.0\":\r\n  [Observation: \"HbA1c Level Greater Than 9.0\"] H\r\n    where H.status in { 'final', 'amended' }\r\n      and H.effective in day of \"Lookback Interval One Year\"\n\n// Angiotensin II receptor blockers (ARB) Medication Order\n\n// Angiotensin Converting Enzyme (ACE) Medication Order\n// The following list of medications is from the CDC-L_2015(final).xls document found here:\n// https://www.ncqa.org/HEDISQualityMeasurement/HEDISMeasures/HEDIS2015/HEDIS2015NDCLicense/HEDIS2015FinalNDCLists.aspx\n// Possible ACE medications to consider:\n// Lotensin\n// Benazepril Hydrochloride\n// Captopril\n// Epaned\n// Enalapril Maleate\n// Vasotec\n// Fosinopril Sodium\n// Prinivil\n// Lisinopril\n// Zestril\n// Univasc\n// Moexipril Hydrochloride\n// Aceon\n// Perindopril Erbumine\n// Quinapril Hydrochloride\n// Accupril\n// Ramipril\n// Altace\n// Mavik\n// Trandolapril\r\n\r\ndefine \"ACE Inhibitor or ARB Medication Order\":\r\n  [MedicationRequest: \"ACE Inhibitor or ARB\"] A\r\n    where A.status = 'completed'\r\n      and A.authoredOn during day of \"Lookback Interval One Year\"\n\n// Dilated Eye Exam Observation\r\n\r\ndefine \"Diabetic Retinal Screening Eye Exam\":\r\n  [Procedure: \"Diabetic Retinal Screening\"] D\r\n    where D.status = 'completed'\r\n      and D.performed during day of \"Lookback Interval Two Years\"\r\n\r\ndefine \"Diabetic Retinal Screening Negative Eye Exam\":\r\n  [Procedure: \"Diabetic Retinal Screening Negative\"] D\r\n    where D.status = 'completed'\r\n      and D.performed during day of \"Lookback Interval Two Years\"\r\n\r\ndefine \"Diabetic Retinal Screening With Eye Care Professional Eye Exam\":\r\n  [Procedure: \"Diabetic Retinal Screening With Eye Care Professional\"] D\r\n    where D.status = 'completed'\r\n      and D.performed during day of \"Lookback Interval Two Years\"\n\n// Macroalbumin Observation\r\n\r\ndefine \"Macroalbumin Results\":\r\n  [Observation: \"Urine Macroalbumin Tests\"] M\r\n    where M.status in { 'final', 'amended' }\r\n      and M.effective during day of \"Lookback Interval One Year\"\r\n\r\ndefine \"Positive Macroalbumin Tests\":\r\n  [Observation: \"Positive Urine Macroalbumin Tests\"] M\r\n    where M.status in { 'final', 'amended' }\r\n      and M.effective during day of \"Lookback Interval One Year\"\n\n// Retinopathy Positive\r\n\r\ndefine \"Diabetic Retinopathy Detected\":\r\n  [Observation: \"Diabetic Retinal Screening\"] D\r\n    where D.status in { 'final', 'amended' }\r\n      and D.effective during day of \"Lookback Interval Two Years\"\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-cdc-logic",
        "identifier": [
          {
            "use": "official",
            "value": "Library_CDC"
          }
        ],
        "version": "1.0.0",
        "name": "CDC_FHIR",
        "title": "Cohort Definition for Comprehensive Diabetes Care Measure",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "topic": [
          {
            "text": "Diabetes Care"
          }
        ],
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1116"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1115"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1113"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1114"
              }
            ]
          },
          {
            "type": "MedicationRequest",
            "codeFilter": [
              {
                "path": "medication",
                "valueSetString": "2.16.840.1.113883.3.526.3.1139"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1078"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1079"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1080"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1257"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1216"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1078"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-cdc-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-col-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-col-logic/_history/3</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.1</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"18\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1093.41</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1093.42</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1093.43</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1102.38</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1102.39</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1102.40</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1064.29</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1064.30</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1064.31</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1421.34</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1420.35</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1420.36</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1420.37</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1065.32</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Condition</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1065.33</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1250.44</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1250.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1250.46</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nColorectal Cancer Screening (COL)\n*/library COL_FHIR version '1.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nDescription\nThe percentage of members 50-75 years of age who had appropriate screening for colorectal cancer.\n*/\n\n/*\nIt is an outstanding question whether implementers would have an easier time dealing\nwith single code system value sets for retrieval of data, or if the grouping value sets\nare easier to deal with. This mesaure is modified to take the approach of unioning\nthe results in CQL, where the BCS and CCS measures take the grouping value set\napproach.\n*/\r\n\r\nvalueset \"Colonoscopy Value Set (CPT)\": '2.16.840.1.113883.3.464.1004.1064.29' // CPT\r\nvalueset \"Colonoscopy Value Set (HCPCS)\": '2.16.840.1.113883.3.464.1004.1064.30' // HCPCS\r\nvalueset \"Colonoscopy Value Set (ICD9)\": '2.16.840.1.113883.3.464.1004.1064.31' // ICD9CMProc\r\nvalueset \"Colorectal Cancer Value Set (ICD10)\": '2.16.840.1.113883.3.464.1004.1065.32' // ICD10CM\r\nvalueset \"Colorectal Cancer Value Set (ICD9)\": '2.16.840.1.113883.3.464.1004.1065.33' // ICD9CM\r\nvalueset \"CT Colonography Value Set\": '2.16.840.1.113883.3.464.1004.1421.34' // CPT\r\nvalueset \"FIT-DNA Value Set (CPT)\": '2.16.840.1.113883.3.464.1004.1420.35' // CPT\r\nvalueset \"FIT-DNA Value Set (HCPCS)\": '2.16.840.1.113883.3.464.1004.1420.36' // HCPCS\r\nvalueset \"FIT-DNA Value Set (LOINC)\": '2.16.840.1.113883.3.464.1004.1420.37' // LOINC\r\nvalueset \"Flexible Sigmoidoscopy Value Set (CPT)\": '2.16.840.1.113883.3.464.1004.1102.38' // CPT\r\nvalueset \"Flexible Sigmoidoscopy Value Set (HCPCS)\": '2.16.840.1.113883.3.464.1004.1102.39' // HCPCS\r\nvalueset \"Flexible Sigmoidoscopy Value Set (ICD9)\": '2.16.840.1.113883.3.464.1004.1102.40' // ICD9CMProc\r\nvalueset \"FOBT Value Set (CPT)\": '2.16.840.1.113883.3.464.1004.1093.41' // CPT\r\nvalueset \"FOBT Value Set (HCPCS)\": '2.16.840.1.113883.3.464.1004.1093.42' // HCPCS\r\nvalueset \"FOBT Value Set (ICD9)\": '2.16.840.1.113883.3.464.1004.1093.43' // ICD9CMProc\r\nvalueset \"Total Colectomy Value Set (CPT)\": '2.16.840.1.113883.3.464.1004.1250.44' // CPT\r\nvalueset \"Total Colectomy Value Set (ICD10)\": '2.16.840.1.113883.3.464.1004.1250.45' // ICD10PCS\r\nvalueset \"Total Colectomy Value Set (ICD9)\": '2.16.840.1.113883.3.464.1004.1250.46' // ICD9CMProc\n\n/*\nThis library has an explicit parameter which is the product line.\nRecognized normal arguments are {'commercial', 'medicaid', 'medicare'}.\nIf one of these normal arguments is given, the patient will only be\nconsidered to be in the Initial Population if they have an appropriate\ncontinuous enrollment in that kind of medical plan.\nIf instead a null argument is given, their enrollment status will have no\neffect on whether they are considered to be in the Initial Population.\nIf instead some other argument is given (an unrecognized plan type),\nthe patient will unconditionally NOT be in the Initial Population.\n*/\r\n\r\nparameter \"Product Line\" String\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\r\n\r\ndefine \"Lookback Interval Two More Years\":\r\n  Interval[start of \"Measurement Period\" - 2 years, \r\n  end of \"Measurement Period\" )\r\n\r\ndefine \"Lookback Interval Four More Years\":\r\n  Interval[start of \"Measurement Period\" - 4 years, \r\n  end of \"Measurement Period\" )\r\n\r\ndefine \"Lookback Interval Nine More Years\":\r\n  Interval[start of \"Measurement Period\" - 9 years, \r\n  end of \"Measurement Period\" )\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  \"Is Age 51 to 75 at End\"\r\n\r\ndefine \"Is Age 51 to 75 at End\":\r\n  CalendarAgeInYearsAt(Patient.birthDate.value, \r\n    end of \"Measurement Period\"\r\n  )between 51 and 75\r\n\r\ndefine \"Denominator\":\n\t// was \"Initial Population\", but that will always be true if this expression is executed\r\n  true\r\n\r\ndefine \"Numerator\":\r\n  \"Is Colorectal Cancer Screening\"\r\n\r\ndefine \"Is Colorectal Cancer Screening\":\r\n  \"Is Fecal Occult Blood Test In Last Year\"\r\n    or \"Is Flexible Sigmoidoscopy In Last Five Years\"\r\n    or \"Is Colonoscopy In Last Ten Years\"\r\n    or \"Is CT Colonography In Last Five Years\"\r\n    or \"Is FIT-DNA Test In Last Three Years\"\r\n\r\ndefine \"FOBT Observations\":\r\n  [Observation: \"FOBT Value Set (CPT)\"]\r\n    union [Observation: \"FOBT Value Set (HCPCS)\"]\r\n    union [Observation: \"FOBT Value Set (ICD9)\"]\r\n\r\ndefine \"Is Fecal Occult Blood Test In Last Year\":\r\n  exists ( \"FOBT Observations\" Obs\r\n      where Obs.status.value in { 'final', 'amended' }\r\n        and Obs.effective.value in day of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Flexible Sigmoidoscopy Reports\":\r\n  [DiagnosticReport: \"Flexible Sigmoidoscopy Value Set (CPT)\"]\r\n    union [DiagnosticReport: \"Flexible Sigmoidoscopy Value Set (HCPCS)\"]\r\n    union [DiagnosticReport: \"Flexible Sigmoidoscopy Value Set (ICD9)\"]\r\n\r\ndefine \"Is Flexible Sigmoidoscopy In Last Five Years\":\r\n  exists ( \"Flexible Sigmoidoscopy Reports\" DiagRep\r\n      where DiagRep.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(DiagRep.effective)overlaps day of \"Lookback Interval Four More Years\"\r\n  )\r\n\r\ndefine \"Colonoscopy Reports\":\r\n  [DiagnosticReport: \"Colonoscopy Value Set (CPT)\"]\r\n    union [DiagnosticReport: \"Colonoscopy Value Set (HCPCS)\"]\r\n    union [DiagnosticReport: \"Colonoscopy Value Set (ICD9)\"]\r\n\r\ndefine \"Is Colonoscopy In Last Ten Years\":\r\n  exists ( \"Colonoscopy Reports\" DiagRep\r\n      where DiagRep.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(DiagRep.effective)overlaps day of \"Lookback Interval Nine More Years\"\r\n  )\r\n\r\ndefine \"Is CT Colonography In Last Five Years\":\r\n  exists ( [DiagnosticReport: \"CT Colonography Value Set\"] DiagRep\r\n      where DiagRep.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(DiagRep.effective)overlaps day of \"Lookback Interval Four More Years\"\r\n  )\r\n\r\ndefine \"FIT-DNA Observations\":\r\n  [Observation: \"FIT-DNA Value Set (CPT)\"]\r\n    union [Observation: \"FIT-DNA Value Set (HCPCS)\"]\r\n    union [Observation: \"FIT-DNA Value Set (LOINC)\"]\r\n\r\ndefine \"Is FIT-DNA Test In Last Three Years\":\r\n  exists ( \"FIT-DNA Observations\" Obs\r\n      where Obs.status.value in { 'final', 'amended' }\r\n        and Obs.effective.value in day of \"Lookback Interval Two More Years\"\r\n  )\r\n\r\ndefine \"Denominator Exclusion\":\r\n  \"Is Colorectal Cancer\"\r\n    or \"Is Total Colectomy\"\r\n\r\ndefine \"Colorectal Cancer Conditions\":\r\n  [Condition: \"Colorectal Cancer Value Set (ICD10)\"]\r\n    union [Condition: \"Colorectal Cancer Value Set (ICD9)\"]\r\n\r\ndefine \"Is Colorectal Cancer\":\r\n  exists ( \"Colorectal Cancer Conditions\" Cond\r\n      where Cond.verificationStatus.value = 'confirmed'\r\n        and Cond.assertedDate.value before day of \r\n        end of \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Total Colectomy Procedures\":\r\n  [Procedure: \"Total Colectomy Value Set (CPT)\"]\r\n    union [Procedure: \"Total Colectomy Value Set (ICD10)\"]\r\n    union [Procedure: \"Total Colectomy Value Set (ICD9)\"]\r\n\r\ndefine \"Is Total Colectomy\":\r\n  exists ( \"Total Colectomy Procedures\" Proc\r\n      where Proc.status.value = 'completed'\r\n        and \r\n        end of PeriodToIntervalOfDT(Proc.performed)before day of \r\n        end of \"Measurement Period\"\r\n  )\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n\r\ndefine function CodingToCode(coding FHIR.Coding):\r\n  System.Code { code: coding.code.value, system: coding.system.value, version: coding.version.value, display: coding.display.value }\n\t// From FHIRHelpers\r\n\r\ndefine function \"ToDate\"(Value DateTime):\r\n  DateTime(year from Value, month from Value, day from Value, 0, 0, 0, 0, timezone from Value)\r\n\r\ndefine function CalendarAgeInYearsAt(BirthDateTime DateTime, AsOf DateTime):\r\n  years between ToDate(BirthDateTime)and ToDate(AsOf)\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "version": "1.0.1",
        "name": "COL_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-common-logic"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-participation-logic"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.43"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1108.15"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1093.41"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1093.42"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1093.43"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1102.38"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1102.39"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1102.40"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1064.29"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1064.30"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1064.31"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1421.34"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1420.35"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1420.36"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1420.37"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1065.32"
              }
            ]
          },
          {
            "type": "Condition",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1065.33"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1250.44"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1250.45"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1250.46"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-col-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-common-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-common-logic/_history/2</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span>http://ncqa.org/hedis/identifiers</span><br/><b>value: </b><span>L-CMN</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">3.10.000</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">NCQA Common Library (FHIR Version)</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr><th scope=\"row\"><b>Description: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">This library contains common expressions and terminology declarations used throughout the HEDIS measures.</td></tr><tr><th scope=\"row\"><b>Purpose: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">This library provides a mechanism to share common definitions used by multiple HEDIS measures.</td></tr><tr><th scope=\"row\"><b>Usage: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">This library should be used whenever common notions such as inpatient encounters, hospice determination, or participation are required within a measure definition.</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Contributor: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b><span>author</span>: </b><span>National Committee for Quality Assurance</span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"5\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.43</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113883.3.666.5.307</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Task</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113883.3.666.5.307</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Task</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1108.15</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library NCQA_Common_FHIR version '3.10.000'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\r\n\r\ncodesystem \"LOINC\": 'urn:oid:2.16.840.1.113883.6.1'\r\ncodesystem \"SNOMEDCT\": 'urn:oid:2.16.840.1.113883.6.96'\r\ncodesystem \"SNOMEDCT:2015-09\": 'urn:oid:2.16.840.1.113883.6.96' version 'urn:hl7:version:2015-09'\r\ncodesystem \"SNOMEDCT:2016-03\": 'urn:oid:2.16.840.1.113883.6.96' version 'urn:hl7:version:2016-03'\r\n\r\nvalueset \"Encounter Inpatient\": 'urn:oid:2.16.840.1.113883.3.666.5.307'\r\nvalueset \"Hospice care ambulatory\": 'urn:oid:2.16.840.1.113762.1.4.1108.15'\r\nvalueset \"Care Services in Long-Term Residential Facility\": 'urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014'\r\nvalueset \"X Institutional SNP Value Set\": 'urn:oid:2.16.840.1.113762.1.4.1165.43'\r\nvalueset \"Commercial\": 'urn:oid:2.16.840.1.113762.1.4.1165.46'\r\nvalueset \"Medicaid\": 'urn:oid:2.16.840.1.113762.1.4.1165.45'\r\nvalueset \"Medicare\": 'urn:oid:2.16.840.1.113762.1.4.1165.44'\r\nvalueset \"NCQA Payer\": 'urn:oid:2.16.840.1.113762.1.4.1165.42'\r\n\r\ncode \"Birthdate\": '21112-8' from \"LOINC\" display 'Birthdate'\r\ncode \"Dead\": '419099009' from \"SNOMEDCT\" display 'Dead'\r\ncode \"Discharge to healthcare facility for hospice care (procedure)\": '428371000124100' from \"SNOMEDCT:2015-09\" display 'Discharge to healthcare facility for hospice care (procedure)'\r\ncode \"Discharge to home for hospice care (procedure)\": '428361000124107' from \"SNOMEDCT:2015-09\" display 'Discharge to home for hospice care (procedure)'\r\ncode \"Long term care hospital (environment)\": '32074000' from \"SNOMEDCT:2016-03\" display 'Long term care hospital (environment)'\r\ncode \"Patient transfer, to another health care facility (procedure)\": '19712007' from \"SNOMEDCT:2016-03\" display 'Patient transfer, to another health care facility (procedure)'\r\ncode \"Referral to long term care service (procedure)\": '417708006' from \"SNOMEDCT:2016-03\" display 'Referral to long term care service (procedure)'\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\r\n\r\ncontext Patient\r\n\r\ndefine \"Is Enrolled in Institutional SNP\":\r\n  exists ( [\"Encounter\": \"X Institutional SNP Value Set\"] SNP\r\n      where SNP.status in { 'in-progress', 'finished' }\r\n        and SNP.period overlaps \"Measurement Period\"\r\n  )\r\n\r\ndefine \"Is Living Long Term in Institution\":\r\n  exists ( [\"Encounter\": \"Encounter Inpatient\"] DischargeLongTerm\r\n      where DischargeLongTerm.status in { 'in-progress', 'finished' }\r\n        and ( FHIRHelpers.ToConcept(DischargeLongTerm.hospitalization.dischargeDisposition)~ \"Patient transfer, to another health care facility (procedure)\"\r\n            or FHIRHelpers.ToConcept(DischargeLongTerm.hospitalization.dischargeDisposition)~ \"Referral to long term care service (procedure)\"\r\n        )\r\n        and DischargeLongTerm.period ends during \"Measurement Period\"\r\n  )\n    // TODO: Consider whether this should be Procedure or Task? (See http://build.fhir.org/ig/cqframework/qi-core/Intervention.html#Intervention)\r\n    or exists ( [\"Task\": \"Care Services in Long-Term Residential Facility\"] LongTermOrder\r\n        where LongTermOrder.intent = 'order'\r\n          and ( LongTermOrder.authoredOn during \"Measurement Period\"\r\n              or LongTermOrder.executionPeriod overlaps \"Measurement Period\"\r\n          )\r\n    )\n    // TODO: For the mapping to task, both Order and Performed map to a Task with intent of order, the fact that\n    // the task is performed seems to be best captured by the presence of an executionPeriod... This would be\n    // worth some discussion with the Workflow Group on the intended representation here\n    //or exists ( [\"Task\": \"Care Services in Long-Term Residential Facility\"] LongTermPerformed\n    //    where LongTermPerformed.\n    //    LongTermPerformed.relevantPeriod overlaps \"Measurement Period\"\n    //)\n\n/*This is the standard NCQA Hospice exclusion logic from 3.6.2018*/\r\n\r\ndefine \"Has Hospice\":\r\n  exists ( [\"Encounter\": \"Encounter Inpatient\"] DischargeHospice\r\n      where DischargeHospice.status in { 'in-progress', 'finished' }\r\n        and ( FHIRHelpers.ToConcept(DischargeHospice.hospitalization.dischargeDisposition)~ \"Discharge to home for hospice care (procedure)\"\r\n            or FHIRHelpers.ToConcept(DischargeHospice.hospitalization.dischargeDisposition)~ \"Discharge to healthcare facility for hospice care (procedure)\"\r\n        )\r\n        and DischargeHospice.period ends during \"Measurement Period\"\r\n  )\r\n    or exists ( [\"Task\": \"Hospice care ambulatory\"] HospiceTask\r\n        where HospiceTask.intent = 'order'\r\n          and ( HospiceTask.authoredOn during \"Measurement Period\"\r\n              or HospiceTask.executionPeriod overlaps \"Measurement Period\"\r\n          )\r\n    )\n    // TODO: See discussion in \"Is Living Long Term in Institution\"\n    //or exists ( [\"Intervention, Order\": \"Hospice care ambulatory\"] HospiceOrder\n    //    where HospiceOrder.authorDatetime during \"Measurement Period\"\n    //)\n    //or exists ( [\"Intervention, Performed\": \"Hospice care ambulatory\"] HospicePerformed\n    //    where HospicePerformed.relevantPeriod overlaps \"Measurement Period\"\n    //)\n\n/*ToDate takes a given DateTime value and returns a DateTime with the time components \"zeroed\", and the timezone of the input value, for example */\r\n\r\ndefine function \"ToDate\"(Value DateTime):\r\n  DateTime(year from Value, month from Value, day from Value, 0, 0, 0, 0, timezone from Value)\n\n/*CalendarAgeInDaysAt calculates the calendar age (meaning the age without considering time components) in days*/\r\n\r\ndefine function \"CalendarAgeInDaysAt\"(BirthDateTime DateTime, AsOf DateTime):\r\n  days between ToDate(BirthDateTime)and ToDate(AsOf)\n\n/*CalendarAgeInDays calculates the calendar age (meaning the age without considering time components) in days as of today*/\r\n\r\ndefine function \"CalendarAgeInDays\"(BirthDateTime DateTime):\r\n  CalendarAgeInDaysAt(BirthDateTime, Today())\n\n/*CalendarAgeInMonthsAt calculates the calendar age (meaning the age without considering time components) in months*/\r\n\r\ndefine function \"CalendarAgeInMonthsAt\"(BirthDateTime DateTime, AsOf DateTime):\r\n  months between ToDate(BirthDateTime)and ToDate(AsOf)\r\n\r\ndefine function \"CalendarAgeInMonths\"(BirthDateTime DateTime):\r\n  CalendarAgeInMonthsAt(BirthDateTime, Today())\n\n/*calculates the difference in calendar days between the start and end of the given interval*/\r\n\r\ndefine function \"LengthInDays\"(Value Interval&lt;DateTime&gt;):\r\n  difference in days between start of Value and \r\n  end of Value\n\n/*CalendarAgeInYearsAt calculates the calendar age (meaning the age without considering time components) in years*/\r\n\r\ndefine function \"CalendarAgeInYearsAt\"(BirthDateTime DateTime, AsOf DateTime):\r\n  years between ToDate(BirthDateTime)and ToDate(AsOf)\n\n/*CalendarAgeInYears calculates the calendar age (meaning the age without considering time components) in years as of today */\r\n\r\ndefine function \"CalendarAgeInYears\"(BirthDateTime DateTime):\r\n  CalendarAgeInYearsAt(BirthDateTime, Today())\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-common-logic",
        "identifier": [
          {
            "system": "http://ncqa.org/hedis/identifiers",
            "value": "Library_CMN"
          }
        ],
        "version": "3.10.000",
        "name": "NCQACommon_FHIR",
        "title": "NCQA Common Library (FHIR Version)",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2018-08-01",
        "publisher": "National Committee for Quality Assurance",
        "description": "This library contains common expressions and terminology declarations used throughout the HEDIS measures.",
        "purpose": "This library provides a mechanism to share common definitions used by multiple HEDIS measures.",
        "usage": "This library should be used whenever common notions such as inpatient encounters, hospice determination, or participation are required within a measure definition.",
        "approvalDate": "2018-08-14",
        "lastReviewDate": "2018-08-14",
        "effectivePeriod": {
          "start": "2018-01-01",
          "end": "2018-12-31"
        },
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America (the)"
              }
            ],
            "text": "United States of America (the)"
          }
        ],
        "contributor": [
          {
            "type": "author",
            "name": "National Committee for Quality Assurance"
          }
        ],
        "contact": [
          {
            "telecom": [
              {
                "system": "url",
                "value": "http://ncqa.org"
              }
            ]
          }
        ],
        "copyright": "HEDIS® is a registered trademark of the National Committee for Quality Assurance (NCQA). The HEDIS measures and specifications were developed by and are owned by the National Committee for Quality Assurance (“NCQA”). NCQA holds a copyright in the HEDIS measures and specifications and may rescind or alter these measures and specifications at any time. Users of the HEDIS measures and specifications shall not have the right to alter, enhance or otherwise modify the HEDIS measures and specifications, and shall not disassemble, recompile or reverse engineer the HEDIS measures and specifications. Anyone desiring to use or reproduce the materials without modification for a non-commercial purpose may do so without obtaining any approval from NCQA. All commercial uses or requests for alteration of the HEDIS measures and specifications must be approved by NCQA and are subject to a license at the discretion of NCQA.\r\n\r\nHEDIS measures and specifications are not clinical guidelines, do not establish a standard of medical care and have not been tested for all potential applications. The measures and specifications are provided “as is” without warranty of any kind. NCQA makes no representations, warranties or endorsements about the quality of any product, test or protocol identified as numerator compliant or otherwise identified as meeting the requirements of a HEDIS measure or specification. NCQA also makes no representations, warranties or endorsements about the quality of any organization or clinician who uses or reports performance measures. NCQA has no liability to anyone who relies on HEDIS measures and specifications or data reflective of performance under such measures and specifications.\r\n\r\nNo measure rate resulting from calculations based on the HEDIS specifications may be called a HEDIS rate until it is audited and approved by an NCQA-certified HEDIS auditor. Until NCQA has approved a validation process and validates a calculated measure rate, users must prominently display a disclaimer near each uncertified calculated rate. Henceforth in this publication and in any other NCQA publication, “HEDIS measure” refers to the specifications and “HEDIS data” refers to and assumes data audited by an NCQA-certified auditor.\r\n\r\nLimited proprietary coding is contained in the measure specifications for convenience. Users of the proprietary code sets should obtain all necessary licenses from the owners of these code sets. NCQA disclaims all liability for use or accuracy of any coding contained in the specifications.\r\n\r\nThe American Medical Association holds a copyright to the CPT® codes contained in the measures specifications.\r\n\r\nSome measure specifications contain coding from LOINC® ([http://loinc.org](http://loinc.org)). The LOINC table, LOINC codes, LOINC panels and form file, LOINC linguistic variants file, LOINC/RSNA Radiology Playbook, and LOINC/IEEE Medical Device Code Mapping Table are copyright © 1995–2017, Regenstrief Institute, Inc. and the Logical Observation Identifiers Names and Codes (LOINC) Committee and is available at no cost under the license at [http://loinc.org/terms-of-use](http://loinc.org/terms-of-use).\r\n\r\nNo part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopy, recording or any information storage and retrieval system, without the written permission of NCQA.\r\n\r\n© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.43"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1108.15"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-common-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-dms-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-dms-logic/_history/6</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"10\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1347</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1351</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1044</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1355</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1352</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1356</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1347</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1351</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nUtilization of the PHQ-9 to Monitor Depression Symptoms for Adolescents and Adults (DMS)\n*/library DMS_FHIR version '1.0.0'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nMeasure Description\nThe percentage of members 12 years of age and older with a diagnosis of major\ndepression or dysthymia, who had an outpatient encounter with a PHQ-9 score\npresent in their record in the same assessment period as the encounter.\n*/\r\n\r\ncodesystem \"LOINC\": 'http://loinc.org'\r\ncodesystem \"SNOMED\": 'http://snomed.info/sct'\r\ncodesystem \"CQFramework\": 'http://cqframework.info/codesystem/placeholder'\n\n// valueset \"Bipolar Disorder\": 'urn:oid:2.16.840.1.113883.3.67.1.101.1.128' // Grouping Value Set\n// valueset \"Personality Disorder\": 'urn:oid:2.16.840.1.113883.3.67.1.101.1.246' // Grouping Value Set\n// valueset \"Psychotic Disorder\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1153' // User Defined QDM Value Set\n// valueset \"Pervasive Developmental Disorder\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1152' // User Defined QDM Value Set\n// valueset \"Interactive Outpatient Encounter\": 'urn:oid:2.16.840.1.113883.3.464.1003.101.12.1074' // Grouping Value Set\n// valueset \"PHQ-9 Modified Score\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1154' // User Defined QDM Value Set\n// valueset \"PHQ-9 Tool\": 'urn:oid:2.16.840.1.113883.3.67.1.101.11.723' // Grouping Value Set\n\n// update\r\n\r\nvalueset \"Bipolar Disorder\": '2.16.840.1.113883.3.464.1004.1044'\r\nvalueset \"Bipolar Disorder ECDS\": '2.16.840.1.113883.3.464.1004.1346'\n// valueset \"Hospice\": '2.16.840.1.113883.3.464.1004.1418'\r\nvalueset \"Interactive Outpatient Encounter\": '2.16.840.1.113883.3.464.1004.1347'\r\nvalueset \"Major Depression and Dysthymia\": '2.16.840.1.113883.3.464.1004.1351'\r\nvalueset \"Other Bipolar Disorder\": '2.16.840.1.113883.3.464.1004.1399'\r\nvalueset \"Personality Disorder\": '2.16.840.1.113883.3.464.1004.1355'\r\nvalueset \"Pervasive Developmental Disorder\": '2.16.840.1.113883.3.464.1004.1356'\r\nvalueset \"PHQ-9 Total Score\": '2.16.840.1.113883.3.464.1004.1401'\r\nvalueset \"Psychotic Disorder\": '2.16.840.1.113883.3.464.1004.1352'\n\n// code \"Major Depression and Dysthymia\": '78667006' from \"SNOMED\"\r\n\r\ncode \"PHQ-9 Modified Score\": '00009' from \"CQFramework\"\r\ncode \"PHQ-9 Tool\": '44249-1' from \"LOINC\"\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n\n/*\nThe measurement period is segmented to establish regular utilization of the PHQ\nassessment tool in the management of depression. The first qualifying encounter\nin each period determines the denominator events for the performance measure.\nThe measurement period is divided into three assessment periods with specific dates of service:\n\t\" Assessment Period One. January 1April 30 of the measurement period.\n\t\" Assessment Period Two. May 1August 31 of the measurement period.\n\t\" Assessment Period Three. September 1December 31 of the measurement period.\n*/\r\n\r\ndefine \"Assessment Period One\":\r\n  Interval[start of \"Measurement Period\", \r\n  end of \"Measurement Period\" - 8 months )\r\n\r\ndefine \"Assessment Period Two\":\r\n  Interval[start of \"Measurement Period\" + 4 months, \r\n  end of \"Measurement Period\" - 4 months )\r\n\r\ndefine \"Assessment Period Three\":\r\n  Interval[start of \"Measurement Period\" + 8 months, \r\n  end of \"Measurement Period\" )\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\n\n// NOTE: The initial population is described as \"members\", but the measure is encounter-based...\r\n\r\ndefine \"Initial Population\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 12\r\n    and exists ( [Encounter: \"Interactive Outpatient Encounter\"] E\r\n        where E.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\r\n          and PeriodToIntervalOfDT(E.period)during day of \"Measurement Period\"\r\n    )\r\n    and exists ( [DiagnosticReport: \"Major Depression and Dysthymia\"] D\r\n        where D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n          and PeriodToIntervalOfDT(D.effective)overlaps day of \"Measurement Period\"\r\n    )\n\n/*\nExclusions\n*/\r\n\r\ndefine \"Denominator Exclusion\":\r\n  exists ( distinct ( [DiagnosticReport: \"Bipolar Disorder\"]\n\t\t\t\t\t// TODO: The spec mentions 3 Bipolar valuesets, which are like\n\t\t\t\t\t// the ones in DSF, but it only gives OIDs for one of the 3\n\t\t\t\t\t// and that OID is different than any in DSF.\n\t\t\t\t\t// Note that DMS and DRR are in the same boat.\r\n      union [DiagnosticReport: \"Personality Disorder\"]\r\n      union [DiagnosticReport: \"Psychotic Disorder\"]\r\n      union [DiagnosticReport: \"Pervasive Developmental Disorder\"] ) D\r\n      where D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(D.effective)overlaps day of \"Measurement Period\"\r\n  )\n\n/*\nDenominators and Numerators\n*/\r\n\r\ndefine \"Denominator 1\":\r\n  exists ( First(\"Depression Encounters\" E\r\n        where PeriodToIntervalOfDT(E.period)during day of \"Assessment Period One\"\r\n        sort by start of PeriodToIntervalOfDT(period)\r\n    )\r\n  )\r\n\r\ndefine \"Denominator 2\":\r\n  exists ( First(\"Depression Encounters\" E\r\n        where PeriodToIntervalOfDT(E.period)during day of \"Assessment Period Two\"\r\n        sort by start of PeriodToIntervalOfDT(period)\r\n    )\r\n  )\r\n\r\ndefine \"Denominator 3\":\r\n  exists ( First(\"Depression Encounters\" E\r\n        where PeriodToIntervalOfDT(E.period)during day of \"Assessment Period Three\"\r\n        sort by start of PeriodToIntervalOfDT(period)\r\n    )\r\n  )\r\n\r\ndefine \"Depression Encounters\":\r\n  [Encounter: \"Interactive Outpatient Encounter\"] E\r\n    with [DiagnosticReport: \"Major Depression and Dysthymia\"] D\r\n      such that E.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\r\n        and D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(D.effective)overlaps day of PeriodToIntervalOfDT(E.period)\r\n    return E\r\n\r\ndefine \"PHQ-9 Score\":\r\n  distinct ( [Observation: \"PHQ-9 Tool\"]\r\n    union [Observation: \"PHQ-9 Modified Score\"] ) A\r\n    where A.status.value in { 'final', 'amended' }\r\n      and A.value is not null\r\n\r\ndefine \"Numerator 1\":\r\n  exists ( \"PHQ-9 Score\" A\r\n      where A.effective.value in day of \"Assessment Period One\"\r\n  )\r\n\r\ndefine \"Numerator 2\":\r\n  exists ( \"PHQ-9 Score\" A\r\n      where A.effective.value in day of \"Assessment Period Two\"\r\n  )\r\n\r\ndefine \"Numerator 3\":\r\n  exists ( \"PHQ-9 Score\" A\r\n      where A.effective.value in day of \"Assessment Period Three\"\r\n  )\n\n/*\nStratifiers\n*/\r\n\r\ndefine \"Stratifier 1\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[12, 17]\r\n\r\ndefine \"Stratifier 2\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[18, 44]\r\n\r\ndefine \"Stratifier 3\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[45, 64]\r\n\r\ndefine \"Stratifier 4\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "version": "1.0.0",
        "name": "DMS_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1347"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1351"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1044"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1355"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1352"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1356"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1347"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1351"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxsaWJyYXJ5IHhtbG5zPSJ1cm46aGw3LW9yZzplbG06cjEiIHhtbG5zOnQ9InVybjpobDctb3JnOmVsbS10eXBlczpyMSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6Zmhpcj0iaHR0cDovL2hsNy5vcmcvZmhpciIgeG1sbnM6cWRtNDM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY0XzMiIHhtbG5zOnFkbTUzPSJ1cm46aGVhbHRoaXQtZ292OnFkbTp2NV8zIiB4bWxuczphPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiPg0KICAgPGFubm90YXRpb24gc3RhcnRMaW5lPSI5MCIgc3RhcnRDaGFyPSI0IiBlbmRMaW5lPSI5MCIgZW5kQ2hhcj0iNTAiIG1lc3NhZ2U9IkNvdWxkIG5vdCByZXNvbHZlIG1lbWJlcnNoaXAgb3BlcmF0b3IgZm9yIHRlcm1pbm9sb2d5IHRhcmdldCBvZiB0aGUgcmV0cmlldmUuIiBlcnJvclR5cGU9InNlbWFudGljIiBlcnJvclNldmVyaXR5PSJ3YXJuaW5nIiB4c2k6dHlwZT0iYTpDcWxUb0VsbUVycm9yIi8+DQogICA8YW5ub3RhdGlvbiBzdGFydExpbmU9Ijk1IiBzdGFydENoYXI9IjQiIGVuZExpbmU9Ijk1IiBlbmRDaGFyPSI1NSIgbWVzc2FnZT0iQ291bGQgbm90IHJlc29sdmUgbWVtYmVyc2hpcCBvcGVyYXRvciBmb3IgdGVybWlub2xvZ3kgdGFyZ2V0IG9mIHRoZSByZXRyaWV2ZS4iIGVycm9yVHlwZT0ic2VtYW50aWMiIGVycm9yU2V2ZXJpdHk9Indhcm5pbmciIHhzaTp0eXBlPSJhOkNxbFRvRWxtRXJyb3IiLz4NCiAgIDxhbm5vdGF0aW9uIHN0YXJ0TGluZT0iMTA3IiBzdGFydENoYXI9IjQiIGVuZExpbmU9IjEwNyIgZW5kQ2hhcj0iNDEiIG1lc3NhZ2U9IkNvdWxkIG5vdCByZXNvbHZlIG1lbWJlcnNoaXAgb3BlcmF0b3IgZm9yIHRlcm1pbm9sb2d5IHRhcmdldCBvZiB0aGUgcmV0cmlldmUuIiBlcnJvclR5cGU9InNlbWFudGljIiBlcnJvclNldmVyaXR5PSJ3YXJuaW5nIiB4c2k6dHlwZT0iYTpDcWxUb0VsbUVycm9yIi8+DQogICA8YW5ub3RhdGlvbiBzdGFydExpbmU9IjExMiIgc3RhcnRDaGFyPSIxMSIgZW5kTGluZT0iMTEyIiBlbmRDaGFyPSI1MiIgbWVzc2FnZT0iQ291bGQgbm90IHJlc29sdmUgbWVtYmVyc2hpcCBvcGVyYXRvciBmb3IgdGVybWlub2xvZ3kgdGFyZ2V0IG9mIHRoZSByZXRyaWV2ZS4iIGVycm9yVHlwZT0ic2VtYW50aWMiIGVycm9yU2V2ZXJpdHk9Indhcm5pbmciIHhzaTp0eXBlPSJhOkNxbFRvRWxtRXJyb3IiLz4NCiAgIDxhbm5vdGF0aW9uIHN0YXJ0TGluZT0iMTEzIiBzdGFydENoYXI9IjExIiBlbmRMaW5lPSIxMTMiIGVuZENoYXI9IjUwIiBtZXNzYWdlPSJDb3VsZCBub3QgcmVzb2x2ZSBtZW1iZXJzaGlwIG9wZXJhdG9yIGZvciB0ZXJtaW5vbG9neSB0YXJnZXQgb2YgdGhlIHJldHJpZXZlLiIgZXJyb3JUeXBlPSJzZW1hbnRpYyIgZXJyb3JTZXZlcml0eT0id2FybmluZyIgeHNpOnR5cGU9ImE6Q3FsVG9FbG1FcnJvciIvPg0KICAgPGFubm90YXRpb24gc3RhcnRMaW5lPSIxMTQiIHN0YXJ0Q2hhcj0iMTEiIGVuZExpbmU9IjExNCIgZW5kQ2hhcj0iNjQiIG1lc3NhZ2U9IkNvdWxkIG5vdCByZXNvbHZlIG1lbWJlcnNoaXAgb3BlcmF0b3IgZm9yIHRlcm1pbm9sb2d5IHRhcmdldCBvZiB0aGUgcmV0cmlldmUuIiBlcnJvclR5cGU9InNlbWFudGljIiBlcnJvclNldmVyaXR5PSJ3YXJuaW5nIiB4c2k6dHlwZT0iYTpDcWxUb0VsbUVycm9yIi8+DQogICA8YW5ub3RhdGlvbiBzdGFydExpbmU9IjE0OSIgc3RhcnRDaGFyPSIyIiBlbmRMaW5lPSIxNDkiIGVuZENoYXI9IjQ4IiBtZXNzYWdlPSJDb3VsZCBub3QgcmVzb2x2ZSBtZW1iZXJzaGlwIG9wZXJhdG9yIGZvciB0ZXJtaW5vbG9neSB0YXJnZXQgb2YgdGhlIHJldHJpZXZlLiIgZXJyb3JUeXBlPSJzZW1hbnRpYyIgZXJyb3JTZXZlcml0eT0id2FybmluZyIgeHNpOnR5cGU9ImE6Q3FsVG9FbG1FcnJvciIvPg0KICAgPGFubm90YXRpb24gc3RhcnRMaW5lPSIxNTAiIHN0YXJ0Q2hhcj0iOCIgZW5kTGluZT0iMTUwIiBlbmRDaGFyPSI1OSIgbWVzc2FnZT0iQ291bGQgbm90IHJlc29sdmUgbWVtYmVyc2hpcCBvcGVyYXRvciBmb3IgdGVybWlub2xvZ3kgdGFyZ2V0IG9mIHRoZSByZXRyaWV2ZS4iIGVycm9yVHlwZT0ic2VtYW50aWMiIGVycm9yU2V2ZXJpdHk9Indhcm5pbmciIHhzaTp0eXBlPSJhOkNxbFRvRWxtRXJyb3IiLz4NCiAgIDxpZGVudGlmaWVyIGlkPSJETVNfRkhJUiIgdmVyc2lvbj0iMS4wLjAiLz4NCiAgIDxzY2hlbWFJZGVudGlmaWVyIGlkPSJ1cm46aGw3LW9yZzplbG0iIHZlcnNpb249InIxIi8+DQogICA8dXNpbmdzPg0KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IlN5c3RlbSIgdXJpPSJ1cm46aGw3LW9yZzplbG0tdHlwZXM6cjEiLz4NCiAgICAgIDxkZWYgbG9jYWxJZGVudGlmaWVyPSJGSElSIiB1cmk9Imh0dHA6Ly9obDcub3JnL2ZoaXIiIHZlcnNpb249IjMuMC4wIi8+DQogICA8L3VzaW5ncz4NCiAgIDxwYXJhbWV0ZXJzPg0KICAgICAgPGRlZiBuYW1lPSJNZWFzdXJlbWVudCBQZXJpb2QiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPHBhcmFtZXRlclR5cGVTcGVjaWZpZXIgeHNpOnR5cGU9IkludGVydmFsVHlwZVNwZWNpZmllciI+DQogICAgICAgICAgICA8cG9pbnRUeXBlIG5hbWU9InQ6RGF0ZVRpbWUiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4NCiAgICAgICAgIDwvcGFyYW1ldGVyVHlwZVNwZWNpZmllcj4NCiAgICAgIDwvZGVmPg0KICAgPC9wYXJhbWV0ZXJzPg0KICAgPGNvZGVTeXN0ZW1zPg0KICAgICAgPGRlZiBuYW1lPSJMT0lOQyIgaWQ9Imh0dHA6Ly9sb2luYy5vcmciIGFjY2Vzc0xldmVsPSJQdWJsaWMiLz4NCiAgICAgIDxkZWYgbmFtZT0iU05PTUVEIiBpZD0iaHR0cDovL3Nub21lZC5pbmZvL3NjdCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJDUUZyYW1ld29yayIgaWQ9Imh0dHA6Ly9jcWZyYW1ld29yay5pbmZvL2NvZGVzeXN0ZW0vcGxhY2Vob2xkZXIiIGFjY2Vzc0xldmVsPSJQdWJsaWMiLz4NCiAgIDwvY29kZVN5c3RlbXM+DQogICA8dmFsdWVTZXRzPg0KICAgICAgPGRlZiBuYW1lPSJCaXBvbGFyIERpc29yZGVyIiBpZD0iMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMDQ0IiBhY2Nlc3NMZXZlbD0iUHVibGljIi8+DQogICAgICA8ZGVmIG5hbWU9IkJpcG9sYXIgRGlzb3JkZXIgRUNEUyIgaWQ9IjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM0NiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJJbnRlcmFjdGl2ZSBPdXRwYXRpZW50IEVuY291bnRlciIgaWQ9IjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM0NyIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJNYWpvciBEZXByZXNzaW9uIGFuZCBEeXN0aHltaWEiIGlkPSIyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzNTEiIGFjY2Vzc0xldmVsPSJQdWJsaWMiLz4NCiAgICAgIDxkZWYgbmFtZT0iT3RoZXIgQmlwb2xhciBEaXNvcmRlciIgaWQ9IjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM5OSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJQZXJzb25hbGl0eSBEaXNvcmRlciIgaWQ9IjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM1NSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJQZXJ2YXNpdmUgRGV2ZWxvcG1lbnRhbCBEaXNvcmRlciIgaWQ9IjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM1NiIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJQSFEtOSBUb3RhbCBTY29yZSIgaWQ9IjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTQwMSIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgICAgPGRlZiBuYW1lPSJQc3ljaG90aWMgRGlzb3JkZXIiIGlkPSIyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzNTIiIGFjY2Vzc0xldmVsPSJQdWJsaWMiLz4NCiAgIDwvdmFsdWVTZXRzPg0KICAgPGNvZGVzPg0KICAgICAgPGRlZiBuYW1lPSJQSFEtOSBNb2RpZmllZCBTY29yZSIgaWQ9IjAwMDA5IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxjb2RlU3lzdGVtIG5hbWU9IkNRRnJhbWV3b3JrIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iUEhRLTkgVG9vbCIgaWQ9IjQ0MjQ5LTEiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGNvZGVTeXN0ZW0gbmFtZT0iTE9JTkMiLz4NCiAgICAgIDwvZGVmPg0KICAgPC9jb2Rlcz4NCiAgIDxzdGF0ZW1lbnRzPg0KICAgICAgPGRlZiBuYW1lPSJBc3Nlc3NtZW50IFBlcmlvZCBPbmUiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24gbG93Q2xvc2VkPSJ0cnVlIiBoaWdoQ2xvc2VkPSJmYWxzZSIgeHNpOnR5cGU9IkludGVydmFsIj4NCiAgICAgICAgICAgIDxsb3cgeHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgPC9sb3c+DQogICAgICAgICAgICA8aGlnaCB4c2k6dHlwZT0iU3VidHJhY3QiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkVuZCI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJNZWFzdXJlbWVudCBQZXJpb2QiIHhzaTp0eXBlPSJQYXJhbWV0ZXJSZWYiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHZhbHVlPSI4IiB1bml0PSJtb250aHMiIHhzaTp0eXBlPSJRdWFudGl0eSIvPg0KICAgICAgICAgICAgPC9oaWdoPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IkFzc2Vzc21lbnQgUGVyaW9kIFR3byIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiBsb3dDbG9zZWQ9InRydWUiIGhpZ2hDbG9zZWQ9ImZhbHNlIiB4c2k6dHlwZT0iSW50ZXJ2YWwiPg0KICAgICAgICAgICAgPGxvdyB4c2k6dHlwZT0iQWRkIj4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJNZWFzdXJlbWVudCBQZXJpb2QiIHhzaTp0eXBlPSJQYXJhbWV0ZXJSZWYiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHZhbHVlPSI0IiB1bml0PSJtb250aHMiIHhzaTp0eXBlPSJRdWFudGl0eSIvPg0KICAgICAgICAgICAgPC9sb3c+DQogICAgICAgICAgICA8aGlnaCB4c2k6dHlwZT0iU3VidHJhY3QiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkVuZCI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJNZWFzdXJlbWVudCBQZXJpb2QiIHhzaTp0eXBlPSJQYXJhbWV0ZXJSZWYiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHZhbHVlPSI0IiB1bml0PSJtb250aHMiIHhzaTp0eXBlPSJRdWFudGl0eSIvPg0KICAgICAgICAgICAgPC9oaWdoPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IkFzc2Vzc21lbnQgUGVyaW9kIFRocmVlIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvd0Nsb3NlZD0idHJ1ZSIgaGlnaENsb3NlZD0iZmFsc2UiIHhzaTp0eXBlPSJJbnRlcnZhbCI+DQogICAgICAgICAgICA8bG93IHhzaTp0eXBlPSJBZGQiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgdmFsdWU9IjgiIHVuaXQ9Im1vbnRocyIgeHNpOnR5cGU9IlF1YW50aXR5Ii8+DQogICAgICAgICAgICA8L2xvdz4NCiAgICAgICAgICAgIDxoaWdoIHhzaTp0eXBlPSJFbmQiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iTWVhc3VyZW1lbnQgUGVyaW9kIiB4c2k6dHlwZT0iUGFyYW1ldGVyUmVmIi8+DQogICAgICAgICAgICA8L2hpZ2g+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iUGF0aWVudCIgY29udGV4dD0iUGF0aWVudCI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iU2luZ2xldG9uRnJvbSI+DQogICAgICAgICAgICA8b3BlcmFuZCBkYXRhVHlwZT0iZmhpcjpQYXRpZW50IiB4c2k6dHlwZT0iUmV0cmlldmUiLz4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJQZXJpb2RUb0ludGVydmFsT2ZEVCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIgeHNpOnR5cGU9IkZ1bmN0aW9uRGVmIj4NCiAgICAgICAgIDxleHByZXNzaW9uIGxvd0Nsb3NlZD0idHJ1ZSIgaGlnaENsb3NlZD0idHJ1ZSIgeHNpOnR5cGU9IkludGVydmFsIj4NCiAgICAgICAgICAgIDxsb3cgcGF0aD0idmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+DQogICAgICAgICAgICAgICA8c291cmNlIHBhdGg9InN0YXJ0IiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgPHNvdXJjZSBuYW1lPSJ2YWx1ZSIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgPC9sb3c+DQogICAgICAgICAgICA8aGlnaCBwYXRoPSJ2YWx1ZSIgeHNpOnR5cGU9IlByb3BlcnR5Ij4NCiAgICAgICAgICAgICAgIDxzb3VyY2UgcGF0aD0iZW5kIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgPHNvdXJjZSBuYW1lPSJ2YWx1ZSIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgPC9oaWdoPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgPG9wZXJhbmQgbmFtZT0idmFsdWUiPg0KICAgICAgICAgICAgPG9wZXJhbmRUeXBlU3BlY2lmaWVyIG5hbWU9ImZoaXI6UGVyaW9kIiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+DQogICAgICAgICA8L29wZXJhbmQ+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iSW5pdGlhbCBQb3B1bGF0aW9uIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJBbmQiPg0KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkFuZCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iR3JlYXRlck9yRXF1YWwiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJZZWFyIiB4c2k6dHlwZT0iQ2FsY3VsYXRlQWdlQXQiPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlRvRGF0ZVRpbWUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0iYmlydGhEYXRlLnZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBuYW1lPSJQYXRpZW50IiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSIxMiIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFeGlzdHMiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IkUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gZGF0YVR5cGU9ImZoaXI6RW5jb3VudGVyIiBjb2RlUHJvcGVydHk9InR5cGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iSW50ZXJhY3RpdmUgT3V0cGF0aWVudCBFbmNvdW50ZXIiIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2U+DQogICAgICAgICAgICAgICAgICAgICA8d2hlcmUgeHNpOnR5cGU9IkFuZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0idmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHBhdGg9InN0YXR1cyIgc2NvcGU9IkUiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9Ikxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9InBsYW5uZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iYXJyaXZlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJ0cmlhZ2VkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImluLXByb2dyZXNzIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9Im9ubGVhdmUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iZmluaXNoZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkluY2x1ZGVkSW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGVyaW9kVG9JbnRlcnZhbE9mRFQiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJwZXJpb2QiIHNjb3BlPSJFIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC93aGVyZT4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFeGlzdHMiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IkQiPg0KICAgICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gZGF0YVR5cGU9ImZoaXI6RGlhZ25vc3RpY1JlcG9ydCIgY29kZVByb3BlcnR5PSJjb2RlIiB4c2k6dHlwZT0iUmV0cmlldmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGVzIG5hbWU9Ik1ham9yIERlcHJlc3Npb24gYW5kIER5c3RoeW1pYSIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgICAgIDx3aGVyZSB4c2k6dHlwZT0iQW5kIj4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJ2YWx1ZSIgeHNpOnR5cGU9IlByb3BlcnR5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgcGF0aD0ic3RhdHVzIiBzY29wZT0iRCIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iTGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0icHJlbGltaW5hcnkiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iZmluYWwiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iYW1lbmRlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJjb3JyZWN0ZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iYXBwZW5kZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9Ik92ZXJsYXBzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZFRvSW50ZXJ2YWxPZkRUIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgYXNUeXBlPSJmaGlyOlBlcmlvZCIgeHNpOnR5cGU9IkFzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9ImVmZmVjdGl2ZSIgc2NvcGU9IkQiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iTWVhc3VyZW1lbnQgUGVyaW9kIiB4c2k6dHlwZT0iUGFyYW1ldGVyUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICA8L3doZXJlPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IkRlbm9taW5hdG9yIEV4Y2x1c2lvbiIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iRXhpc3RzIj4NCiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJEaXN0aW5jdCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iUXVlcnkiPg0KICAgICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iRCI+DQogICAgICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iVW5pb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlVuaW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOkRpYWdub3N0aWNSZXBvcnQiIGNvZGVQcm9wZXJ0eT0iY29kZSIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlcyBuYW1lPSJCaXBvbGFyIERpc29yZGVyIiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOkRpYWdub3N0aWNSZXBvcnQiIGNvZGVQcm9wZXJ0eT0iY29kZSIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlcyBuYW1lPSJQZXJzb25hbGl0eSBEaXNvcmRlciIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iVW5pb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgZGF0YVR5cGU9ImZoaXI6RGlhZ25vc3RpY1JlcG9ydCIgY29kZVByb3BlcnR5PSJjb2RlIiB4c2k6dHlwZT0iUmV0cmlldmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGVzIG5hbWU9IlBzeWNob3RpYyBEaXNvcmRlciIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBkYXRhVHlwZT0iZmhpcjpEaWFnbm9zdGljUmVwb3J0IiBjb2RlUHJvcGVydHk9ImNvZGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iUGVydmFzaXZlIERldmVsb3BtZW50YWwgRGlzb3JkZXIiIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgICAgICAgPC9zb3VyY2U+DQogICAgICAgICAgICAgICAgICA8d2hlcmUgeHNpOnR5cGU9IkFuZCI+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0idmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8c291cmNlIHBhdGg9InN0YXR1cyIgc2NvcGU9IkQiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9Ikxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9InByZWxpbWluYXJ5IiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImZpbmFsIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImFtZW5kZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iY29ycmVjdGVkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImFwcGVuZGVkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJPdmVybGFwcyI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQZXJpb2RUb0ludGVydmFsT2ZEVCIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGFzVHlwZT0iZmhpcjpQZXJpb2QiIHhzaTp0eXBlPSJBcyI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJlZmZlY3RpdmUiIHNjb3BlPSJEIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC93aGVyZT4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJEZXByZXNzaW9uIEVuY291bnRlcnMiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IkUiPg0KICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gZGF0YVR5cGU9ImZoaXI6RW5jb3VudGVyIiBjb2RlUHJvcGVydHk9InR5cGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iSW50ZXJhY3RpdmUgT3V0cGF0aWVudCBFbmNvdW50ZXIiIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgPC9zb3VyY2U+DQogICAgICAgICAgICA8cmVsYXRpb25zaGlwIGFsaWFzPSJEIiB4c2k6dHlwZT0iV2l0aCI+DQogICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBkYXRhVHlwZT0iZmhpcjpEaWFnbm9zdGljUmVwb3J0IiBjb2RlUHJvcGVydHk9ImNvZGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iTWFqb3IgRGVwcmVzc2lvbiBhbmQgRHlzdGh5bWlhIiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4NCiAgICAgICAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgICAgICAgICAgIDxzdWNoVGhhdCB4c2k6dHlwZT0iQW5kIj4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJBbmQiPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkluIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBwYXRoPSJzdGF0dXMiIHNjb3BlPSJFIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJMaXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJwbGFubmVkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImFycml2ZWQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0idHJpYWdlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJpbi1wcm9ncmVzcyIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJvbmxlYXZlIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImZpbmlzaGVkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkluIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBwYXRoPSJzdGF0dXMiIHNjb3BlPSJEIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJMaXN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJwcmVsaW1pbmFyeSIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJmaW5hbCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJhbWVuZGVkIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImNvcnJlY3RlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJhcHBlbmRlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHByZWNpc2lvbj0iRGF5IiB4c2k6dHlwZT0iT3ZlcmxhcHMiPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGVyaW9kVG9JbnRlcnZhbE9mRFQiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBhc1R5cGU9ImZoaXI6UGVyaW9kIiB4c2k6dHlwZT0iQXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0iZWZmZWN0aXZlIiBzY29wZT0iRCIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQZXJpb2RUb0ludGVydmFsT2ZEVCIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InBlcmlvZCIgc2NvcGU9IkUiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPC9zdWNoVGhhdD4NCiAgICAgICAgICAgIDwvcmVsYXRpb25zaGlwPg0KICAgICAgICAgICAgPHJldHVybj4NCiAgICAgICAgICAgICAgIDxleHByZXNzaW9uIG5hbWU9IkUiIHhzaTp0eXBlPSJBbGlhc1JlZiIvPg0KICAgICAgICAgICAgPC9yZXR1cm4+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iRGVub21pbmF0b3IgMSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iTm90Ij4NCiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJc051bGwiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkZpcnN0Ij4NCiAgICAgICAgICAgICAgICAgIDxzb3VyY2UgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IkUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gbmFtZT0iRGVwcmVzc2lvbiBFbmNvdW50ZXJzIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9zb3VyY2U+DQogICAgICAgICAgICAgICAgICAgICA8d2hlcmUgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJJbmNsdWRlZEluIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZFRvSW50ZXJ2YWxPZkRUIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0icGVyaW9kIiBzY29wZT0iRSIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJBc3Nlc3NtZW50IFBlcmlvZCBPbmUiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICA8L3doZXJlPg0KICAgICAgICAgICAgICAgICAgICAgPHNvcnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8YnkgZGlyZWN0aW9uPSJhc2MiIHhzaTp0eXBlPSJCeUV4cHJlc3Npb24iPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZFRvSW50ZXJ2YWxPZkRUIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0icGVyaW9kIiB4c2k6dHlwZT0iSWRlbnRpZmllclJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9ieT4NCiAgICAgICAgICAgICAgICAgICAgIDwvc29ydD4NCiAgICAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IkRlbm9taW5hdG9yIDIiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9Ik5vdCI+DQogICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSXNOdWxsIj4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJGaXJzdCI+DQogICAgICAgICAgICAgICAgICA8c291cmNlIHhzaTp0eXBlPSJRdWVyeSI+DQogICAgICAgICAgICAgICAgICAgICA8c291cmNlIGFsaWFzPSJFIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIG5hbWU9IkRlcHJlc3Npb24gRW5jb3VudGVycyIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgICAgICAgICAgPHdoZXJlIHByZWNpc2lvbj0iRGF5IiB4c2k6dHlwZT0iSW5jbHVkZWRJbiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQZXJpb2RUb0ludGVydmFsT2ZEVCIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InBlcmlvZCIgc2NvcGU9IkUiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iQXNzZXNzbWVudCBQZXJpb2QgVHdvIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC93aGVyZT4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3J0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ5IGRpcmVjdGlvbj0iYXNjIiB4c2k6dHlwZT0iQnlFeHByZXNzaW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQZXJpb2RUb0ludGVydmFsT2ZEVCIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9InBlcmlvZCIgeHNpOnR5cGU9IklkZW50aWZpZXJSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnk+DQogICAgICAgICAgICAgICAgICAgICA8L3NvcnQ+DQogICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJEZW5vbWluYXRvciAzIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJOb3QiPg0KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IklzTnVsbCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iRmlyc3QiPg0KICAgICAgICAgICAgICAgICAgPHNvdXJjZSB4c2k6dHlwZT0iUXVlcnkiPg0KICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iRSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBuYW1lPSJEZXByZXNzaW9uIEVuY291bnRlcnMiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgIDx3aGVyZSBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkluY2x1ZGVkSW4iPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGVyaW9kVG9JbnRlcnZhbE9mRFQiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJwZXJpb2QiIHNjb3BlPSJFIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IkFzc2Vzc21lbnQgUGVyaW9kIFRocmVlIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC93aGVyZT4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3J0Pg0KICAgICAgICAgICAgICAgICAgICAgICAgPGJ5IGRpcmVjdGlvbj0iYXNjIiB4c2k6dHlwZT0iQnlFeHByZXNzaW9uIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQZXJpb2RUb0ludGVydmFsT2ZEVCIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9InBlcmlvZCIgeHNpOnR5cGU9IklkZW50aWZpZXJSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnk+DQogICAgICAgICAgICAgICAgICAgICA8L3NvcnQ+DQogICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJQSFEtOSBTY29yZSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iRGlzdGluY3QiPg0KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IkEiPg0KICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IlVuaW9uIj4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOk9ic2VydmF0aW9uIiBjb2RlUHJvcGVydHk9ImNvZGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgeHNpOnR5cGU9IlRvTGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQSFEtOSBUb29sIiB4c2k6dHlwZT0iQ29kZVJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9jb2Rlcz4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOk9ic2VydmF0aW9uIiBjb2RlUHJvcGVydHk9ImNvZGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgeHNpOnR5cGU9IlRvTGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQSFEtOSBNb2RpZmllZCBTY29yZSIgeHNpOnR5cGU9IkNvZGVSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvY29kZXM+DQogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgIDx3aGVyZSB4c2k6dHlwZT0iQW5kIj4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbiI+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJ2YWx1ZSIgeHNpOnR5cGU9IlByb3BlcnR5Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgcGF0aD0ic3RhdHVzIiBzY29wZT0iQSIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+DQogICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iTGlzdCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iZmluYWwiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0iYW1lbmRlZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJOb3QiPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IklzTnVsbCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJ2YWx1ZSIgc2NvcGU9IkEiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPC93aGVyZT4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJOdW1lcmF0b3IgMSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iRXhpc3RzIj4NCiAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJRdWVyeSI+DQogICAgICAgICAgICAgICA8c291cmNlIGFsaWFzPSJBIj4NCiAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIG5hbWU9IlBIUS05IFNjb3JlIiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgPC9zb3VyY2U+DQogICAgICAgICAgICAgICA8d2hlcmUgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJJbiI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJ2YWx1ZSIgeHNpOnR5cGU9IlByb3BlcnR5Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgcGF0aD0iZWZmZWN0aXZlIiBzY29wZT0iQSIgeHNpOnR5cGU9IlByb3BlcnR5Ii8+DQogICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJBc3Nlc3NtZW50IFBlcmlvZCBPbmUiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICA8L3doZXJlPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9Ik51bWVyYXRvciAyIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJFeGlzdHMiPg0KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IkEiPg0KICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gbmFtZT0iUEhRLTkgU2NvcmUiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgIDx3aGVyZSBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkluIj4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9InZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBwYXRoPSJlZmZlY3RpdmUiIHNjb3BlPSJBIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IkFzc2Vzc21lbnQgUGVyaW9kIFR3byIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgIDwvd2hlcmU+DQogICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iTnVtZXJhdG9yIDMiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IkV4aXN0cyI+DQogICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iUXVlcnkiPg0KICAgICAgICAgICAgICAgPHNvdXJjZSBhbGlhcz0iQSI+DQogICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBuYW1lPSJQSFEtOSBTY29yZSIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgICAgPHdoZXJlIHByZWNpc2lvbj0iRGF5IiB4c2k6dHlwZT0iSW4iPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0idmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+DQogICAgICAgICAgICAgICAgICAgICA8c291cmNlIHBhdGg9ImVmZmVjdGl2ZSIgc2NvcGU9IkEiIHhzaTp0eXBlPSJQcm9wZXJ0eSIvPg0KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iQXNzZXNzbWVudCBQZXJpb2QgVGhyZWUiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICA8L3doZXJlPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IlN0cmF0aWZpZXIgMSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iSW4iPg0KICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJZZWFyIiB4c2k6dHlwZT0iQ2FsY3VsYXRlQWdlQXQiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlRvRGF0ZVRpbWUiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0iYmlydGhEYXRlLnZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBuYW1lPSJQYXRpZW50IiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPG9wZXJhbmQgbG93Q2xvc2VkPSJ0cnVlIiBoaWdoQ2xvc2VkPSJ0cnVlIiB4c2k6dHlwZT0iSW50ZXJ2YWwiPg0KICAgICAgICAgICAgICAgPGxvdyB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjEyIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgPGhpZ2ggdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSIxNyIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJTdHJhdGlmaWVyIDIiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IkluIj4NCiAgICAgICAgICAgIDxvcGVyYW5kIHByZWNpc2lvbj0iWWVhciIgeHNpOnR5cGU9IkNhbGN1bGF0ZUFnZUF0Ij4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJUb0RhdGVUaW1lIj4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHBhdGg9ImJpcnRoRGF0ZS52YWx1ZSIgeHNpOnR5cGU9IlByb3BlcnR5Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgbmFtZT0iUGF0aWVudCIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJNZWFzdXJlbWVudCBQZXJpb2QiIHhzaTp0eXBlPSJQYXJhbWV0ZXJSZWYiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDxvcGVyYW5kIGxvd0Nsb3NlZD0idHJ1ZSIgaGlnaENsb3NlZD0idHJ1ZSIgeHNpOnR5cGU9IkludGVydmFsIj4NCiAgICAgICAgICAgICAgIDxsb3cgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSIxOCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgIDxoaWdoIHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB2YWx1ZT0iNDQiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iU3RyYXRpZmllciAzIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJJbiI+DQogICAgICAgICAgICA8b3BlcmFuZCBwcmVjaXNpb249IlllYXIiIHhzaTp0eXBlPSJDYWxjdWxhdGVBZ2VBdCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iVG9EYXRlVGltZSI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJiaXJ0aERhdGUudmFsdWUiIHhzaTp0eXBlPSJQcm9wZXJ0eSI+DQogICAgICAgICAgICAgICAgICAgICA8c291cmNlIG5hbWU9IlBhdGllbnQiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iU3RhcnQiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iTWVhc3VyZW1lbnQgUGVyaW9kIiB4c2k6dHlwZT0iUGFyYW1ldGVyUmVmIi8+DQogICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICA8b3BlcmFuZCBsb3dDbG9zZWQ9InRydWUiIGhpZ2hDbG9zZWQ9InRydWUiIHhzaTp0eXBlPSJJbnRlcnZhbCI+DQogICAgICAgICAgICAgICA8bG93IHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB2YWx1ZT0iNDUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICA8aGlnaCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjY0IiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IlN0cmF0aWZpZXIgNCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iR3JlYXRlck9yRXF1YWwiPg0KICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJZZWFyIiB4c2k6dHlwZT0iQ2FsY3VsYXRlQWdlQXQiPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlRvRGF0ZVRpbWUiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcGF0aD0iYmlydGhEYXRlLnZhbHVlIiB4c2k6dHlwZT0iUHJvcGVydHkiPg0KICAgICAgICAgICAgICAgICAgICAgPHNvdXJjZSBuYW1lPSJQYXRpZW50IiB4c2k6dHlwZT0iRXhwcmVzc2lvblJlZiIvPg0KICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9Ik1lYXN1cmVtZW50IFBlcmlvZCIgeHNpOnR5cGU9IlBhcmFtZXRlclJlZiIvPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPG9wZXJhbmQgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSI2NSIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgPC9zdGF0ZW1lbnRzPg0KPC9saWJyYXJ5Pg0K"
          },
          {
            "contentType": "text/cql",
            "data": "LyoNClV0aWxpemF0aW9uIG9mIHRoZSBQSFEtOSB0byBNb25pdG9yIERlcHJlc3Npb24gU3ltcHRvbXMgZm9yIEFkb2xlc2NlbnRzIGFuZCBBZHVsdHMgKERNUykNCiovDQoNCmxpYnJhcnkgRE1TX0ZISVIgdmVyc2lvbiAnMS4wLjAnDQoNCi8vdXNpbmcgRkhJUiB2ZXJzaW9uICczLjAuMScNCnVzaW5nIEZISVIgdmVyc2lvbiAnMy4wLjAnDQoNCi8qDQpNZWFzdXJlIERlc2NyaXB0aW9uDQpUaGUgcGVyY2VudGFnZSBvZiBtZW1iZXJzIDEyIHllYXJzIG9mIGFnZSBhbmQgb2xkZXIgd2l0aCBhIGRpYWdub3NpcyBvZiBtYWpvcg0KZGVwcmVzc2lvbiBvciBkeXN0aHltaWEsIHdobyBoYWQgYW4gb3V0cGF0aWVudCBlbmNvdW50ZXIgd2l0aCBhIFBIUS05IHNjb3JlDQpwcmVzZW50IGluIHRoZWlyIHJlY29yZCBpbiB0aGUgc2FtZSBhc3Nlc3NtZW50IHBlcmlvZCBhcyB0aGUgZW5jb3VudGVyLg0KKi8NCg0KY29kZXN5c3RlbSAiTE9JTkMiOiAnaHR0cDovL2xvaW5jLm9yZycNCmNvZGVzeXN0ZW0gIlNOT01FRCI6ICdodHRwOi8vc25vbWVkLmluZm8vc2N0Jw0KY29kZXN5c3RlbSAiQ1FGcmFtZXdvcmsiOiAnaHR0cDovL2NxZnJhbWV3b3JrLmluZm8vY29kZXN5c3RlbS9wbGFjZWhvbGRlcicNCg0KLy8gdmFsdWVzZXQgIkJpcG9sYXIgRGlzb3JkZXIiOiAndXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4zLjY3LjEuMTAxLjEuMTI4JyAvLyBHcm91cGluZyBWYWx1ZSBTZXQNCi8vIHZhbHVlc2V0ICJQZXJzb25hbGl0eSBEaXNvcmRlciI6ICd1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjMuNjcuMS4xMDEuMS4yNDYnIC8vIEdyb3VwaW5nIFZhbHVlIFNldA0KLy8gdmFsdWVzZXQgIlBzeWNob3RpYyBEaXNvcmRlciI6ICd1cm46b2lkOjIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDMuMTA1LjEyLjExNTMnIC8vIFVzZXIgRGVmaW5lZCBRRE0gVmFsdWUgU2V0DQovLyB2YWx1ZXNldCAiUGVydmFzaXZlIERldmVsb3BtZW50YWwgRGlzb3JkZXIiOiAndXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDAzLjEwNS4xMi4xMTUyJyAvLyBVc2VyIERlZmluZWQgUURNIFZhbHVlIFNldA0KLy8gdmFsdWVzZXQgIkludGVyYWN0aXZlIE91dHBhdGllbnQgRW5jb3VudGVyIjogJ3VybjpvaWQ6Mi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwMy4xMDEuMTIuMTA3NCcgLy8gR3JvdXBpbmcgVmFsdWUgU2V0DQovLyB2YWx1ZXNldCAiUEhRLTkgTW9kaWZpZWQgU2NvcmUiOiAndXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDAzLjEwNS4xMi4xMTU0JyAvLyBVc2VyIERlZmluZWQgUURNIFZhbHVlIFNldA0KLy8gdmFsdWVzZXQgIlBIUS05IFRvb2wiOiAndXJuOm9pZDoyLjE2Ljg0MC4xLjExMzg4My4zLjY3LjEuMTAxLjExLjcyMycgLy8gR3JvdXBpbmcgVmFsdWUgU2V0DQoNCi8vIHVwZGF0ZQ0KdmFsdWVzZXQgIkJpcG9sYXIgRGlzb3JkZXIiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMDQ0Jw0KdmFsdWVzZXQgIkJpcG9sYXIgRGlzb3JkZXIgRUNEUyI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzNDYnDQovLyB2YWx1ZXNldCAiSG9zcGljZSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjE0MTgnDQp2YWx1ZXNldCAiSW50ZXJhY3RpdmUgT3V0cGF0aWVudCBFbmNvdW50ZXIiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMzQ3Jw0KdmFsdWVzZXQgIk1ham9yIERlcHJlc3Npb24gYW5kIER5c3RoeW1pYSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzNTEnDQp2YWx1ZXNldCAiT3RoZXIgQmlwb2xhciBEaXNvcmRlciI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjEzOTknDQp2YWx1ZXNldCAiUGVyc29uYWxpdHkgRGlzb3JkZXIiOiAnMi4xNi44NDAuMS4xMTM4ODMuMy40NjQuMTAwNC4xMzU1Jw0KdmFsdWVzZXQgIlBlcnZhc2l2ZSBEZXZlbG9wbWVudGFsIERpc29yZGVyIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM1NicNCnZhbHVlc2V0ICJQSFEtOSBUb3RhbCBTY29yZSI6ICcyLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjE0MDEnDQp2YWx1ZXNldCAiUHN5Y2hvdGljIERpc29yZGVyIjogJzIuMTYuODQwLjEuMTEzODgzLjMuNDY0LjEwMDQuMTM1MicNCg0KLy8gY29kZSAiTWFqb3IgRGVwcmVzc2lvbiBhbmQgRHlzdGh5bWlhIjogJzc4NjY3MDA2JyBmcm9tICJTTk9NRUQiDQpjb2RlICJQSFEtOSBNb2RpZmllZCBTY29yZSI6ICcwMDAwOScgZnJvbSAiQ1FGcmFtZXdvcmsiDQpjb2RlICJQSFEtOSBUb29sIjogJzQ0MjQ5LTEnIGZyb20gIkxPSU5DIg0KDQovKg0KVGhpcyBsaWJyYXJ5IGhhcyBhbiBleHBsaWNpdCBwYXJhbWV0ZXIgd2hpY2ggaXMgdGhlIG1lYXN1cmVtZW50IHllYXIuDQpXaGlsZSB0aGUgYWN0dWFsIHBhcmFtZXRlcidzIHR5cGUgYWNjZXB0cyBhbGwgaW50ZXJ2YWxzLCB0aGlzIGxpYnJhcnkNCmV4cGVjdHMgaXQgd2lsbCBvbmx5IGJlIGdpdmVuIGFyZ3VtZW50cyBjb3JyZXNwb25kaW5nIGV4YWN0bHkgdG8gb25lIHdob2xlDQpjYWxlbmRhciB5ZWFyLCBhbmQgaXQgd2lsbCBub3QgYmVoYXZlIHByb3Blcmx5IG90aGVyd2lzZTsgMjAxNyBmb3IgZXhhbXBsZToNCkludGVydmFsW0RhdGVUaW1lKDIwMTcsMSwxLDAsMCwwLDApLCBEYXRlVGltZSgyMDE4LDEsMSwwLDAsMCwwKSkNCiovDQoNCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBJbnRlcnZhbDxEYXRlVGltZT4NCg0KLyoNClRoZSBtZWFzdXJlbWVudCBwZXJpb2QgaXMgc2VnbWVudGVkIHRvIGVzdGFibGlzaCByZWd1bGFyIHV0aWxpemF0aW9uIG9mIHRoZSBQSFENCmFzc2Vzc21lbnQgdG9vbCBpbiB0aGUgbWFuYWdlbWVudCBvZiBkZXByZXNzaW9uLiBUaGUgZmlyc3QgcXVhbGlmeWluZyBlbmNvdW50ZXINCmluIGVhY2ggcGVyaW9kIGRldGVybWluZXMgdGhlIGRlbm9taW5hdG9yIGV2ZW50cyBmb3IgdGhlIHBlcmZvcm1hbmNlIG1lYXN1cmUuDQpUaGUgbWVhc3VyZW1lbnQgcGVyaW9kIGlzIGRpdmlkZWQgaW50byB0aHJlZSBhc3Nlc3NtZW50IHBlcmlvZHMgd2l0aCBzcGVjaWZpYyBkYXRlcyBvZiBzZXJ2aWNlOg0KCeKAoiBBc3Nlc3NtZW50IFBlcmlvZCBPbmUuIEphbnVhcnkgMeKAk0FwcmlsIDMwIG9mIHRoZSBtZWFzdXJlbWVudCBwZXJpb2QuDQoJ4oCiIEFzc2Vzc21lbnQgUGVyaW9kIFR3by4gTWF5IDHigJNBdWd1c3QgMzEgb2YgdGhlIG1lYXN1cmVtZW50IHBlcmlvZC4NCgnigKIgQXNzZXNzbWVudCBQZXJpb2QgVGhyZWUuIFNlcHRlbWJlciAx4oCTRGVjZW1iZXIgMzEgb2YgdGhlIG1lYXN1cmVtZW50IHBlcmlvZC4NCiovDQoNCmRlZmluZSAiQXNzZXNzbWVudCBQZXJpb2QgT25lIjoNCglJbnRlcnZhbFtzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiwgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiIC0gOCBtb250aHMpDQoNCmRlZmluZSAiQXNzZXNzbWVudCBQZXJpb2QgVHdvIjoNCglJbnRlcnZhbFtzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiArIDQgbW9udGhzLCBlbmQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIgLSA0IG1vbnRocykNCg0KZGVmaW5lICJBc3Nlc3NtZW50IFBlcmlvZCBUaHJlZSI6DQoJSW50ZXJ2YWxbc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIgKyA4IG1vbnRocywgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiICAgICAgICAgICApDQoNCi8qDQpUaGlzIGxpYnJhcnkgZXZhbHVhdGVzIHdpdGggcmVzcGVjdCB0byBleGFjdGx5IDEgY2FuZGlkYXRlIHBhdGllbnQgYXQgYSB0aW1lLA0KdGhhdCBwYXRpZW50IGJlaW5nIGdpdmVuIGJ5IHRoZSBzcGVjaWFsIGNvbnRleHQgcGFyYW1ldGVyIFBhdGllbnQuDQoqLw0KDQpjb250ZXh0IFBhdGllbnQNCg0KLyoNCkluaXRpYWwgUG9wdWxhdGlvbg0KUHJvZHVjdCBsaW5lcyAtLSBDb21tZXJjaWFsLCBNZWRpY2FpZCwgTWVkaWNhcmUgKHJlcG9ydCBlYWNoIHByb2R1Y3QgbGluZSBzZXBhcmF0ZWx5KS4NCiovDQoNCi8vIE5PVEU6IFRoZSBpbml0aWFsIHBvcHVsYXRpb24gaXMgZGVzY3JpYmVkIGFzICJtZW1iZXJzIiwgYnV0IHRoZSBtZWFzdXJlIGlzIGVuY291bnRlci1iYXNlZC4uLg0KZGVmaW5lICJJbml0aWFsIFBvcHVsYXRpb24iOg0KCUFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPj0gMTINCgkJYW5kIGV4aXN0cyAoDQoJCQlbRW5jb3VudGVyOiAiSW50ZXJhY3RpdmUgT3V0cGF0aWVudCBFbmNvdW50ZXIiXSBFDQoJCQkJd2hlcmUgRS5zdGF0dXMudmFsdWUgaW4geyAncGxhbm5lZCcsICdhcnJpdmVkJywgJ3RyaWFnZWQnLCAnaW4tcHJvZ3Jlc3MnLCAnb25sZWF2ZScsICdmaW5pc2hlZCcgfQ0KCQkJCQlhbmQgUGVyaW9kVG9JbnRlcnZhbE9mRFQoRS5wZXJpb2QpIGR1cmluZyBkYXkgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCINCgkJKQ0KCQlhbmQgZXhpc3RzICgNCgkJCVtEaWFnbm9zdGljUmVwb3J0OiAiTWFqb3IgRGVwcmVzc2lvbiBhbmQgRHlzdGh5bWlhIl0gRA0KCQkJCXdoZXJlIEQuc3RhdHVzLnZhbHVlIGluIHsgJ3ByZWxpbWluYXJ5JywgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJywgJ2FwcGVuZGVkJyB9DQoJCQkJCWFuZCBQZXJpb2RUb0ludGVydmFsT2ZEVChELmVmZmVjdGl2ZSkgb3ZlcmxhcHMgZGF5IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQoJCSkNCg0KLyoNCkV4Y2x1c2lvbnMNCiovDQoNCmRlZmluZSAiRGVub21pbmF0b3IgRXhjbHVzaW9uIjoNCglleGlzdHMgKA0KCQlkaXN0aW5jdCAoDQoJCQlbRGlhZ25vc3RpY1JlcG9ydDogIkJpcG9sYXIgRGlzb3JkZXIiXQ0KCQkJCQkvLyBUT0RPOiBUaGUgc3BlYyBtZW50aW9ucyAzIEJpcG9sYXIgdmFsdWVzZXRzLCB3aGljaCBhcmUgbGlrZQ0KCQkJCQkvLyB0aGUgb25lcyBpbiBEU0YsIGJ1dCBpdCBvbmx5IGdpdmVzIE9JRHMgZm9yIG9uZSBvZiB0aGUgMw0KCQkJCQkvLyBhbmQgdGhhdCBPSUQgaXMgZGlmZmVyZW50IHRoYW4gYW55IGluIERTRi4NCgkJCQkJLy8gTm90ZSB0aGF0IERNUyBhbmQgRFJSIGFyZSBpbiB0aGUgc2FtZSBib2F0Lg0KCQkJCXVuaW9uIFtEaWFnbm9zdGljUmVwb3J0OiAiUGVyc29uYWxpdHkgRGlzb3JkZXIiXQ0KCQkJCXVuaW9uIFtEaWFnbm9zdGljUmVwb3J0OiAiUHN5Y2hvdGljIERpc29yZGVyIl0NCgkJCQl1bmlvbiBbRGlhZ25vc3RpY1JlcG9ydDogIlBlcnZhc2l2ZSBEZXZlbG9wbWVudGFsIERpc29yZGVyIl0NCgkJKSBEDQoJCQl3aGVyZSBELnN0YXR1cy52YWx1ZSBpbiB7ICdwcmVsaW1pbmFyeScsICdmaW5hbCcsICdhbWVuZGVkJywgJ2NvcnJlY3RlZCcsICdhcHBlbmRlZCcgfQ0KCQkJCWFuZCBQZXJpb2RUb0ludGVydmFsT2ZEVChELmVmZmVjdGl2ZSkgb3ZlcmxhcHMgZGF5IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiDQoJKQ0KDQovKg0KRGVub21pbmF0b3JzIGFuZCBOdW1lcmF0b3JzDQoqLw0KDQpkZWZpbmUgIkRlbm9taW5hdG9yIDEiOg0KICAgIEZpcnN0KA0KICAgICAgIkRlcHJlc3Npb24gRW5jb3VudGVycyIgRQ0KICAgICAgICAgIHdoZXJlIFBlcmlvZFRvSW50ZXJ2YWxPZkRUKEUucGVyaW9kKSBkdXJpbmcgZGF5IG9mICJBc3Nlc3NtZW50IFBlcmlvZCBPbmUiDQogICAgICAgICAgICAgIHNvcnQgYnkgc3RhcnQgb2YgUGVyaW9kVG9JbnRlcnZhbE9mRFQocGVyaW9kKQ0KICAgICkNCiAgICAgIGlzIG5vdCBudWxsDQoNCmRlZmluZSAiRGVub21pbmF0b3IgMiI6DQogICAgRmlyc3QoDQogICAgICAiRGVwcmVzc2lvbiBFbmNvdW50ZXJzIiBFDQogICAgICAgICAgd2hlcmUgUGVyaW9kVG9JbnRlcnZhbE9mRFQoRS5wZXJpb2QpIGR1cmluZyBkYXkgb2YgIkFzc2Vzc21lbnQgUGVyaW9kIFR3byINCiAgICAgICAgICBzb3J0IGJ5IHN0YXJ0IG9mIFBlcmlvZFRvSW50ZXJ2YWxPZkRUKHBlcmlvZCkNCiAgICApDQogICAgICBpcyBub3QgbnVsbA0KDQpkZWZpbmUgIkRlbm9taW5hdG9yIDMiOg0KICAgIEZpcnN0KA0KICAgICAgIkRlcHJlc3Npb24gRW5jb3VudGVycyIgRQ0KICAgICAgICAgIHdoZXJlIFBlcmlvZFRvSW50ZXJ2YWxPZkRUKEUucGVyaW9kKSBkdXJpbmcgZGF5IG9mICJBc3Nlc3NtZW50IFBlcmlvZCBUaHJlZSINCiAgICAgICAgICBzb3J0IGJ5IHN0YXJ0IG9mIFBlcmlvZFRvSW50ZXJ2YWxPZkRUKHBlcmlvZCkNCiAgICApDQogICAgICBpcyBub3QgbnVsbA0KDQpkZWZpbmUgIkRlcHJlc3Npb24gRW5jb3VudGVycyI6DQoJW0VuY291bnRlcjogIkludGVyYWN0aXZlIE91dHBhdGllbnQgRW5jb3VudGVyIl0gRQ0KCQl3aXRoIFtEaWFnbm9zdGljUmVwb3J0OiAiTWFqb3IgRGVwcmVzc2lvbiBhbmQgRHlzdGh5bWlhIl0gRA0KCQkJc3VjaCB0aGF0IEUuc3RhdHVzLnZhbHVlIGluIHsgJ3BsYW5uZWQnLCAnYXJyaXZlZCcsICd0cmlhZ2VkJywgJ2luLXByb2dyZXNzJywgJ29ubGVhdmUnLCAnZmluaXNoZWQnIH0NCgkJCQlhbmQgRC5zdGF0dXMudmFsdWUgaW4geyAncHJlbGltaW5hcnknLCAnZmluYWwnLCAnYW1lbmRlZCcsICdjb3JyZWN0ZWQnLCAnYXBwZW5kZWQnIH0NCgkJCQlhbmQgUGVyaW9kVG9JbnRlcnZhbE9mRFQoRC5lZmZlY3RpdmUpIG92ZXJsYXBzIGRheSBvZiBQZXJpb2RUb0ludGVydmFsT2ZEVChFLnBlcmlvZCkNCiAgICAgICAgICAgIHJldHVybiBFDQoNCmRlZmluZSAiUEhRLTkgU2NvcmUiOg0KCWRpc3RpbmN0ICgNCgkJW09ic2VydmF0aW9uOiAiUEhRLTkgVG9vbCJdDQoJCXVuaW9uDQoJCVtPYnNlcnZhdGlvbjogIlBIUS05IE1vZGlmaWVkIFNjb3JlIl0NCgkpIEENCgkJd2hlcmUgQS5zdGF0dXMudmFsdWUgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcgfQ0KCQkJYW5kIEEudmFsdWUgaXMgbm90IG51bGwNCg0KZGVmaW5lICJOdW1lcmF0b3IgMSI6DQogIGV4aXN0cyAoDQogICAgICAiUEhRLTkgU2NvcmUiIEENCiAgICAgICAgICB3aGVyZSBBLmVmZmVjdGl2ZS52YWx1ZSBpbiBkYXkgb2YgIkFzc2Vzc21lbnQgUGVyaW9kIE9uZSINCiAgKQ0KDQpkZWZpbmUgIk51bWVyYXRvciAyIjoNCiAgZXhpc3RzICgNCiAgICAiUEhRLTkgU2NvcmUiIEENCiAgICAgICAgd2hlcmUgQS5lZmZlY3RpdmUudmFsdWUgaW4gZGF5IG9mICJBc3Nlc3NtZW50IFBlcmlvZCBUd28iDQogICkNCg0KZGVmaW5lICJOdW1lcmF0b3IgMyI6DQogICAgZXhpc3RzICgNCiAgICAgICAgIlBIUS05IFNjb3JlIiBBDQoJCQl3aGVyZSBBLmVmZmVjdGl2ZS52YWx1ZSBpbiBkYXkgb2YgIkFzc2Vzc21lbnQgUGVyaW9kIFRocmVlIg0KICAgICkNCg0KLyoNClN0cmF0aWZpZXJzDQoqLw0KDQpkZWZpbmUgIlN0cmF0aWZpZXIgMSI6DQoJQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSBpbiBJbnRlcnZhbFsxMiwgMTddDQoNCmRlZmluZSAiU3RyYXRpZmllciAyIjoNCglBZ2VJblllYXJzQXQoc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIpIGluIEludGVydmFsWzE4LCA0NF0NCg0KZGVmaW5lICJTdHJhdGlmaWVyIDMiOg0KCUFnZUluWWVhcnNBdChzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgaW4gSW50ZXJ2YWxbNDUsIDY0XQ0KDQpkZWZpbmUgIlN0cmF0aWZpZXIgNCI6DQoJQWdlSW5ZZWFyc0F0KHN0YXJ0IG9mICJNZWFzdXJlbWVudCBQZXJpb2QiKSA+PSA2NQ0KDQovKg0KVXRpbGl0eSBGdW5jdGlvbnMNCiovDQoNCmRlZmluZSBmdW5jdGlvbiBQZXJpb2RUb0ludGVydmFsT2ZEVCh2YWx1ZSBGSElSLlBlcmlvZCk6DQoJSW50ZXJ2YWxbdmFsdWUuInN0YXJ0Ii52YWx1ZSwgdmFsdWUuImVuZCIudmFsdWVdDQo="
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-dms-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-drr-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-drr-logic/_history/3</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"8\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1347</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1351</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1044</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1355</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1352</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1356</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nDepression Remission or Response for Adolescents and Adults (DRR)\n*/library DRR_FHIR version '1.0.0'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nMeasure Description\nThe percentage of members 12 years of age and older with a diagnosis of\n\t\tdepression and an elevated PHQ-9 score, who had evidence of\n\t\tresponse or remission within 5 to 7 months of the elevated score.\n\t\tThree rates are reported.\n\t1. Follow-Up PHQ-9. The percentage of members who have a follow-up\n\t\tPHQ-9 score documented within the five to seven months after the\n\t\tinitial elevated PHQ-9 score.\n\t2. Depression Remission. The percentage of members who achieved remission\n\t\twithin five to seven months after the initial elevated PHQ-9 score.\n\t3. Depression Response. The percentage of members who showed response\n\t\twithin five to seven months after the initial elevated PHQ-9 score.\n*/\r\n\r\ncodesystem \"LOINC\": 'http://loinc.org'\r\ncodesystem \"SNOMED\": 'http://snomed.info/sct'\r\ncodesystem \"CQFramework\": 'http://cqframework.info/codesystem/placeholder'\n\n// valueset \"Personality Disorder\": 'urn:oid:2.16.840.1.113883.3.67.1.101.1.246' // Grouping Value Set\n// valueset \"Pervasive Developmental Disorder\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1152' // User Defined QDM Value Set\n// valueset \"Bipolar Disorder\": 'urn:oid:2.16.840.1.113883.3.67.1.101.1.128' // Grouping Value Set\n// valueset \"Psychotic Disorder\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1153' // User Defined QDM Value Set\n// valueset \"Interactive Outpatient Encounter\": 'urn:oid:2.16.840.1.113883.3.464.1003.101.12.1074'\n// valueset \"PHQ-9 Tool\": 'urn:oid:2.16.840.1.113883.3.67.1.101.11.723' // Grouping Value Set\n// valueset \"PHQ-9 Modified Score\": 'urn:oid:2.16.840.1.113883.3.464.1003.105.12.1154' // Grouping Value Set\n\n// update\r\n\r\nvalueset \"Bipolar Disorder\": '2.16.840.1.113883.3.464.1004.1044'\r\nvalueset \"Bipolar Disorder ECDS\": '2.16.840.1.113883.3.464.1004.1346'\n// valueset \"Hospice\": '2.16.840.1.113883.3.464.1004.1418'\r\nvalueset \"Interactive Outpatient Encounter\": '2.16.840.1.113883.3.464.1004.1347'\r\nvalueset \"Major Depression and Dysthymia\": '2.16.840.1.113883.3.464.1004.1351'\r\nvalueset \"Other Bipolar Disorder\": '2.16.840.1.113883.3.464.1004.1399'\r\nvalueset \"Personality Disorder\": '2.16.840.1.113883.3.464.1004.1355'\r\nvalueset \"Pervasive Developmental Disorder\": '2.16.840.1.113883.3.464.1004.1356'\r\nvalueset \"PHQ-9 Total Score\": '2.16.840.1.113883.3.464.1004.1401'\r\nvalueset \"Psychotic Disorder\": '2.16.840.1.113883.3.464.1004.1352'\n\n// code \"Major Depression and Dysthymia\": '78667006' from \"SNOMED\"\r\n\r\ncode \"PHQ-9 Modified Score\": '00009' from \"CQFramework\"\r\ncode \"PHQ-9 Tool\": '44249-1' from \"LOINC\"\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n\n// Intake Period: June 1 of the year prior to the measurement period through May 31 of the measurement period.\r\n\r\ndefine \"Intake Period As MP Shifted Back 7 Months\":\r\n  Interval[start of \"Measurement Period\" - 7 months, \r\n  end of \"Measurement Period\" - 7 months )\r\n\r\ndefine \"Intake Period Union Measurement Period\":\r\n  Interval[start of \"Measurement Period\" - 7 months, \r\n  end of \"Measurement Period\" - 7 months )\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 12\r\n    and exists ( \"DRR Encounter\" DRR\r\n        with [DiagnosticReport: \"Major Depression and Dysthymia\"] DepressionDiagnosis\r\n          such that DepressionDiagnosis.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n            and PeriodToIntervalOfDT(DepressionDiagnosis.effective)overlaps day of PeriodToIntervalOfDT(DRR.period)\r\n    )\r\n\r\ndefine \"DRR Encounter\":\r\n  [Encounter: \"Interactive Outpatient Encounter\"] DRR\r\n    where DRR.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\r\n      and PeriodToIntervalOfDT(DRR.period)during day of \"Intake Period As MP Shifted Back 7 Months\"\n\n/*\nExclusions\n*/\r\n\r\ndefine \"Denominator Exclusion\":\r\n  exists ( distinct ( [DiagnosticReport: \"Bipolar Disorder\"]\n\t\t\t\t\t// TODO: The spec mentions 3 Bipolar valuesets, which are like\n\t\t\t\t\t// the ones in DSF, but it only gives OIDs for one of the 3\n\t\t\t\t\t// and that OID is different than any in DSF.\n\t\t\t\t\t// Note that DMS and DRR are in the same boat.\r\n      union [DiagnosticReport: \"Personality Disorder\"]\r\n      union [DiagnosticReport: \"Psychotic Disorder\"]\r\n      union [DiagnosticReport: \"Pervasive Developmental Disorder\"] ) D\r\n      where D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(D.effective)overlaps day of \"Intake Period Union Measurement Period\"\r\n  )\n\n/*\nDenominators and Numerators\n*/\n\n// Depression Follow-Up\r\n\r\ndefine \"Denominator 1\":\r\n  \"Initial Population\"\r\n    and exists ( \"DRR Encounter\" )\r\n    and \"Depression Index\" is not null\n\n// Depression Follow-Up\r\n\r\ndefine \"Numerator 1\":\r\n  \"Initial Population\"\r\n    and exists ( \"PHQ-9 Assessments\" PHQ\r\n        with \"Depression Index\" DI\r\n          such that PHQ.effective.value after day of DI.effective.value\r\n            and days between DI.effective.value and PHQ.effective.value &gt;= 150\r\n            and days between DI.effective.value and PHQ.effective.value &lt;= 210\r\n        return PHQ\r\n    )\n\n// Depression Remission\r\n\r\ndefine \"Denominator 2\":\r\n  \"Denominator 1\"\n\n// Depression Remission\r\n\r\ndefine \"Numerator 2\":\r\n  \"Initial Population\"\r\n    and exists ( \"PHQ-9 Assessments\" PHQ\r\n        with \"Depression Index\" DI\r\n          such that ( PHQ.value as Quantity ).value.value &lt; 5\r\n            and PHQ.effective.value after day of DI.effective.value\r\n            and days between DI.effective.value and PHQ.effective.value &gt;= 150\r\n            and days between DI.effective.value and PHQ.effective.value &lt;= 210\r\n        return PHQ\r\n    )\n\n// Depression Response\r\n\r\ndefine \"Denominator 3\":\r\n  \"Denominator 1\"\n\n// Depression Response\r\n\r\ndefine \"Numerator 3\":\r\n  \"Initial Population\"\r\n    and exists ( \"PHQ-9 Assessments\" PHQ\r\n        with \"Depression Index\" DI\r\n          such that ( PHQ.value as Quantity ).value.value &lt;= ( DI.value as Quantity ).value.value / 2\r\n            and PHQ.effective.value after day of DI.effective.value\r\n            and days between DI.effective.value and PHQ.effective.value &gt;= 150\r\n            and days between DI.effective.value and PHQ.effective.value &lt;= 210\r\n        return PHQ\r\n    )\r\n\r\ndefine \"Depression Index\":\r\n  First(\"PHQ-9 Assessments\" PHQ\r\n      with \"DRR Encounter\" DRR\r\n        such that(PHQ.value as Quantity).value.value &gt; 9\r\n          and((PHQ.effective.value same day or before start of PeriodToIntervalOfDT(DRR.period)\r\n                and days between PHQ.effective.value and start of PeriodToIntervalOfDT(DRR.period)&lt;= 15\r\n            )\r\n              or(PHQ.effective.value same day or after start of PeriodToIntervalOfDT(DRR.period)\r\n                  and days between start of PeriodToIntervalOfDT(DRR.period)and PHQ.effective.value &lt;= 15\r\n              )\r\n          )\r\n      return PHQ\r\n  )\r\n\r\ndefine \"PHQ-9 Assessments\":\r\n  distinct ( [Observation: \"PHQ-9 Tool\"]\r\n    union [Observation: \"PHQ-9 Modified Score\"] ) PHQ\r\n    where PHQ.status.value in { 'final', 'amended' }\r\n      and PHQ.value is not null\n\n/*\nStratifiers\n*/\r\n\r\ndefine \"Stratifier 1\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[12, 17]\r\n\r\ndefine \"Stratifier 2\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[18, 44]\r\n\r\ndefine \"Stratifier 3\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[45, 64]\r\n\r\ndefine \"Stratifier 4\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "version": "1.0.0",
        "name": "DRR_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1347"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1351"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1044"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1355"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1352"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1356"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-drr-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-dsf-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-dsf-logic/_history/3</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"13\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1044</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1346</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1399</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1351</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1384</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1387</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>MedicationDispense</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>medication</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1383</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1385</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1351</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1389</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Encounter</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1383</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1386</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nDepression Screening and Follow-Up for Adolescents and Adults (DSF)\n*/library DSF_FHIR version '1.0.0'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nMeasure Description\nThe percentage of members 12 years of age and older who were screened for\n\t\tclinical depression using a standardized tool and, if screened positive,\n\t\twho received appropriate follow-up care. Two rates are reported.\n\t1. Depression Screening. The percentage of members who were screened for\n\t\tclinical depression using a standardized tool.\n\t2. Follow-Up on Positive Screen. The percentage of members who screened\n\t\tpositive for depression and received appropriate follow-up care within 30 days.\n*/\r\n\r\ncodesystem \"LOINC\": 'http://loinc.org'\r\ncodesystem \"SNOMED\": 'http://snomed.info/sct'\r\ncodesystem \"CQFramework\": 'http://cqframework.info/codesystem/placeholder'\n\n// valueset \"Bipolar Disorder\": 'urn:oid:2.16.840.1.113883.3.464.1004.1044' // Grouping Value Set\n// valueset \"Bipolar Disorder ECDS\": 'urn:oid:2.16.840.1.113883.3.464.1004.1346' // Grouping Value Set\n// valueset \"Other Bipolar Disorder\": 'urn:oid:2.16.840.1.113883.3.464.1004.1399' // Grouping Value Set\n// valueset \"Behavioral Health Encounter\": 'urn:oid:2.16.840.1.113883.3.464.1004.1383' // Grouping Value Set\n// valueset \"Depression Case Management Encounter\": 'urn:oid:2.16.840.1.113883.3.464.1004.1389' // Grouping Value Set\n// valueset \"ECDS Follow-Up Visit\": 'urn:oid:2.16.840.1.113883.3.464.1004.1385' // Grouping Value Set\n// valueset \"Depression Screen\": 'urn:oid:2.16.840.1.113883.3.464.1004.1384' // Grouping Value Set\n// valueset \"Positive Depression Screen\": 'urn:oid:2.16.840.1.113883.3.464.1004.1387' // Grouping Value Set\n// valueset \"Negative Depression Screen\": 'urn:oid:2.16.840.1.113883.3.464.1004.1386' // Grouping Value Set\n// valueset \"Antidepressant Medication\": 'TODO' // not in spec Data Criteria\n\n// update\r\n\r\nvalueset \"Behavioral Health Encounter\": '2.16.840.1.113883.3.464.1004.1383'\r\nvalueset \"Bipolar Disorder\": '2.16.840.1.113883.3.464.1004.1044'\r\nvalueset \"Bipolar Disorder ECDS\": '2.16.840.1.113883.3.464.1004.1346'\r\nvalueset \"Depression\": '2.16.840.1.113883.3.464.1004.1390'\r\nvalueset \"Depression Case Management Encounter\": '2.16.840.1.113883.3.464.1004.1389'\r\nvalueset \"Depression Screen\": '2.16.840.1.113883.3.464.1004.1384'\r\nvalueset \"ECDS Follow-Up Visit\": '2.16.840.1.113883.3.464.1004.1385'\n// valueset \"Hospice\": '2.16.840.1.113883.3.464.1004.1418'\r\nvalueset \"Mental Illness\": '2.16.840.1.113883.3.464.1004.1179'\r\nvalueset \"Mental Illness SNOMED\": '2.16.840.1.113883.3.464.1004.1453'\r\nvalueset \"Negative Depression Screen\": '2.16.840.1.113883.3.464.1004.1386'\r\nvalueset \"Other Bipolar Disorder\": '2.16.840.1.113883.3.464.1004.1399'\r\nvalueset \"Positive Depression Screen\": '2.16.840.1.113883.3.464.1004.1387'\r\nvalueset \"Major Depression and Dysthymia\": '2.16.840.1.113883.3.464.1004.1351'\r\n\r\ncode \"Antidepressant Medication\": '00001' from \"CQFramework\"\r\ncode \"PHQ-9 Modified Score\": '00009' from \"CQFramework\"\r\ncode \"PHQ-9 Tool\": '44249-1' from \"LOINC\"\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\r\n\r\ndefine \"First Predecessor Year\":\r\n  Interval[start of \"Measurement Period\" - 1 year, start of \"Measurement Period\" )\r\n\r\ndefine \"Lookback Interval One More Year\":\r\n  Interval[start of \"Measurement Period\" - 1 year, \r\n  end of \"Measurement Period\" )\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 12\n\n/*\nExclusions\n*/\r\n\r\ndefine \"Denominator Exclusion\":\r\n  exists ( \"Bipolar Disorder Reports\" BD\r\n      where BD.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n        and PeriodToIntervalOfDT(BD.effective)overlaps day of \"Lookback Interval One More Year\"\r\n  )\r\n    or exists ( [DiagnosticReport: \"Major Depression and Dysthymia\"] MDD\r\n        where MDD.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n          and PeriodToIntervalOfDT(MDD.effective)overlaps day of \"First Predecessor Year\"\r\n    )\r\n\r\ndefine \"Bipolar Disorder Reports\":\r\n  [DiagnosticReport: \"Bipolar Disorder\"]\r\n    union [DiagnosticReport: \"Bipolar Disorder ECDS\"]\r\n    union [DiagnosticReport: \"Other Bipolar Disorder\"]\n\n/*\nDenominators and Numerators\n*/\n\n// Depression Screening\r\n\r\ndefine \"Denominator 1\":\r\n  \"Initial Population\"\n\n// Depression Screening\r\n\r\ndefine \"Numerator 1\":\r\n  \"Initial Population\"\r\n    and exists ( [Observation: \"Depression Screen\"] DepressionScreen\r\n        where DepressionScreen.status.value in { 'final', 'amended' }\r\n          and DepressionScreen.effective.value in day of \"Measurement Period\"\r\n    )\n\n// Positive Follow-Up\r\n\r\ndefine \"Denominator 2\":\r\n  \"Initial Population\"\r\n    and exists ( \"Positive Depression Screen During Follow-Up Period\" )\n\n// Positive Follow-Up\r\n\r\ndefine \"Numerator 2\":\r\n  \"Initial Population\"\r\n    and ( exists ( \"Dispensed Antidepressant Within 31 Days\" )\r\n        or exists ( \"Follow-Up Encounter Within 31 Days\" )\r\n        or exists ( \"Same Day Behavioral Encounter\" )\r\n        or exists ( \"Negative Depression Screen Within 31 Days\" )\r\n    )\r\n\r\ndefine \"Positive Depression Screen During Follow-Up Period\":\r\n  [Observation: \"Positive Depression Screen\"] PositiveScreen\r\n    where PositiveScreen.status.value in { 'final', 'amended' }\r\n      and PositiveScreen.effective.value in day of \"Measurement Period\"\r\n\r\ndefine \"First Positive Depression Screen During Follow-Up Period\":\r\n  { First(\"Positive Depression Screen During Follow-Up Period\" Obs\r\n      sort by effective.value\r\n  )}\r\n\r\ndefine \"Follow-Up Care Encounters\":\r\n  distinct ( [Encounter: \"Behavioral Health Encounter\"]\r\n    union ( [Encounter: \"ECDS Follow-Up Visit\"] E\r\n        with [DiagnosticReport: \"Major Depression and Dysthymia\"] D\r\n          such that E.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\r\n            and D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n            and PeriodToIntervalOfDT(D.effective)overlaps day of PeriodToIntervalOfDT(E.period)\r\n    )\r\n    union [Encounter: \"Depression Case Management Encounter\"] ) Enc\r\n    where Enc.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\r\n\r\ndefine \"Same Day Behavioral Encounter\":\r\n  [Encounter: \"Behavioral Health Encounter\"] BehavioralEncounter\r\n    with \"First Positive Depression Screen During Follow-Up Period\" PositiveScreen\r\n      such that BehavioralEncounter.status.value in { 'planned', 'arrived', 'triaged', 'in-progress', 'onleave', 'finished' }\r\n        and start of PeriodToIntervalOfDT(BehavioralEncounter.period)same day as PositiveScreen.effective.value\r\n    return BehavioralEncounter\r\n\r\ndefine \"Dispensed Antidepressant Within 31 Days\":\r\n  [MedicationDispense: medication in \"Antidepressant Medication\"] Antidepressants\r\n    with \"First Positive Depression Screen During Follow-Up Period\" PositiveScreen\r\n      such that Antidepressants.status.value = 'completed'\r\n        and days between Antidepressants.whenHandedOver.value and PositiveScreen.effective.value &lt;= 31\r\n    return Antidepressants\r\n\r\ndefine \"Follow-Up Encounter Within 31 Days\":\r\n  \"Follow-Up Care Encounters\" FollowUps\r\n    with \"First Positive Depression Screen During Follow-Up Period\" PositiveScreen\r\n      such that days between start of PeriodToIntervalOfDT(FollowUps.period)and PositiveScreen.effective.value &gt;= 1\r\n        and days between start of PeriodToIntervalOfDT(FollowUps.period)and PositiveScreen.effective.value &lt;= 31\r\n    return FollowUps\r\n\r\ndefine \"Negative Depression Screen Within 31 Days\":\r\n  [Observation: \"Negative Depression Screen\"] NegativeScreen\r\n    with \"First Positive Depression Screen During Follow-Up Period\" PositiveScreen\r\n      such that NegativeScreen.status.value in { 'final', 'amended' }\r\n        and days between NegativeScreen.effective.value and PositiveScreen.effective.value &lt;= 31\r\n    return NegativeScreen\n\n/*\nStratifiers\n*/\r\n\r\ndefine \"Stratifier 1\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[12, 17]\r\n\r\ndefine \"Stratifier 2\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[18, 44]\r\n\r\ndefine \"Stratifier 3\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[45, 64]\r\n\r\ndefine \"Stratifier 4\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "version": "1.0.0",
        "name": "DSF_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "dataRequirement": [
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1044"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1346"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1399"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1351"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1384"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1387"
              }
            ]
          },
          {
            "type": "MedicationDispense",
            "codeFilter": [
              {
                "path": "medication"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1383"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1385"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1351"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1389"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1383"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1386"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-dsf-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-mrp-logic",
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-mrp-logic",
        "identifier": [
          {
            "system": "http://ncqa.org/hedis/identifiers",
            "value": "Library_MRP"
          }
        ],
        "version": "1.0.000",
        "name": "MRP_FHIR",
        "title": "30-Day Medication Reconciliation Post Discharge - Logic Library (FHIR)",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2018-08-01",
        "publisher": "National Committee for Quality Assurance",
        "description": "This library contains the logic and terminology declarations used to define population criteria for the 30-Day Medication Reconciliation Post-Discharge HEDIS Measure.",
        "approvalDate": "2018-08-14",
        "lastReviewDate": "2018-08-14",
        "effectivePeriod": {
          "start": "2018-01-01",
          "end": "2018-12-31"
        },
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America (the)"
              }
            ],
            "text": "United States of America (the)"
          }
        ],
        "contributor": [
          {
            "type": "author",
            "name": "National Committee for Quality Assurance"
          }
        ],
        "contact": [
          {
            "telecom": [
              {
                "system": "url",
                "value": "http://ncqa.org"
              }
            ]
          }
        ],
        "copyright": "HEDIS® is a registered trademark of the National Committee for Quality Assurance (NCQA). The HEDIS measures and specifications were developed by and are owned by the National Committee for Quality Assurance (“NCQA”). NCQA holds a copyright in the HEDIS measures and specifications and may rescind or alter these measures and specifications at any time. Users of the HEDIS measures and specifications shall not have the right to alter, enhance or otherwise modify the HEDIS measures and specifications, and shall not disassemble, recompile or reverse engineer the HEDIS measures and specifications. Anyone desiring to use or reproduce the materials without modification for a non-commercial purpose may do so without obtaining any approval from NCQA. All commercial uses or requests for alteration of the HEDIS measures and specifications must be approved by NCQA and are subject to a license at the discretion of NCQA. HEDIS measures and specifications are not clinical guidelines, do not establish a standard of medical care and have not been tested for all potential applications. The measures and specifications are provided “as is” without warranty of any kind. NCQA makes no representations, warranties or endorsements about the quality of any product, test or protocol identified as numerator compliant or otherwise identified as meeting the requirements of a HEDIS measure or specification. NCQA also makes no representations, warranties or endorsements about the quality of any organization or clinician who uses or reports performance measures. NCQA has no liability to anyone who relies on HEDIS measures and specifications or data reflective of performance under such measures and specifications. No measure rate resulting from calculations based on the HEDIS specifications may be called a HEDIS rate until it is audited and approved by an NCQA-certified HEDIS auditor. Until NCQA has approved a validation process and validates a calculated measure rate, users must prominently display a disclaimer near each uncertified calculated rate. Henceforth in this publication and in any other NCQA publication, “HEDIS measure” refers to the specifications and “HEDIS data” refers to and assumes data audited by an NCQA-certified auditor. Limited proprietary coding is contained in the measure specifications for convenience. Users of the proprietary code sets should obtain all necessary licenses from the owners of these code sets. NCQA disclaims all liability for use or accuracy of any coding contained in the specifications.The American Medical Association holds a copyright to the CPT® codes contained in the measures specifications. Some measure specifications contain coding from LOINC® ([http://loinc.org](http://loinc.org)). The LOINC table, LOINC codes, LOINC panels and form file, LOINC linguistic variants file, LOINC/RSNA Radiology Playbook, and LOINC/IEEE Medical Device Code Mapping Table are copyright © 1995–2017, Regenstrief Institute, Inc. and the Logical Observation Identifiers Names and Codes (LOINC) Committee and is available at no cost under the license at [http://loinc.org/terms-of-use](http://loinc.org/terms-of-use). No part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopy, recording or any information storage and retrieval system, without the written permission of NCQA. © 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-common-logic"
            }
          },
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-participation-logic"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.43"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.464.1003.101.12.1014"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1108.15"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "http://ncqa.org/hedis/ValueSet/2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Encounter",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "http://ncqa.org/hedis/ValueSet/2.16.840.1.113883.3.666.5.307"
              }
            ]
          },
          {
            "type": "Practitioner"
          },
          {
            "type": "Task",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "http://ncqa.org/hedis/ValueSet/2.16.840.1.113883.3.464.1004.1174"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "http://ncqa.org/hedis/ValueSet/2.16.840.1.113883.3.464.1004.1174"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBNUlBfRkhJUiB2ZXJzaW9uICcxLjAuMDAwJw0KDQovKg0KTWVkaWNhdGlvbiByZWNvbmNpbGlhdGlvbiBwb3N0ZGlzY2hhcmdlIChNUlApDQoqLw0KDQp1c2luZyBGSElSIHZlcnNpb24gJzMuMC4wJw0KDQppbmNsdWRlIEZISVJIZWxwZXJzIHZlcnNpb24gJzMuMC4wJw0KaW5jbHVkZSBOQ1FBQ29tbW9uX0ZISVIgdmVyc2lvbiAnMy4xMC4wMDAnIGNhbGxlZCBDb21tb24NCmluY2x1ZGUgUGFydGljaXBhdGlvbl9GSElSIHZlcnNpb24gJzEuMC4wJyBjYWxsZWQgUGFydGljaXBhdGlvbg0KDQovLyBVc2UgaHR0cDovL2ZoaXIuZXh0LmFwZWxvbi5jb20vZHRzc2VydmVyd3MvZmhpciB0byBldmFsdWF0ZSwgYnV0IHRoZXNlIGFyZSB0aGUgY2Fub25pY2FsIHVybHMNCnZhbHVlc2V0ICJJbnBhdGllbnQgRW5jb3VudGVyIjogJ2h0dHA6Ly9uY3FhLm9yZy9oZWRpcy9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjY2Ni41LjMwNycgLy8gSW4gVlNBQw0KdmFsdWVzZXQgIk1lZGljYXRpb24gUmVjb25jaWxpYXRpb24gVmFsdWUgU2V0IjogJ2h0dHA6Ly9uY3FhLm9yZy9oZWRpcy9WYWx1ZVNldC8yLjE2Ljg0MC4xLjExMzg4My4zLjQ2NC4xMDA0LjExNzQnIC8vIEhFRElTIElHDQoNCi8vIFByZXNjcmliaW5nIFByYWN0aXRpb25lciwgQ2xpbmljYWwgUGhhcm1hY2lzdCBvciBSZWdpc3RlcmVkIE51cnNlDQovLyBodHRwOi8vaGw3Lm9yZy9maGlyL3YyLzAzNjAvMi43L2luZGV4Lmh0bWwgeyBDQU5QLCBDTlAsIENOTSwgQ05TLCBDUk4sIERPLCBNRCwgTlAsIFBoYXJtRCwgUk4sIFJQSCwgUEEsIEZQTlAsIFBOIH0NCnZhbHVlc2V0ICJWYWxpZCBNZWRpY2F0aW9uIFJlY29uY2lsaWF0aW9uIFBlcmZvcm1lciBRdWFsaWZpY2F0aW9ucyI6ICdodHRwOi8vbmNxYS5vcmcvaGVkaXMvVmFsdWVTZXQvaGVkaXMtbWVkLXJlYy1wcmFjdGl0aW9uZXInDQoNCnBhcmFtZXRlciAiTWVhc3VyZW1lbnQgUGVyaW9kIiBkZWZhdWx0IEludGVydmFsW0AyMDE4LTAxLTAxVDAwOjAwLCBAMjAxOS0wMS0wMVQwMDowMCkNCg0KY29udGV4dCBQYXRpZW50DQoNCmRlZmluZSAiRW5jb3VudGVycyBFbmRpbmcgQmVmb3JlIERlY2VtYmVyIDJuZCI6DQogIFtFbmNvdW50ZXI6ICJJbnBhdGllbnQgRW5jb3VudGVyIl0gRTENCiAgICB3aGVyZSBFMS5zdGF0dXMgfiAnRmluaXNoZWQnDQogICAgIGFuZCBFMS5wZXJpb2QgZW5kcyBkdXJpbmcgSW50ZXJ2YWxbc3RhcnQgb2YgIk1lYXN1cmVtZW50IFBlcmlvZCIsIGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiAtIDMwIGRheXNdIA0KDQpkZWZpbmUgIkVuY291bnRlcnMgaW4gTWVhc3VyZW1lbnQgUGVyaW9kIjoNCiAgW0VuY291bnRlcjogIklucGF0aWVudCBFbmNvdW50ZXIiXSBFMg0KICAgIHdoZXJlIEUyLnN0YXR1cyB+ICdGaW5pc2hlZCcNCiAgICAgYW5kIEUyLnBlcmlvZCBlbmRzIGR1cmluZyBJbnRlcnZhbFtzdGFydCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIiwgZW5kIG9mICJNZWFzdXJlbWVudCBQZXJpb2QiXSANCiAgICAgDQovLyBDb25zaWRlciBleHByZXNzaW5nIHRoaXMgdXNpbmcgYSB3aXRob3V0LCBzaW5jZSBpbiB0aGUgY2FzZSB0aGF0IHRoZXJlIGlzIG5vIGVuY291bnRlciBhZnRlciBFMSwgdGhpcyB3b24ndCByZXR1cm4NCmRlZmluZSAiRW5jb3VudGVycyB3aXRob3V0IDMwIERheSBSZWFkbWlzc2lvbiI6DQoJIkVuY291bnRlcnMgRW5kaW5nIEJlZm9yZSBEZWNlbWJlciAybmQiIEUxDQoJICAgd2l0aCAiRW5jb3VudGVycyBpbiBNZWFzdXJlbWVudCBQZXJpb2QiIEUyIA0KCSAgIHN1Y2ggdGhhdCBkaWZmZXJlbmNlIGluIGRheXMgYmV0d2VlbiBzdGFydCBvZiBFMi5wZXJpb2QgYW5kIHN0YXJ0IG9mIEUxLnBlcmlvZCA+IDMwDQogICAgCQ0KDQpkZWZpbmUgIkluaXRpYWwgUG9wdWxhdGlvbiI6DQogICJFbmNvdW50ZXJzIHdpdGhvdXQgMzAgRGF5IFJlYWRtaXNzaW9uIiBFDQogICAgd2hlcmUgQWdlSW5ZZWFyc0F0KGVuZCBvZiAiTWVhc3VyZW1lbnQgUGVyaW9kIikgPj0gMTgNCiAgICBhbmQgUGFydGljaXBhdGlvbi4iSXMgRW5yb2xsZWQiKFBhcnRpY2lwYXRpb24uIk1lZGljYXJlIFByb2R1Y3QiLA0KCQkgIGVuZCBvZiBFLnBlcmlvZCArIDMwIGRheXMsIEludGVydmFsW3N0YXJ0IG9mIEUucGVyaW9kLCBlbmQgb2YgRS5wZXJpb2QgKyAzMCBkYXlzXSwgMCkNCgkJYW5kIG5vdCBDb21tb24uIkhhcyBIb3NwaWNlIg0KDQpkZWZpbmUgRGVub21pbmF0b3I6DQogIHRydWUNCiAgDQpkZWZpbmUgUHJhY3RpdGlvbmVyczoNCiAgW1ByYWN0aXRpb25lcl0gUA0KICAgIHdoZXJlIFAuYWN0aXZlIC8vVGhpcyBpbmRpY2F0ZXMgdGhlIHByYWN0aXRpb25lciByZWNvcmQgd2FzIG5vdCBjcmVhdGVkIGluIGVycm9yDQogICAgICBhbmQgZXhpc3RzIChQLnF1YWxpZmljYXRpb24gUSB3aGVyZSBRLmNvZGUgaW4gIlZhbGlkIE1lZGljYXRpb24gUmVjb25jaWxpYXRpb24gUGVyZm9ybWVyIFF1YWxpZmljYXRpb25zIikvL1ByYWN0aXRpb25lciBpcyBxdWFsaWZpZWQgdG8gcmVjb25jaWxlIG1lZGljYXRpb25zDQogIA0KZGVmaW5lIFRhc2tzOg0KICBbVGFzazogIk1lZGljYXRpb24gUmVjb25jaWxpYXRpb24gVmFsdWUgU2V0Il0gVA0KICAgIHdoZXJlIFQuaW50ZW50ID0gJ29yZGVyJw0KICAgICAgYW5kIFQuc3RhdHVzID0gJ2NvbXBsZXRlZCcNCiAgICAgIGFuZCBleGlzdHMgKFByYWN0aXRpb25lcnMgUCB3aGVyZSBFbmRzV2l0aChULm93bmVyLnJlZmVyZW5jZSwgUC5pZCkpDQogICAgICANCmRlZmluZSBPYnNlcnZhdGlvbnM6DQogIFtPYnNlcnZhdGlvbjogIk1lZGljYXRpb24gUmVjb25jaWxpYXRpb24gVmFsdWUgU2V0Il0gTw0KICAgIHdpdGggUHJhY3RpdGlvbmVycyBQDQogICAgc3VjaCB0aGF0IE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnLCAnY29ycmVjdGVkJyB9DQogICAgICBhbmQgZXhpc3RzIChPLnBlcmZvcm1lciBPUCB3aGVyZSBFbmRzV2l0aChPUC5yZWZlcmVuY2UsIFAuaWQpKQ0KDQpkZWZpbmUgTnVtZXJhdG9yOg0KICAiRW5jb3VudGVycyB3aXRob3V0IDMwIERheSBSZWFkbWlzc2lvbiIgRSANCiAgICB3aGVyZSBleGlzdHMgKFRhc2tzIFQgd2hlcmUgVC5leGVjdXRpb25QZXJpb2QgZHVyaW5nIEludGVydmFsW0UucGVyaW9kLiJlbmQiLCBFLnBlcmlvZC4iZW5kIiArIDMwIGRheXNdKQ0KICAgICAgb3IgZXhpc3RzIChPYnNlcnZhdGlvbnMgTyB3aGVyZSBPLmVmZmVjdGl2ZSBkdXJpbmcgSW50ZXJ2YWxbRS5wZXJpb2QuImVuZCIsIEUucGVyaW9kLiJlbmQiICsgMzAgZGF5c10pDQoNCg0K"
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-mrp-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-participation-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-participation-logic/_history/11</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span>http://ncqa.org/hedis/identifiers</span><br/><b>value: </b><span>L-PRT</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.000</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Participation - Logic Library (FHIR)</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr><th scope=\"row\"><b>Description: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">This library contains the logic for determining participation and enrollment for HEDIS measures.</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Contributor: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b><span>author</span>: </b><span>National Committee for Quality Assurance</span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"6\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.46</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.44</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.46</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.45</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Coverage</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>type</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>urn:oid:2.16.840.1.113762.1.4.1165.44</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library Participation version '1.0.0'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\r\n\r\nvalueset \"NCQA Payer\": 'http://ncqa.org/fhir/us/hedis/ValueSet/ncqa-payer' //'urn:oid:2.16.840.1.113762.1.4.1165.42'\r\nvalueset \"Commercial\": 'urn:oid:2.16.840.1.113762.1.4.1165.46'\r\nvalueset \"Medicaid\": 'urn:oid:2.16.840.1.113762.1.4.1165.45'\r\nvalueset \"Medicare\": 'urn:oid:2.16.840.1.113762.1.4.1165.44'\r\n\r\ncontext Patient\r\n\r\ndefine \"Medicaid Product\":\r\n  'medicaid'\r\n\r\ndefine \"Commercial Product\":\r\n  'commercial'\r\n\r\ndefine \"Medicare Product\":\r\n  'medicare'\n\n/*\n  Report in the product line based on which product they are enrolled in at a given date\n\t(generally the end of the measurement period) but continuous enrollment calculations\n\tshould consider all participation periods, regardless of product\n\t\n\tInput parameters:\n\t\tProduct Line: The product line being reported\n\t\tIndex Date: Generally measurement period, but could be tied to an event\n\t\tParticipation Period: Generally one year, two years, or twenty seven months, but could be based on an event\n\t\tAllowed Gap Days: Generally 45 days, but could be 0\n\t\t\n\tExample 1 - One year continuously enrolled\n\t\t\"Is Enrolled\"(ProductLine, end of \"Measurement Period\", \"Measurement Period\", 45)\n\t\t\n\tExample 2 - Two years continuously enrolled\n\t  \"Is Enrolled\"(ProductLine, end of \"Measurement Period\", Interval[start of \"Measurement Period\" - 1 year, end of \"Measurement Period\"], 45)\n\t\t\n\tExample 3 - Twenty seven months continuously enrolled\n\t\t\"Is Enrolled\"(ProductLine, end of \"Measurement Period\", Interval[start of \"Measurement Period\" - 2 years - 3 months, end of \"Measurement Period\"], 45)\n\t\t\n\tExample 4 - Continuously enrolled surrounding an index event such as a heart attack\n\t\t\"Is Enrolled\"(ProductLine, \"Date of Heart Attack\", Interval[\"Date of Heart Attack\", \"Date of Heart Attack\" + 18 months], 45)\n\t\t\n\tExample 5 - Continuously enrolled with no gaps during the 9 months prior to a birth and for the following year, allowing for a gap\n\t  \"Is Enrolled\"(ProductLine, \"Date Of Delivery\", Interval[\"Date Of Delivery\" - 9 months, \"Date Of Delivery\"], 0)\n\t\t  and \"Is Enrolled\"(ProductLine, \"Date Of Delivery\", Interval[\"Date Of Delivery\", \"Date Of Delivery\" + 1 year], 45)\n*/\r\n\r\ndefine function \"Is Enrolled\"(ProductLine String, IndexDate DateTime, ParticipationPeriod Interval&lt;DateTime&gt;, AllowedGapDays Integer):\r\n  case\n\t\t/* If this is not running for a specific product line, ignore enrollment considerations */\r\n    when ProductLine is null then true \r\n    else\n\t\t\t/* Is the patient enrolled in the given product line on the given index date? */ \"Is Enrolled On Date\"(ProductLine, IndexDate)\n\t\t\t/* Is the patient continuously enrolled in every year of the participation period */\r\n    and AllTrue((\"Enrollment Periods\"(ParticipationPeriod))EnrollmentPeriod\r\n        return \"Is Continuously Enrolled In Period\"(EnrollmentPeriod, if duration in months of EnrollmentPeriod &gt;= 6 then AllowedGapDays \r\n            else 0\r\n        )\r\n    )\r\n  end\n\t\n/*\nReturns all Commercial, Medicaid, and Medicare participation for the patient\n*/\r\n\r\ndefine \"Participation\":\r\n  [\"Coverage\": type in \"Commercial\"]\r\n    union [\"Coverage\": type in \"Medicaid\"]\r\n    union [\"Coverage\": type in \"Medicare\"]\r\n\r\ndefine function \"Is Enrolled On Date\"(ProductLine String, IndexDate DateTime):\r\n  exists ( ( case ProductLine\r\n      when \"Commercial Product\" then [\"Coverage\": type in \"Commercial\"]\r\n      when \"Medicare Product\" then [\"Coverage\": type in \"Medicare\"]\r\n      when \"Medicaid Product\" then [\"Coverage\": type in \"Medicaid\"] \r\n      else null \r\n    end ) P\r\n      where IndexDate during P.period\r\n  )\n\n/*\nReturns enrollment periods of up to a year ending at the end of the participation period.\nNote that this will not return more than 3 years (would need the expand from 1.3 to support more generally)\n\nFor example, given the following participation period:\n\n        10/1/16 1/1/17       1/1/18      12/31/18\n            [---||------------||------------]\n\nThe function will return the following enrollment periods:\n\n            [---][------------][------------]\n\t\t\t\t\t\t\nIn values:\nParticipation Period: Interval[@2016-10-01, @2018-12-31]\nEnrollment Periods: { Interval[@2016-10-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31] Interval[@2018-01-01, @2018-12-31] }\n*/\r\n\r\ndefine function \"Enrollment Periods\"(ParticipationPeriod Interval&lt;DateTime&gt;):\r\n  ( { 3 years, 2 years, 1 year } ) Year\r\n    where \r\n    end of ParticipationPeriod - ( Year - 1 year ) after start of ParticipationPeriod\r\n    return Interval[Max({ successor of(\r\n        end of ParticipationPeriod - Year\r\n      ), start of ParticipationPeriod }\r\n    ), \r\n    end of ParticipationPeriod - ( Year - 1 year )]\n\n/*\n//Tests:\ndefine TestTwentySevenMonthParticipationPeriod: Interval[@2016-10-01, @2018-12-31]\ndefine TestExpectedTwentySevenMonthEnrollmentPeriods: { Interval[@2016-10-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestTwentySevenMonthEnrollmentPeriods: \"Enrollment Periods\"(TestTwentySevenMonthParticipationPeriod)\ndefine TestTwentySevenMonthPass: TestTwentySevenMonthEnrollmentPeriods = TestExpectedTwentySevenMonthEnrollmentPeriods\n\ndefine TestThreeYearParticipationPeriod: Interval[@2016-01-01, @2018-12-31]\ndefine TestExpectedThreeYearEnrollmentPeriods: { Interval[@2016-01-01, @2016-12-31], Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestThreeYearEnrollmentPeriods: \"Enrollment Periods\"(TestThreeYearParticipationPeriod)\ndefine TestThreeYearPass: TestThreeYearEnrollmentPeriods = TestExpectedThreeYearEnrollmentPeriods\n\ndefine TestTwoYearParticipationPeriod: Interval[@2017-01-01, @2018-12-31]\ndefine TestExpectedTwoYearEnrollmentPeriods: { Interval[@2017-01-01, @2017-12-31], Interval[@2018-01-01, @2018-12-31] }\ndefine TestTwoYearEnrollmentPeriods: \"Enrollment Periods\"(TestTwoYearParticipationPeriod)\ndefine TestTwoYearPass: TestTwoYearEnrollmentPeriods = TestExpectedTwoYearEnrollmentPeriods\n\ndefine TestOneYearParticipationPeriod: Interval[@2018-01-01, @2018-12-31]\ndefine TestExpectedOneYearEnrollmentPeriods: { Interval[@2018-01-01, @2018-12-31] }\ndefine TestOneYearEnrollmentPeriods: \"Enrollment Periods\"(TestOneYearParticipationPeriod)\ndefine TestOneYearPass: TestOneYearEnrollmentPeriods = TestExpectedOneYearEnrollmentPeriods\n\ndefine TestNineMonthParticipationPeriod: Interval[@2018-03-01, @2018-12-31]\ndefine TestExpectedNineMonthEnrollmentPeriods: { Interval[@2018-03-01, @2018-12-31] }\ndefine TestNineMonthEnrollmentPeriods: \"Enrollment Periods\"(TestNineMonthParticipationPeriod)\ndefine TestNineMonthPass: TestNineMonthEnrollmentPeriods = TestExpectedNineMonthEnrollmentPeriods\n*/\n\n/*\nReturns the periods during which the patient had coverage during the given participation period\t\n*/\r\n\r\ndefine function \"Participation In Period\"(ParticipationPeriod Interval&lt;DateTime&gt;):\r\n  collapse ( Participation P\r\n      where P.period overlaps ParticipationPeriod\r\n      return all P.period\r\n        intersect ParticipationPeriod\r\n  )\n\n/*\nReturns the number of gap days in the given coverage periods, allowing only one gap.\nIf there is more than one gap, returns the maximum Integer\n*/\r\n\r\ndefine function \"Gap Days In Period\"(ParticipationPeriod Interval&lt;DateTime&gt;, Periods List&lt;Interval&lt;DateTime&gt;&gt;):\r\n  case Count(Periods)\r\n    when 1 then if Periods[0]starts day of ParticipationPeriod then difference in days between \r\n    end of Periods[0]and \r\n    end of ParticipationPeriod \r\n      else if Periods[0]ends day of ParticipationPeriod then difference in days between start of ParticipationPeriod and start of Periods[0]\r\n      else maximum Integer\r\n    when 2 then if Periods[0]starts day of ParticipationPeriod\r\n      and Periods[1]ends day of ParticipationPeriod then difference in days between \r\n    end of Periods[0]and start of Periods[1]\r\n      else maximum Integer \r\n    else maximum Integer \r\n  end\n\n/*\n//Tests:\ndefine TestParticipationPeriod: Interval[@2017-01-01, @2017-12-31]\ndefine Test1CoveragePeriods: { Interval[@2017-01-01, @2017-12-31] }\ndefine Test2CoveragePeriods: { Interval[@2017-01-01, @2017-12-15] }\ndefine Test3CoveragePeriods: { Interval[@2017-01-15, @2017-12-31] }\ndefine Test4CoveragePeriods: { Interval[@2017-01-01, @2017-11-15] }\ndefine Test5CoveragePeriods: { Interval[@2017-02-15, @2017-12-31] }\ndefine Test6CoveragePeriods: { Interval[@2017-01-01, @2017-10-15] }\ndefine Test7CoveragePeriods: { Interval[@2017-03-15, @2017-12-31] }\ndefine Test8CoveragePeriods: { Interval[@2017-01-15, @2017-11-15] }\ndefine Test9CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-02-15, @2017-12-31] }\ndefine Test10CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-03-15, @2017-12-31] }\ndefine Test11CoveragePeriods: { Interval[@2017-01-01, @2017-01-14], Interval[@2017-02-15, @2017-06-14], Interval[@2017-07-15, @2017-12-31] }\ndefine Test1CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test1CoveragePeriods)\ndefine Test2CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test2CoveragePeriods)\ndefine Test3CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test3CoveragePeriods)\ndefine Test4CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test4CoveragePeriods)\ndefine Test5CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test5CoveragePeriods)\ndefine Test6CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test6CoveragePeriods)\ndefine Test7CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test7CoveragePeriods)\ndefine Test8CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test8CoveragePeriods)\ndefine Test9CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test9CoveragePeriods)\ndefine Test10CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test10CoveragePeriods)\ndefine Test11CoverageGap: \"Gap Days In Period\"(TestParticipationPeriod, Test11CoveragePeriods)\ndefine Test1ExpectedGap: 0\ndefine Test2ExpectedGap: 16\ndefine Test3ExpectedGap: 14\ndefine Test4ExpectedGap: 46\ndefine Test5ExpectedGap: 45\ndefine Test6ExpectedGap: 77\ndefine Test7ExpectedGap: 73\ndefine Test8ExpectedGap: maximum Integer\ndefine Test9ExpectedGap: 32\ndefine Test10ExpectedGap: 60\ndefine Test11ExpectedGap: maximum Integer\n*/\r\n\r\ndefine function \"Is Continuously Enrolled In Period\"(EnrollmentPeriod Interval&lt;DateTime&gt;, AllowedGapDays Integer):\r\n  \"Gap Days In Period\"(EnrollmentPeriod, \"Participation In Period\"(EnrollmentPeriod))&lt;= AllowedGapDays\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "url": "http://ncqa.org/fhir/us/hedis/Library/library-participation-logic",
        "identifier": [
          {
            "system": "http://ncqa.org/hedis/identifiers",
            "value": "Library_PRT"
          }
        ],
        "version": "1.0.0",
        "name": "Participation_FHIR",
        "title": "Participation - Logic Library (FHIR)",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2018-08-01",
        "publisher": "National Committee for Quality Assurance",
        "description": "This library contains the logic for determining participation and enrollment for HEDIS measures.",
        "approvalDate": "2018-11-12",
        "lastReviewDate": "2018-11-12",
        "effectivePeriod": {
          "start": "2018-01-01",
          "end": "2018-12-31"
        },
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America (the)"
              }
            ],
            "text": "United States of America (the)"
          }
        ],
        "contributor": [
          {
            "type": "author",
            "name": "National Committee for Quality Assurance"
          }
        ],
        "contact": [
          {
            "telecom": [
              {
                "system": "url",
                "value": "http://ncqa.org"
              }
            ]
          }
        ],
        "copyright": "HEDIS® is a registered trademark of the National Committee for Quality Assurance (NCQA). The HEDIS measures and specifications were developed by and are owned by the National Committee for Quality Assurance (“NCQA”). NCQA holds a copyright in the HEDIS measures and specifications and may rescind or alter these measures and specifications at any time. Users of the HEDIS measures and specifications shall not have the right to alter, enhance or otherwise modify the HEDIS measures and specifications, and shall not disassemble, recompile or reverse engineer the HEDIS measures and specifications. Anyone desiring to use or reproduce the materials without modification for a non-commercial purpose may do so without obtaining any approval from NCQA. All commercial uses or requests for alteration of the HEDIS measures and specifications must be approved by NCQA and are subject to a license at the discretion of NCQA. HEDIS measures and specifications are not clinical guidelines, do not establish a standard of medical care and have not been tested for all potential applications. The measures and specifications are provided “as is” without warranty of any kind. NCQA makes no representations, warranties or endorsements about the quality of any product, test or protocol identified as numerator compliant or otherwise identified as meeting the requirements of a HEDIS measure or specification. NCQA also makes no representations, warranties or endorsements about the quality of any organization or clinician who uses or reports performance measures. NCQA has no liability to anyone who relies on HEDIS measures and specifications or data reflective of performance under such measures and specifications. No measure rate resulting from calculations based on the HEDIS specifications may be called a HEDIS rate until it is audited and approved by an NCQA-certified HEDIS auditor. Until NCQA has approved a validation process and validates a calculated measure rate, users must prominently display a disclaimer near each uncertified calculated rate. Henceforth in this publication and in any other NCQA publication, “HEDIS measure” refers to the specifications and “HEDIS data” refers to and assumes data audited by an NCQA-certified auditor. Limited proprietary coding is contained in the measure specifications for convenience. Users of the proprietary code sets should obtain all necessary licenses from the owners of these code sets. NCQA disclaims all liability for use or accuracy of any coding contained in the specifications.The American Medical Association holds a copyright to the CPT® codes contained in the measures specifications. Some measure specifications contain coding from LOINC® ([http://loinc.org](http://loinc.org)). The LOINC table, LOINC codes, LOINC panels and form file, LOINC linguistic variants file, LOINC/RSNA Radiology Playbook, and LOINC/IEEE Medical Device Code Mapping Table are copyright © 1995–2017, Regenstrief Institute, Inc. and the Logical Observation Identifiers Names and Codes (LOINC) Committee and is available at no cost under the license at [http://loinc.org/terms-of-use](http://loinc.org/terms-of-use). No part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopy, recording or any information storage and retrieval system, without the written permission of NCQA. © 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.46"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.45"
              }
            ]
          },
          {
            "type": "Coverage",
            "codeFilter": [
              {
                "path": "type",
                "valueSetString": "urn:oid:2.16.840.1.113762.1.4.1165.44"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxsaWJyYXJ5IHhtbG5zPSJ1cm46aGw3LW9yZzplbG06cjEiIHhtbG5zOnQ9InVybjpobDctb3JnOmVsbS10eXBlczpyMSIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6eHNkPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSIgeG1sbnM6Zmhpcj0iaHR0cDovL2hsNy5vcmcvZmhpciIgeG1sbnM6cWRtNDM9InVybjpoZWFsdGhpdC1nb3Y6cWRtOnY0XzMiIHhtbG5zOnFkbTUzPSJ1cm46aGVhbHRoaXQtZ292OnFkbTp2NV8zIiB4bWxuczphPSJ1cm46aGw3LW9yZzpjcWwtYW5ub3RhdGlvbnM6cjEiPg0KICAgPGlkZW50aWZpZXIgaWQ9IlBhcnRpY2lwYXRpb25fRkhJUiIgdmVyc2lvbj0iMS4wLjAiLz4NCiAgIDxzY2hlbWFJZGVudGlmaWVyIGlkPSJ1cm46aGw3LW9yZzplbG0iIHZlcnNpb249InIxIi8+DQogICA8dXNpbmdzPg0KICAgICAgPGRlZiBsb2NhbElkZW50aWZpZXI9IlN5c3RlbSIgdXJpPSJ1cm46aGw3LW9yZzplbG0tdHlwZXM6cjEiLz4NCiAgICAgIDxkZWYgbG9jYWxJZGVudGlmaWVyPSJGSElSIiB1cmk9Imh0dHA6Ly9obDcub3JnL2ZoaXIiIHZlcnNpb249IjMuMC4wIi8+DQogICA8L3VzaW5ncz4NCiAgIDxpbmNsdWRlcz4NCiAgICAgIDxkZWYgbG9jYWxJZGVudGlmaWVyPSJGSElSSGVscGVycyIgcGF0aD0iRkhJUkhlbHBlcnMiIHZlcnNpb249IjMuMC4wIi8+DQogICA8L2luY2x1ZGVzPg0KICAgPHZhbHVlU2V0cz4NCiAgICAgIDxkZWYgbmFtZT0iTkNRQSBQYXllciIgaWQ9Imh0dHA6Ly9uY3FhLm9yZy9maGlyL3VzL2hlZGlzL1ZhbHVlU2V0L25jcWEtcGF5ZXIiIGFjY2Vzc0xldmVsPSJQdWJsaWMiLz4NCiAgICAgIDxkZWYgbmFtZT0iQ29tbWVyY2lhbCIgaWQ9InVybjpvaWQ6Mi4xNi44NDAuMS4xMTM3NjIuMS40LjExNjUuNDYiIGFjY2Vzc0xldmVsPSJQdWJsaWMiLz4NCiAgICAgIDxkZWYgbmFtZT0iTWVkaWNhaWQiIGlkPSJ1cm46b2lkOjIuMTYuODQwLjEuMTEzNzYyLjEuNC4xMTY1LjQ1IiBhY2Nlc3NMZXZlbD0iUHVibGljIi8+DQogICAgICA8ZGVmIG5hbWU9Ik1lZGljYXJlIiBpZD0idXJuOm9pZDoyLjE2Ljg0MC4xLjExMzc2Mi4xLjQuMTE2NS40NCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIvPg0KICAgPC92YWx1ZVNldHM+DQogICA8c3RhdGVtZW50cz4NCiAgICAgIDxkZWYgbmFtZT0iUGF0aWVudCIgY29udGV4dD0iUGF0aWVudCI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iU2luZ2xldG9uRnJvbSI+DQogICAgICAgICAgICA8b3BlcmFuZCBkYXRhVHlwZT0iZmhpcjpQYXRpZW50IiB4c2k6dHlwZT0iUmV0cmlldmUiLz4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJNZWRpY2FpZCBQcm9kdWN0IiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHZhbHVlVHlwZT0idDpTdHJpbmciIHZhbHVlPSJtZWRpY2FpZCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJDb21tZXJjaWFsIFByb2R1Y3QiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiPg0KICAgICAgICAgPGV4cHJlc3Npb24gdmFsdWVUeXBlPSJ0OlN0cmluZyIgdmFsdWU9ImNvbW1lcmNpYWwiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iTWVkaWNhcmUgUHJvZHVjdCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB2YWx1ZVR5cGU9InQ6U3RyaW5nIiB2YWx1ZT0ibWVkaWNhcmUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iSXMgRW5yb2xsZWQgT24gRGF0ZSIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIgeHNpOnR5cGU9IkZ1bmN0aW9uRGVmIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJFeGlzdHMiPg0KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IlAiPg0KICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IkNhc2UiPg0KICAgICAgICAgICAgICAgICAgICAgPGNvbXBhcmFuZCBuYW1lPSJQcm9kdWN0TGluZSIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgIDxjYXNlSXRlbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx3aGVuIG5hbWU9IkNvbW1lcmNpYWwgUHJvZHVjdCIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuIGRhdGFUeXBlPSJmaGlyOkNvdmVyYWdlIiBjb2RlUHJvcGVydHk9InR5cGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iQ29tbWVyY2lhbCIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZW4+DQogICAgICAgICAgICAgICAgICAgICA8L2Nhc2VJdGVtPg0KICAgICAgICAgICAgICAgICAgICAgPGNhc2VJdGVtPg0KICAgICAgICAgICAgICAgICAgICAgICAgPHdoZW4gbmFtZT0iTWVkaWNhcmUgUHJvZHVjdCIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuIGRhdGFUeXBlPSJmaGlyOkNvdmVyYWdlIiBjb2RlUHJvcGVydHk9InR5cGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iTWVkaWNhcmUiIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVuPg0KICAgICAgICAgICAgICAgICAgICAgPC9jYXNlSXRlbT4NCiAgICAgICAgICAgICAgICAgICAgIDxjYXNlSXRlbT4NCiAgICAgICAgICAgICAgICAgICAgICAgIDx3aGVuIG5hbWU9Ik1lZGljYWlkIFByb2R1Y3QiIHhzaTp0eXBlPSJFeHByZXNzaW9uUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8dGhlbiBkYXRhVHlwZT0iZmhpcjpDb3ZlcmFnZSIgY29kZVByb3BlcnR5PSJ0eXBlIiB4c2k6dHlwZT0iUmV0cmlldmUiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGVzIG5hbWU9Ik1lZGljYWlkIiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlbj4NCiAgICAgICAgICAgICAgICAgICAgIDwvY2FzZUl0ZW0+DQogICAgICAgICAgICAgICAgICAgICA8ZWxzZSB4c2k6dHlwZT0iQXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9Ik51bGwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxhc1R5cGVTcGVjaWZpZXIgeHNpOnR5cGU9Ikxpc3RUeXBlU3BlY2lmaWVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxlbGVtZW50VHlwZSBuYW1lPSJmaGlyOkNvdmVyYWdlIiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2FzVHlwZVNwZWNpZmllcj4NCiAgICAgICAgICAgICAgICAgICAgIDwvZWxzZT4NCiAgICAgICAgICAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgICAgPHdoZXJlIHhzaTp0eXBlPSJJbiI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJJbmRleERhdGUiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJUb0ludGVydmFsIiBsaWJyYXJ5TmFtZT0iRkhJUkhlbHBlcnMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJwZXJpb2QiIHNjb3BlPSJQIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDwvd2hlcmU+DQogICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICA8b3BlcmFuZCBuYW1lPSJQcm9kdWN0TGluZSI+DQogICAgICAgICAgICA8b3BlcmFuZFR5cGVTcGVjaWZpZXIgbmFtZT0idDpTdHJpbmciIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4NCiAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDxvcGVyYW5kIG5hbWU9IkluZGV4RGF0ZSI+DQogICAgICAgICAgICA8b3BlcmFuZFR5cGVTcGVjaWZpZXIgbmFtZT0idDpEYXRlVGltZSIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgPC9kZWY+DQogICAgICA8ZGVmIG5hbWU9IkVucm9sbG1lbnQgUGVyaW9kcyIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIgeHNpOnR5cGU9IkZ1bmN0aW9uRGVmIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJRdWVyeSI+DQogICAgICAgICAgICA8c291cmNlIGFsaWFzPSJZZWFyIj4NCiAgICAgICAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJMaXN0Ij4NCiAgICAgICAgICAgICAgICAgIDxlbGVtZW50IHZhbHVlPSIzIiB1bml0PSJ5ZWFycyIgeHNpOnR5cGU9IlF1YW50aXR5Ii8+DQogICAgICAgICAgICAgICAgICA8ZWxlbWVudCB2YWx1ZT0iMiIgdW5pdD0ieWVhcnMiIHhzaTp0eXBlPSJRdWFudGl0eSIvPg0KICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgdmFsdWU9IjEiIHVuaXQ9InllYXIiIHhzaTp0eXBlPSJRdWFudGl0eSIvPg0KICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgPC9zb3VyY2U+DQogICAgICAgICAgICA8d2hlcmUgeHNpOnR5cGU9IkFmdGVyIj4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJTdWJ0cmFjdCI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iRW5kIj4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBhcnRpY2lwYXRpb25QZXJpb2QiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iU3VidHJhY3QiPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iWWVhciIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZT0iMSIgdW5pdD0ieWVhciIgeHNpOnR5cGU9IlF1YW50aXR5Ii8+DQogICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iU3RhcnQiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGFydGljaXBhdGlvblBlcmlvZCIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvd2hlcmU+DQogICAgICAgICAgICA8cmV0dXJuPg0KICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gbG93Q2xvc2VkPSJ0cnVlIiBoaWdoQ2xvc2VkPSJ0cnVlIiB4c2k6dHlwZT0iSW50ZXJ2YWwiPg0KICAgICAgICAgICAgICAgICAgPGxvdyB4c2k6dHlwZT0iTWF4Ij4NCiAgICAgICAgICAgICAgICAgICAgIDxzb3VyY2UgeHNpOnR5cGU9Ikxpc3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPGVsZW1lbnQgeHNpOnR5cGU9IlN1Y2Nlc3NvciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iU3VidHJhY3QiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkVuZCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iWWVhciIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2VsZW1lbnQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZWxlbWVudCB4c2k6dHlwZT0iU3RhcnQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGFydGljaXBhdGlvblBlcmlvZCIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvZWxlbWVudD4NCiAgICAgICAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgICAgICAgPC9sb3c+DQogICAgICAgICAgICAgICAgICA8aGlnaCB4c2k6dHlwZT0iU3VidHJhY3QiPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkVuZCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlN1YnRyYWN0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlllYXIiIHhzaTp0eXBlPSJBbGlhc1JlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgdmFsdWU9IjEiIHVuaXQ9InllYXIiIHhzaTp0eXBlPSJRdWFudGl0eSIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC9oaWdoPg0KICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgPC9yZXR1cm4+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciB4c2k6dHlwZT0iSW50ZXJ2YWxUeXBlU3BlY2lmaWVyIj4NCiAgICAgICAgICAgICAgIDxwb2ludFR5cGUgbmFtZT0idDpEYXRlVGltZSIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgICAgICAgPC9vcGVyYW5kVHlwZVNwZWNpZmllcj4NCiAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJQYXJ0aWNpcGF0aW9uIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJVbmlvbiI+DQogICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iVW5pb24iPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgZGF0YVR5cGU9ImZoaXI6Q292ZXJhZ2UiIGNvZGVQcm9wZXJ0eT0idHlwZSIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgICAgICAgIDxjb2RlcyBuYW1lPSJDb21tZXJjaWFsIiB4c2k6dHlwZT0iVmFsdWVTZXRSZWYiLz4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgIDxvcGVyYW5kIGRhdGFUeXBlPSJmaGlyOkNvdmVyYWdlIiBjb2RlUHJvcGVydHk9InR5cGUiIHhzaTp0eXBlPSJSZXRyaWV2ZSI+DQogICAgICAgICAgICAgICAgICA8Y29kZXMgbmFtZT0iTWVkaWNhaWQiIHhzaTp0eXBlPSJWYWx1ZVNldFJlZiIvPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPG9wZXJhbmQgZGF0YVR5cGU9ImZoaXI6Q292ZXJhZ2UiIGNvZGVQcm9wZXJ0eT0idHlwZSIgeHNpOnR5cGU9IlJldHJpZXZlIj4NCiAgICAgICAgICAgICAgIDxjb2RlcyBuYW1lPSJNZWRpY2FyZSIgeHNpOnR5cGU9IlZhbHVlU2V0UmVmIi8+DQogICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iUGFydGljaXBhdGlvbiBJbiBQZXJpb2QiIGNvbnRleHQ9IlBhdGllbnQiIGFjY2Vzc0xldmVsPSJQdWJsaWMiIHhzaTp0eXBlPSJGdW5jdGlvbkRlZiI+DQogICAgICAgICA8ZXhwcmVzc2lvbiB4c2k6dHlwZT0iQ29sbGFwc2UiPg0KICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlF1ZXJ5Ij4NCiAgICAgICAgICAgICAgIDxzb3VyY2UgYWxpYXM9IlAiPg0KICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24gbmFtZT0iUGFydGljaXBhdGlvbiIgeHNpOnR5cGU9IkV4cHJlc3Npb25SZWYiLz4NCiAgICAgICAgICAgICAgIDwvc291cmNlPg0KICAgICAgICAgICAgICAgPHdoZXJlIHhzaTp0eXBlPSJPdmVybGFwcyI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJUb0ludGVydmFsIiBsaWJyYXJ5TmFtZT0iRkhJUkhlbHBlcnMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJwZXJpb2QiIHNjb3BlPSJQIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBhcnRpY2lwYXRpb25QZXJpb2QiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICA8L3doZXJlPg0KICAgICAgICAgICAgICAgPHJldHVybiBkaXN0aW5jdD0iZmFsc2UiPg0KICAgICAgICAgICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IkludGVyc2VjdCI+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJUb0ludGVydmFsIiBsaWJyYXJ5TmFtZT0iRkhJUkhlbHBlcnMiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwYXRoPSJwZXJpb2QiIHNjb3BlPSJQIiB4c2k6dHlwZT0iUHJvcGVydHkiLz4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBhcnRpY2lwYXRpb25QZXJpb2QiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICAgICAgICA8L3JldHVybj4NCiAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDxvcGVyYW5kIHJlc3VsdFR5cGVOYW1lPSJ0OlF1YW50aXR5IiB4c2k6dHlwZT0iTnVsbCIvPg0KICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGFydGljaXBhdGlvblBlcmlvZCI+DQogICAgICAgICAgICA8b3BlcmFuZFR5cGVTcGVjaWZpZXIgeHNpOnR5cGU9IkludGVydmFsVHlwZVNwZWNpZmllciI+DQogICAgICAgICAgICAgICA8cG9pbnRUeXBlIG5hbWU9InQ6RGF0ZVRpbWUiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4NCiAgICAgICAgICAgIDwvb3BlcmFuZFR5cGVTcGVjaWZpZXI+DQogICAgICAgICA8L29wZXJhbmQ+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iR2FwIERheXMgSW4gUGVyaW9kIiBjb250ZXh0PSJQYXRpZW50IiBhY2Nlc3NMZXZlbD0iUHVibGljIiB4c2k6dHlwZT0iRnVuY3Rpb25EZWYiPg0KICAgICAgICAgPGV4cHJlc3Npb24geHNpOnR5cGU9IkNhc2UiPg0KICAgICAgICAgICAgPGNvbXBhcmFuZCB4c2k6dHlwZT0iQ291bnQiPg0KICAgICAgICAgICAgICAgPHNvdXJjZSBuYW1lPSJQZXJpb2RzIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgPC9jb21wYXJhbmQ+DQogICAgICAgICAgICA8Y2FzZUl0ZW0+DQogICAgICAgICAgICAgICA8d2hlbiB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjEiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICA8dGhlbiB4c2k6dHlwZT0iSWYiPg0KICAgICAgICAgICAgICAgICAgPGNvbmRpdGlvbiBhc1R5cGU9InQ6Qm9vbGVhbiIgeHNpOnR5cGU9IkFzIj4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHByZWNpc2lvbj0iRGF5IiB4c2k6dHlwZT0iU3RhcnRzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbmRleGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZHMiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjAiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC9jb25kaXRpb24+DQogICAgICAgICAgICAgICAgICA8dGhlbiBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkRpZmZlcmVuY2VCZXR3ZWVuIj4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFbmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkluZGV4ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGVyaW9kcyIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB2YWx1ZT0iMCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFbmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGFydGljaXBhdGlvblBlcmlvZCIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgIDwvdGhlbj4NCiAgICAgICAgICAgICAgICAgIDxlbHNlIHhzaTp0eXBlPSJJZiI+DQogICAgICAgICAgICAgICAgICAgICA8Y29uZGl0aW9uIGFzVHlwZT0idDpCb29sZWFuIiB4c2k6dHlwZT0iQXMiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJFbmRzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbmRleGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZHMiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjAiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9jb25kaXRpb24+DQogICAgICAgICAgICAgICAgICAgICA8dGhlbiBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkRpZmZlcmVuY2VCZXR3ZWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IlN0YXJ0Ij4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbmRleGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZHMiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjAiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICA8L3RoZW4+DQogICAgICAgICAgICAgICAgICAgICA8ZWxzZSB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgeHNpOnR5cGU9Ik1heFZhbHVlIi8+DQogICAgICAgICAgICAgICAgICA8L2Vsc2U+DQogICAgICAgICAgICAgICA8L3RoZW4+DQogICAgICAgICAgICA8L2Nhc2VJdGVtPg0KICAgICAgICAgICAgPGNhc2VJdGVtPg0KICAgICAgICAgICAgICAgPHdoZW4gdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSIyIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgPHRoZW4geHNpOnR5cGU9IklmIj4NCiAgICAgICAgICAgICAgICAgIDxjb25kaXRpb24gYXNUeXBlPSJ0OkJvb2xlYW4iIHhzaTp0eXBlPSJBcyI+DQogICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iQW5kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHByZWNpc2lvbj0iRGF5IiB4c2k6dHlwZT0iU3RhcnRzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbmRleGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZHMiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjAiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgcHJlY2lzaW9uPSJEYXkiIHhzaTp0eXBlPSJFbmRzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJJbmRleGVyIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBlcmlvZHMiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjEiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC9jb25kaXRpb24+DQogICAgICAgICAgICAgICAgICA8dGhlbiBwcmVjaXNpb249IkRheSIgeHNpOnR5cGU9IkRpZmZlcmVuY2VCZXR3ZWVuIj4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFbmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgeHNpOnR5cGU9IkluZGV4ZXIiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGVyaW9kcyIgeHNpOnR5cGU9Ik9wZXJhbmRSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB2YWx1ZT0iMCIgeHNpOnR5cGU9IkxpdGVyYWwiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSW5kZXhlciI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJQZXJpb2RzIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSIxIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgPC90aGVuPg0KICAgICAgICAgICAgICAgICAgPGVsc2UgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHhzaTp0eXBlPSJNYXhWYWx1ZSIvPg0KICAgICAgICAgICAgICAgPC90aGVuPg0KICAgICAgICAgICAgPC9jYXNlSXRlbT4NCiAgICAgICAgICAgIDxlbHNlIHZhbHVlVHlwZT0idDpJbnRlZ2VyIiB4c2k6dHlwZT0iTWF4VmFsdWUiLz4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBhcnRpY2lwYXRpb25QZXJpb2QiPg0KICAgICAgICAgICAgPG9wZXJhbmRUeXBlU3BlY2lmaWVyIHhzaTp0eXBlPSJJbnRlcnZhbFR5cGVTcGVjaWZpZXIiPg0KICAgICAgICAgICAgICAgPHBvaW50VHlwZSBuYW1lPSJ0OkRhdGVUaW1lIiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+DQogICAgICAgICAgICA8L29wZXJhbmRUeXBlU3BlY2lmaWVyPg0KICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGVyaW9kcyI+DQogICAgICAgICAgICA8b3BlcmFuZFR5cGVTcGVjaWZpZXIgeHNpOnR5cGU9Ikxpc3RUeXBlU3BlY2lmaWVyIj4NCiAgICAgICAgICAgICAgIDxlbGVtZW50VHlwZSB4c2k6dHlwZT0iSW50ZXJ2YWxUeXBlU3BlY2lmaWVyIj4NCiAgICAgICAgICAgICAgICAgIDxwb2ludFR5cGUgbmFtZT0idDpEYXRlVGltZSIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgICAgICAgICAgPC9lbGVtZW50VHlwZT4NCiAgICAgICAgICAgIDwvb3BlcmFuZFR5cGVTcGVjaWZpZXI+DQogICAgICAgICA8L29wZXJhbmQ+DQogICAgICA8L2RlZj4NCiAgICAgIDxkZWYgbmFtZT0iSXMgQ29udGludW91c2x5IEVucm9sbGVkIEluIFBlcmlvZCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIgeHNpOnR5cGU9IkZ1bmN0aW9uRGVmIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJMZXNzT3JFcXVhbCI+DQogICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJHYXAgRGF5cyBJbiBQZXJpb2QiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJFbnJvbGxtZW50UGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUGFydGljaXBhdGlvbiBJbiBQZXJpb2QiIHhzaTp0eXBlPSJGdW5jdGlvblJlZiI+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJFbnJvbGxtZW50UGVyaW9kIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iQWxsb3dlZEdhcERheXMiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICA8b3BlcmFuZCBuYW1lPSJFbnJvbGxtZW50UGVyaW9kIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciB4c2k6dHlwZT0iSW50ZXJ2YWxUeXBlU3BlY2lmaWVyIj4NCiAgICAgICAgICAgICAgIDxwb2ludFR5cGUgbmFtZT0idDpEYXRlVGltZSIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgICAgICAgPC9vcGVyYW5kVHlwZVNwZWNpZmllcj4NCiAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDxvcGVyYW5kIG5hbWU9IkFsbG93ZWRHYXBEYXlzIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciBuYW1lPSJ0OkludGVnZXIiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4NCiAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgIDwvZGVmPg0KICAgICAgPGRlZiBuYW1lPSJJcyBFbnJvbGxlZCIgY29udGV4dD0iUGF0aWVudCIgYWNjZXNzTGV2ZWw9IlB1YmxpYyIgeHNpOnR5cGU9IkZ1bmN0aW9uRGVmIj4NCiAgICAgICAgIDxleHByZXNzaW9uIHhzaTp0eXBlPSJDYXNlIj4NCiAgICAgICAgICAgIDxjYXNlSXRlbT4NCiAgICAgICAgICAgICAgIDx3aGVuIHhzaTp0eXBlPSJJc051bGwiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUHJvZHVjdExpbmUiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICA8L3doZW4+DQogICAgICAgICAgICAgICA8dGhlbiB2YWx1ZVR5cGU9InQ6Qm9vbGVhbiIgdmFsdWU9InRydWUiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICA8L2Nhc2VJdGVtPg0KICAgICAgICAgICAgPGVsc2UgeHNpOnR5cGU9IkFuZCI+DQogICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJJcyBFbnJvbGxlZCBPbiBEYXRlIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPg0KICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iUHJvZHVjdExpbmUiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJJbmRleERhdGUiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iQWxsVHJ1ZSI+DQogICAgICAgICAgICAgICAgICA8c291cmNlIHhzaTp0eXBlPSJRdWVyeSI+DQogICAgICAgICAgICAgICAgICAgICA8c291cmNlIGFsaWFzPSJFbnJvbGxtZW50UGVyaW9kIj4NCiAgICAgICAgICAgICAgICAgICAgICAgIDxleHByZXNzaW9uIG5hbWU9IkVucm9sbG1lbnQgUGVyaW9kcyIgeHNpOnR5cGU9IkZ1bmN0aW9uUmVmIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlBhcnRpY2lwYXRpb25QZXJpb2QiIHhzaTp0eXBlPSJPcGVyYW5kUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICA8L2V4cHJlc3Npb24+DQogICAgICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgIDxyZXR1cm4+DQogICAgICAgICAgICAgICAgICAgICAgICA8ZXhwcmVzc2lvbiBuYW1lPSJJcyBDb250aW51b3VzbHkgRW5yb2xsZWQgSW4gUGVyaW9kIiB4c2k6dHlwZT0iRnVuY3Rpb25SZWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iRW5yb2xsbWVudFBlcmlvZCIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB4c2k6dHlwZT0iSWYiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvbmRpdGlvbiBhc1R5cGU9InQ6Qm9vbGVhbiIgeHNpOnR5cGU9IkFzIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJHcmVhdGVyT3JFcXVhbCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBwcmVjaXNpb249Ik1vbnRoIiB4c2k6dHlwZT0iRHVyYXRpb25CZXR3ZWVuIj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJTdGFydCI+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCBuYW1lPSJFbnJvbGxtZW50UGVyaW9kIiB4c2k6dHlwZT0iQWxpYXNSZWYiLz4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcGVyYW5kIHhzaTp0eXBlPSJFbmQiPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wZXJhbmQgbmFtZT0iRW5yb2xsbWVudFBlcmlvZCIgeHNpOnR5cGU9IkFsaWFzUmVmIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3BlcmFuZCB2YWx1ZVR5cGU9InQ6SW50ZWdlciIgdmFsdWU9IjYiIHhzaTp0eXBlPSJMaXRlcmFsIi8+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NvbmRpdGlvbj4NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVuIG5hbWU9IkFsbG93ZWRHYXBEYXlzIiB4c2k6dHlwZT0iT3BlcmFuZFJlZiIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGVsc2UgdmFsdWVUeXBlPSJ0OkludGVnZXIiIHZhbHVlPSIwIiB4c2k6dHlwZT0iTGl0ZXJhbCIvPg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgICAgICAgICAgICAgICAgPC9leHByZXNzaW9uPg0KICAgICAgICAgICAgICAgICAgICAgPC9yZXR1cm4+DQogICAgICAgICAgICAgICAgICA8L3NvdXJjZT4NCiAgICAgICAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgICAgIDwvZWxzZT4NCiAgICAgICAgIDwvZXhwcmVzc2lvbj4NCiAgICAgICAgIDxvcGVyYW5kIG5hbWU9IlByb2R1Y3RMaW5lIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciBuYW1lPSJ0OlN0cmluZyIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgICAgPC9vcGVyYW5kPg0KICAgICAgICAgPG9wZXJhbmQgbmFtZT0iSW5kZXhEYXRlIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciBuYW1lPSJ0OkRhdGVUaW1lIiB4c2k6dHlwZT0iTmFtZWRUeXBlU3BlY2lmaWVyIi8+DQogICAgICAgICA8L29wZXJhbmQ+DQogICAgICAgICA8b3BlcmFuZCBuYW1lPSJQYXJ0aWNpcGF0aW9uUGVyaW9kIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciB4c2k6dHlwZT0iSW50ZXJ2YWxUeXBlU3BlY2lmaWVyIj4NCiAgICAgICAgICAgICAgIDxwb2ludFR5cGUgbmFtZT0idDpEYXRlVGltZSIgeHNpOnR5cGU9Ik5hbWVkVHlwZVNwZWNpZmllciIvPg0KICAgICAgICAgICAgPC9vcGVyYW5kVHlwZVNwZWNpZmllcj4NCiAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgICAgIDxvcGVyYW5kIG5hbWU9IkFsbG93ZWRHYXBEYXlzIj4NCiAgICAgICAgICAgIDxvcGVyYW5kVHlwZVNwZWNpZmllciBuYW1lPSJ0OkludGVnZXIiIHhzaTp0eXBlPSJOYW1lZFR5cGVTcGVjaWZpZXIiLz4NCiAgICAgICAgIDwvb3BlcmFuZD4NCiAgICAgIDwvZGVmPg0KICAgPC9zdGF0ZW1lbnRzPg0KPC9saWJyYXJ5Pg0K"
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-participation-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-pvs-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-pvs-logic/_history/3</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"11\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1326</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1325</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1024</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1439</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1440</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1448</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1449</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>DiagnosticReport</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1139</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Procedure</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1447</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1439</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Immunization</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>vaccineCode</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>2.16.840.1.113883.3.464.1004.1440</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">/*\nPneumococcal Vaccination Status of Older Adults (PVS)\n*/library PVS_FHIR version '1.0.0'\n\n//using FHIR version '3.0.1'\r\n\r\nusing FHIR version '3.0.0'\n\n/*\nMeasure Description\nThe percentage of members 65 years of age and older who have ever received\nthe recommended series of pneumococcal vaccines: 13-valent pneumococcal\nconjugate vaccine (PCV13) and 23-valent pneumococcal polysaccharide vaccine (PPSV23).\n*/\n\n// valueset \"Anaphylactic Reaction Due to Vaccine\": 'urn:oid:2.16.840.1.113883.3.464.1003.199.12.1027' // Grouping Value Set\n// valueset \"Cerebrospinal Fluid Leaks\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Functional or Aplastic Anemia\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Disorders of the Immune System\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Pneumococcal Conjugate Vaccine 13\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Pneumococcal Conjugate Vaccine 23\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n// valueset \"Bone Marrow Transplant\": 'urn:oid:2.16.840.1.113883.3.666.5.336' // Grouping Value Set\n// valueset \"Chemotherapy\": 'urn:oid:2.16.840.1.113762.1.4.1047.451' // Grouping Value Set\n// valueset \"Cochlear Implants\": 'urn:oid:1.1.1.1' // User Defined QDM Value Set\n\n// update\r\n\r\nvalueset \"Anaphylactic Reaction Due to Serum\": '2.16.840.1.113883.3.464.1004.1023'\r\nvalueset \"Anaphylactic Reaction Due to Vaccine\": '2.16.840.1.113883.3.464.1004.1024'\r\nvalueset \"Bone Marrow Transplant\": '2.16.840.1.113883.3.464.1004.1325'\r\nvalueset \"Bone Marrow Transplant SNOMED\": '2.16.840.1.113883.3.464.1004.1442'\r\nvalueset \"Cerebrospinal Fluid Leaks\": '2.16.840.1.113883.3.464.1004.1448'\r\nvalueset \"Chemotherapy\": '2.16.840.1.113883.3.464.1004.1326'\r\nvalueset \"Chemotherapy SNOMED/CPT\": '2.16.840.1.113883.3.464.1004.1441'\r\nvalueset \"Cochlear Implants\": '2.16.840.1.113883.3.464.1004.1447'\r\nvalueset \"Disorders of the Immune System\": '2.16.840.1.113883.3.464.1004.1139'\r\nvalueset \"Functional or Aplastic Anemia\": '2.16.840.1.113883.3.464.1004.1449'\n// valueset \"Hospice\": '2.16.840.1.113883.3.464.1004.1418'\r\nvalueset \"Pneumococcal Conjugate Vaccine 13\": '2.16.840.1.113883.3.464.1004.1439'\r\nvalueset \"Pneumococcal Conjugate Vaccine 23\": '2.16.840.1.113883.3.464.1004.1440'\n\n/*\nThis library has an explicit parameter which is the measurement year.\nWhile the actual parameter's type accepts all intervals, this library\nexpects it will only be given arguments corresponding exactly to one whole\ncalendar year, and it will not behave properly otherwise; 2017 for example:\nInterval[DateTime(2017,1,1,0,0,0,0), DateTime(2018,1,1,0,0,0,0))\n*/\r\n\r\nparameter \"Measurement Period\" Interval&lt;DateTime&gt;\n\n/*\nThis library evaluates with respect to exactly 1 candidate patient at a time,\nthat patient being given by the special context parameter Patient.\n*/\r\n\r\ncontext Patient\n\n/*\nInitial Population\nProduct lines -- Commercial, Medicaid, Medicare (report each product line separately).\n*/\r\n\r\ndefine \"Initial Population\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 65\n\n/*\nExclusions\n*/\r\n\r\ndefine \"Denominator Exclusion\":\r\n  exists ( \"Chemotherapy and Bone Marrow Transplant Procedures\" ProcedureUnion\r\n      where ProcedureUnion.status.value in { 'in-progress', 'completed' }\r\n        and PeriodToIntervalOfDT(ProcedureUnion.performed)overlaps day of \"Measurement Period\"\r\n  )\r\n    or exists ( [DiagnosticReport: \"Anaphylactic Reaction Due to Vaccine\"] ReactionToVaccine\r\n        where ReactionToVaccine.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n          and start of PeriodToIntervalOfDT(ReactionToVaccine.effective)before day of \"Measurement Period\"\r\n    )\r\n\r\ndefine \"Chemotherapy and Bone Marrow Transplant Procedures\":\r\n  [Procedure: \"Chemotherapy\"]\r\n    union [Procedure: \"Bone Marrow Transplant\"]\n\n/*\nDenominators and Numerators\n*/\r\n\r\ndefine \"Denominator\":\r\n  \"Initial Population\"\n\n// TODO: The Numerator logic in the spec appears to have contradictions\n// with the intent of the spec, such as AND meaning union vs intersection;\n// this logic should be given another review.\r\n\r\ndefine \"Numerator\":\r\n  \"Initial Population\"\r\n    and ( \"PVC13 After Age 60 And Then PVC23 After 12 More Months\"\r\n        or \"PVC13 After Age 2 And Then PVC23 After 8 More Weeks\"\r\n    )\r\n\r\ndefine \"PVC13 After Age 60 And Then PVC23 After 12 More Months\":\r\n  exists ( \"Pneumococcal Vaccine 13 After Age 60\" V13\r\n      with \"Pneumococcal Vaccine 23 After Age 60\" V23\r\n        such that months between V13.\"date\".value and V23.\"date\".value &gt;= 12\r\n  )\r\n\r\ndefine \"Pneumococcal Vaccine 13 After Age 60\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 13\"] V13\r\n    where V13.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V13.\"date\".value)&gt;= 60\r\n\r\ndefine \"Pneumococcal Vaccine 23 After Age 60\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 23\"] V23\r\n    where V23.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V23.\"date\".value)&gt;= 60\r\n\r\ndefine \"PVC13 After Age 2 And Then PVC23 After 8 More Weeks\":\r\n  \"Immunocompromised Diagnoses or Cochlear Implants\"\r\n    and exists ( \"Pneumococcal Vaccine 13 After Age 2\" V13\r\n        with \"Pneumococcal Vaccine 23 After Age 2\" V23\r\n          such that weeks between V13.\"date\".value and V23.\"date\".value &gt;= 8\r\n    )\r\n\r\ndefine \"Pneumococcal Vaccine 13 After Age 2\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 13\"] V13\r\n    where V13.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V13.\"date\".value)&gt;= 2\r\n\r\ndefine \"Pneumococcal Vaccine 23 After Age 2\":\r\n  [Immunization: \"Pneumococcal Conjugate Vaccine 23\"] V23\r\n    where V23.status.value in { 'in-progress', 'completed' }\r\n      and AgeInYearsAt(V23.\"date\".value)&gt;= 2\r\n\r\ndefine \"Immunocompromised Diagnoses or Cochlear Implants\":\r\n  exists ( \"Immunocompromised Diagnoses Overlapping Measurement Period\" )\r\n    or exists ( \"Cochlear Implants on or Before End of Measurement Period\" )\r\n\r\ndefine \"Immunocompromised Diagnoses Overlapping Measurement Period\":\r\n  distinct ( [DiagnosticReport: \"Cerebrospinal Fluid Leaks\"]\r\n    union [DiagnosticReport: \"Functional or Aplastic Anemia\"]\r\n    union [DiagnosticReport: \"Disorders of the Immune System\"] ) D\r\n    where D.status.value in { 'preliminary', 'final', 'amended', 'corrected', 'appended' }\r\n      and PeriodToIntervalOfDT(D.effective)overlaps day of \"Measurement Period\"\r\n\r\ndefine \"Cochlear Implants on or Before End of Measurement Period\":\r\n  [Procedure: \"Cochlear Implants\"] CochlearImplant\r\n    where CochlearImplant.status.value in { 'in-progress', 'completed' }\r\n      and start of PeriodToIntervalOfDT(CochlearImplant.performed)same day or before \r\n      end of \"Measurement Period\"\n\n/*\nStratifiers\n*/\r\n\r\ndefine \"Stratifier 1\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[65, 74]\r\n\r\ndefine \"Stratifier 2\":\r\n  AgeInYearsAt(start of \"Measurement Period\")in Interval[75, 84]\r\n\r\ndefine \"Stratifier 3\":\r\n  AgeInYearsAt(start of \"Measurement Period\")&gt;= 85\n\n/*\nUtility Functions\n*/\r\n\r\ndefine function PeriodToIntervalOfDT(value FHIR.Period):\r\n  Interval[value.\"start\".value, value.\"end\".value]\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "version": "1.0.0",
        "name": "PVS_FHIR",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "dataRequirement": [
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1326"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1325"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1024"
              }
            ]
          },
          {
            "type": "Immunization",
            "codeFilter": [
              {
                "path": "vaccineCode",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1439"
              }
            ]
          },
          {
            "type": "Immunization",
            "codeFilter": [
              {
                "path": "vaccineCode",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1440"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1448"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1449"
              }
            ]
          },
          {
            "type": "DiagnosticReport",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1139"
              }
            ]
          },
          {
            "type": "Procedure",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1447"
              }
            ]
          },
          {
            "type": "Immunization",
            "codeFilter": [
              {
                "path": "vaccineCode",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1439"
              }
            ]
          },
          {
            "type": "Immunization",
            "codeFilter": [
              {
                "path": "vaccineCode",
                "valueSetString": "2.16.840.1.113883.3.464.1004.1440"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": ""
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-pvs-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Library",
        "id": "library-wcc-aba-logic",
        "text": {
          "status": "generated",
          "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"><table class=\"grid dict\"><tr><th scope=\"row\"><b>Id: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Library/library-wcc-aba-logic/_history/5</td></tr><tr><th scope=\"row\"><b>Type: </b></th><td style=\"padding-right: 25px;\"><span><br/><span><span style=\"padding-left: 25px;\"><b>code: </b><span>logic-library</span></span></span></span></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Identifier: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>system: </b><span></span><br/><b>value: </b><span>WCCABA</span></td></tr><tr><th scope=\"row\"><b>Version: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">1.0.0</td></tr><tr><th scope=\"row\"><b>Title: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">Cohort Definition for Adult BMI Assessment Measure</td></tr><tr><th scope=\"row\"><b>Status: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\">active</td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"1\" scope=\"row\"><b>Related: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>depends-on</span></p><p style=\"margin-bottom: 5px;\"><b>Resource: </b><br/><span><span style=\"padding-left: 25px;\"><b>reference: </b><span>Library/FHIRHelpers/_history/1</span></span></span></p></td></tr><tr style=\"vertical-align: top;\"><th rowspan=\"4\" scope=\"row\"><b>Data Requirements: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>BMI Percentile</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>BMI Value</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>Body Height</span></span></p></div></td></tr><tr style=\"vertical-align: top;\"><td style=\"padding-left: 25px; padding-right: 25px;\"><div xmlns=\"http://www.w3.org/1999/xhtml\"><p style=\"margin-bottom: 5px;\"><b>type: </b><span>Observation</span></p><p style=\"margin-bottom: 5px;\"><b>code filter:</b><br/><span style=\"padding-left: 25px;\"><b>path: </b><span>code</span></span><br/><span style=\"padding-left: 25px;\"><b>valueset: </b><span>Body Weight</span></span></p></div></td></tr>    <!-- Filter down to human readable content --><tr style=\"vertical-align: top;\"><th scope=\"row\"><b>Content: </b></th><td style=\"padding-left: 25px; padding-right: 25px;\"><b>type: </b><span>text/cql</span></td></tr><tr><td colspan=\"2\" style=\"padding-left: 25px; padding-right: 25px;\"><pre><code class=\"language-cql\">library WCCABA version '1'\r\n\r\nusing FHIR version '3.0.0'\r\n\r\ninclude FHIRHelpers version '3.0.0' called FHIRHelpers\n\n/*\n\nBMI Percent\t WCC, ABA\t BMI percentile measurements\n\"BMI Percentile\"\nICD10CM\n2 years\n\nBody Mass Index (BMI) Value\t ABA\t value identifying body mass\n\"BMI Value\"\nICD10CM\n2 years\n\nHeight\tABA, WCC\tValue of height plus units, ie 70 inches or 5 feet 10 inches\nNo value set, but must be retrieved for ABA compliance data to be used in a standard supplmenetal data source according to NCQA General Guideline 34 under the heading 'Required Data Elements'\n2 years\n\nWeight\tABA, WCC\tValue of weight plus units, ie 85 kg or 200 lbs\nNo value set, but must be retrieved for ABA compliance data to be used in a standard supplmenetal data source according to NCQA General Guideline 34 under the heading 'Required Data Elements'\n2 years\n\nUses the DAF Profiles for Body Height/Body Weight\n*/\r\n\r\nvalueset \"BMI Percentile\": 'BMI Percentile'\r\nvalueset \"BMI Value\": 'BMI Value'\r\nvalueset \"Body Height\": 'Body Height' // LOINC 8302-2\r\nvalueset \"Body Weight\": 'Body Weight' // LOINC 3141-9\r\n\r\nparameter MeasurementPeriod Interval&lt;DateTime&gt;\r\n\r\ncontext Patient\r\n\r\ndefine \"Lookback Interval Two Years\":\r\n  Interval[start of MeasurementPeriod - 2 years, \r\n  end of MeasurementPeriod]\n\n// TODO: Need to verify the demographic here\r\n\r\ndefine \"In Demographic\":\r\n  AgeInYearsAt(start of MeasurementPeriod)&gt;= 18\n\n/* BMI Percent\t BMI percentile measurements */\r\n\r\ndefine \"BMI Percent\":\r\n  [Observation: \"BMI Percentile\"] P\r\n    where P.status in { 'final', 'amended' }\r\n      and P.effective during day of \"Lookback Interval Two Years\"\n\n/* Body Mass Index (BMI) Value\t  value identifying body mass */\r\n\r\ndefine \"Body Mass Index (BMI) Value\":\r\n  [Observation: \"BMI Value\"] V\r\n    where V.status in { 'final', 'amended' }\r\n      and V.effective during day of \"Lookback Interval Two Years\"\n\n/* Height */\r\n\r\ndefine \"Height\":\r\n  [Observation: \"Body Height\"] O\r\n    where O.status in { 'final', 'amended' }\r\n      and O.effective during day of \"Lookback Interval Two Years\"\n\n/* Body Weight */\r\n\r\ndefine \"Weight\":\r\n  [Observation: \"Body Weight\"] O\r\n    where O.status in { 'final', 'amended' }\r\n      and O.effective during day of \"Lookback Interval Two Years\"\r\n</code></pre>\n                    \n                    \n                </td>\n            </tr>\n        \n        \n            \n            \n        \n    </table>\n</div>"
        },
        "identifier": [
          {
            "use": "official",
            "value": "WCCABA"
          }
        ],
        "version": "1.0.0",
        "name": "WCCABA_FHIR",
        "title": "Cohort Definition for Adult BMI Assessment Measure",
        "status": "active",
        "experimental": true,
        "type": {
          "coding": [
            {
              "code": "logic-library"
            }
          ]
        },
        "date": "2017-05-05",
        "publisher": "National Committee for Quality Assurance",
        "copyright": "© 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "relatedArtifact": [
          {
            "type": "depends-on",
            "resource": {
              "reference": "Library/library-fhir-helpers"
            }
          }
        ],
        "dataRequirement": [
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "BMI Percentile"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "BMI Value"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "Body Height"
              }
            ]
          },
          {
            "type": "Observation",
            "codeFilter": [
              {
                "path": "code",
                "valueSetString": "Body Weight"
              }
            ]
          }
        ],
        "content": [
          {
            "contentType": "application/elm+xml",
            "data": ""
          },
          {
            "contentType": "text/cql",
            "data": "bGlicmFyeSBXQ0NBQkEgdmVyc2lvbiAnMScNCg0KdXNpbmcgRkhJUiB2ZXJzaW9uICczLjAuMCcNCg0KaW5jbHVkZSBGSElSSGVscGVycyB2ZXJzaW9uICczLjAuMCcgY2FsbGVkIEZISVJIZWxwZXJzDQoNCi8qDQoNCkJNSSBQZXJjZW50CSBXQ0MsIEFCQQkgQk1JIHBlcmNlbnRpbGUgbWVhc3VyZW1lbnRzDQoiQk1JIFBlcmNlbnRpbGUiDQpJQ0QxMENNDQoyIHllYXJzDQoNCkJvZHkgTWFzcyBJbmRleCAoQk1JKSBWYWx1ZQkgQUJBCSB2YWx1ZSBpZGVudGlmeWluZyBib2R5IG1hc3MNCiJCTUkgVmFsdWUiDQpJQ0QxMENNDQoyIHllYXJzDQoNCkhlaWdodAlBQkEsIFdDQwlWYWx1ZSBvZiBoZWlnaHQgcGx1cyB1bml0cywgaWUgNzAgaW5jaGVzIG9yIDUgZmVldCAxMCBpbmNoZXMNCk5vIHZhbHVlIHNldCwgYnV0IG11c3QgYmUgcmV0cmlldmVkIGZvciBBQkEgY29tcGxpYW5jZSBkYXRhIHRvIGJlIHVzZWQgaW4gYSBzdGFuZGFyZCBzdXBwbG1lbmV0YWwgZGF0YSBzb3VyY2UgYWNjb3JkaW5nIHRvIE5DUUEgR2VuZXJhbCBHdWlkZWxpbmUgMzQgdW5kZXIgdGhlIGhlYWRpbmcgJ1JlcXVpcmVkIERhdGEgRWxlbWVudHMnDQoyIHllYXJzDQoNCldlaWdodAlBQkEsIFdDQwlWYWx1ZSBvZiB3ZWlnaHQgcGx1cyB1bml0cywgaWUgODUga2cgb3IgMjAwIGxicw0KTm8gdmFsdWUgc2V0LCBidXQgbXVzdCBiZSByZXRyaWV2ZWQgZm9yIEFCQSBjb21wbGlhbmNlIGRhdGEgdG8gYmUgdXNlZCBpbiBhIHN0YW5kYXJkIHN1cHBsbWVuZXRhbCBkYXRhIHNvdXJjZSBhY2NvcmRpbmcgdG8gTkNRQSBHZW5lcmFsIEd1aWRlbGluZSAzNCB1bmRlciB0aGUgaGVhZGluZyAnUmVxdWlyZWQgRGF0YSBFbGVtZW50cycNCjIgeWVhcnMNCg0KVXNlcyB0aGUgREFGIFByb2ZpbGVzIGZvciBCb2R5IEhlaWdodC9Cb2R5IFdlaWdodA0KKi8NCg0KdmFsdWVzZXQgIkJNSSBQZXJjZW50aWxlIjogJ0JNSSBQZXJjZW50aWxlJw0KdmFsdWVzZXQgIkJNSSBWYWx1ZSI6ICdCTUkgVmFsdWUnDQp2YWx1ZXNldCAiQm9keSBIZWlnaHQiOiAnQm9keSBIZWlnaHQnIC8vIExPSU5DIDgzMDItMg0KdmFsdWVzZXQgIkJvZHkgV2VpZ2h0IjogJ0JvZHkgV2VpZ2h0JyAvLyBMT0lOQyAzMTQxLTkNCg0KcGFyYW1ldGVyIE1lYXN1cmVtZW50UGVyaW9kIEludGVydmFsPERhdGVUaW1lPg0KDQpjb250ZXh0IFBhdGllbnQNCg0KZGVmaW5lICJMb29rYmFjayBJbnRlcnZhbCBUd28gWWVhcnMiOg0KICBJbnRlcnZhbFtzdGFydCBvZiBNZWFzdXJlbWVudFBlcmlvZCAtIDIgeWVhcnMsIGVuZCBvZiBNZWFzdXJlbWVudFBlcmlvZF0NCg0KLy8gVE9ETzogTmVlZCB0byB2ZXJpZnkgdGhlIGRlbW9ncmFwaGljIGhlcmUNCmRlZmluZSAiSW4gRGVtb2dyYXBoaWMiOg0KICAgIEFnZUluWWVhcnNBdChzdGFydCBvZiBNZWFzdXJlbWVudFBlcmlvZCkgPj0gMTgNCg0KLyogQk1JIFBlcmNlbnQJIEJNSSBwZXJjZW50aWxlIG1lYXN1cmVtZW50cyAqLw0KDQpkZWZpbmUgIkJNSSBQZXJjZW50IjoNCiAgW09ic2VydmF0aW9uOiAiQk1JIFBlcmNlbnRpbGUiXSBQDQogICAgd2hlcmUgUC5zdGF0dXMgaW4geyAnZmluYWwnLCAnYW1lbmRlZCcgfQ0KICAgICAgYW5kIFAuZWZmZWN0aXZlIGR1cmluZyBkYXkgb2YgIkxvb2tiYWNrIEludGVydmFsIFR3byBZZWFycyINCg0KLyogQm9keSBNYXNzIEluZGV4IChCTUkpIFZhbHVlCSAgdmFsdWUgaWRlbnRpZnlpbmcgYm9keSBtYXNzICovDQoNCmRlZmluZSAiQm9keSBNYXNzIEluZGV4IChCTUkpIFZhbHVlIjoNCiAgW09ic2VydmF0aW9uOiAiQk1JIFZhbHVlIl0gVg0KICAgIHdoZXJlIFYuc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnIH0NCiAgICAgIGFuZCBWLmVmZmVjdGl2ZSBkdXJpbmcgZGF5IG9mICJMb29rYmFjayBJbnRlcnZhbCBUd28gWWVhcnMiDQoNCi8qIEhlaWdodCAqLw0KDQpkZWZpbmUgIkhlaWdodCI6DQogIFtPYnNlcnZhdGlvbjogIkJvZHkgSGVpZ2h0Il0gTw0KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnIH0NCiAgICAgIGFuZCBPLmVmZmVjdGl2ZSBkdXJpbmcgZGF5IG9mICJMb29rYmFjayBJbnRlcnZhbCBUd28gWWVhcnMiDQoNCi8qIEJvZHkgV2VpZ2h0ICovDQpkZWZpbmUgIldlaWdodCI6DQogIFtPYnNlcnZhdGlvbjogIkJvZHkgV2VpZ2h0Il0gTw0KICAgIHdoZXJlIE8uc3RhdHVzIGluIHsgJ2ZpbmFsJywgJ2FtZW5kZWQnIH0NCiAgICAgIGFuZCBPLmVmZmVjdGl2ZSBkdXJpbmcgZGF5IG9mICJMb29rYmFjayBJbnRlcnZhbCBUd28gWWVhcnMiDQo="
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Library/library-wcc-aba-logic"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-asf",
        "status": "active",
        "experimental": true,
        "library": [
          {
            "reference": "Library/library-asf-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "ASF-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 1"
              },
              {
                "identifier": {
                  "value": "denominator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 1"
              },
              {
                "identifier": {
                  "value": "numerator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 2"
              },
              {
                "identifier": {
                  "value": "denominator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 2"
              }
            ],
            "stratifier": [
              {
                "identifier": {
                  "value": "stratifier 1"
                },
                "criteria": "Stratifier 1"
              },
              {
                "identifier": {
                  "value": "stratifier 2"
                },
                "criteria": "Stratifier 2"
              },
              {
                "identifier": {
                  "value": "stratifier 3"
                },
                "criteria": "Stratifier 3"
              },
              {
                "identifier": {
                  "value": "stratifier 4"
                },
                "criteria": "Stratifier 4"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-asf"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-bcs",
        "text": {
          "status": "generated"
        },
        "identifier": [
          {
            "use": "official",
            "system": "http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/payer-extract",
            "value": "BCS"
          }
        ],
        "version": "1.0.0",
        "title": "Breast Cancer Screening Cohort Definition",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "description": "Breast Cancer Screening Cohort Definition",
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "library": [
          {
            "reference": "Library/library-bcs-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "BCS-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator"
              },
              {
                "identifier": {
                  "value": "denominator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-bcs"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-cbp",
        "text": {
          "status": "generated"
        },
        "identifier": [
          {
            "use": "official",
            "system": "http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/payer-extract",
            "value": "CBP"
          }
        ],
        "version": "1.0.0",
        "title": "Controlling High Blood Pressure Cohort Definition",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "description": "Controlling High Blood Pressure Cohort Definition",
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "library": [
          {
            "reference": "Library/library-cbp-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "cohort"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "CBP-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population-identifier"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "CBP.&quot;In Demographic&quot;"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-cbp"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-ccs",
        "text": {
          "status": "generated"
        },
        "identifier": [
          {
            "use": "official",
            "system": "http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/payer-extract",
            "value": "CCS"
          }
        ],
        "version": "1.0.0",
        "title": "Cervical Cancer Screening. Cohort Definition",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "description": "Cervical Cancer Screening. Cohort Definition",
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "library": [
          {
            "reference": "Library/library-ccs-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "CCS-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator"
              },
              {
                "identifier": {
                  "value": "denominator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-ccs"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-cdc",
        "text": {
          "status": "generated"
        },
        "identifier": [
          {
            "use": "official",
            "system": "http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/payer-extract",
            "value": "CDC"
          }
        ],
        "version": "1.0.0",
        "title": "Comprehensive Diabetes Care Cohort Definition",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "description": "Comprehensive Diabetes Care Cohort Definition",
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "library": [
          {
            "reference": "Library/library-cdc-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "cohort"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "CDC-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population-identifier"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "CDC.&quot;In Demographic&quot;"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-cdc"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-col",
        "text": {
          "status": "generated"
        },
        "identifier": [
          {
            "use": "official",
            "system": "http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/payer-extract",
            "value": "COL"
          }
        ],
        "version": "1.0.0",
        "title": "Colorectal Cancer Screening. Cohort Definition",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "description": "Colorectal Cancer Screening. Cohort Definition",
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "library": [
          {
            "reference": "Library/library-col-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "COL-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator"
              },
              {
                "identifier": {
                  "value": "denominator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-col"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-dms",
        "status": "active",
        "experimental": true,
        "library": [
          {
            "reference": "Library/library-dms-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "DMS-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 1"
              },
              {
                "identifier": {
                  "value": "denominator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 1"
              },
              {
                "identifier": {
                  "value": "numerator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 2"
              },
              {
                "identifier": {
                  "value": "denominator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 2"
              },
              {
                "identifier": {
                  "value": "numerator 3"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 3"
              },
              {
                "identifier": {
                  "value": "denominator 3"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 3"
              }
            ],
            "stratifier": [
              {
                "identifier": {
                  "value": "stratifier 1"
                },
                "criteria": "Stratifier 1"
              },
              {
                "identifier": {
                  "value": "stratifier 2"
                },
                "criteria": "Stratifier 2"
              },
              {
                "identifier": {
                  "value": "stratifier 3"
                },
                "criteria": "Stratifier 3"
              },
              {
                "identifier": {
                  "value": "stratifier 4"
                },
                "criteria": "Stratifier 4"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-dms"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-drr",
        "status": "active",
        "experimental": true,
        "library": [
          {
            "reference": "Library/library-drr-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "DRR-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 1"
              },
              {
                "identifier": {
                  "value": "denominator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 1"
              },
              {
                "identifier": {
                  "value": "numerator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 2"
              },
              {
                "identifier": {
                  "value": "denominator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 2"
              },
              {
                "identifier": {
                  "value": "numerator 3"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 3"
              },
              {
                "identifier": {
                  "value": "denominator 3"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 3"
              }
            ],
            "stratifier": [
              {
                "identifier": {
                  "value": "stratifier 1"
                },
                "criteria": "Stratifier 1"
              },
              {
                "identifier": {
                  "value": "stratifier 2"
                },
                "criteria": "Stratifier 2"
              },
              {
                "identifier": {
                  "value": "stratifier 3"
                },
                "criteria": "Stratifier 3"
              },
              {
                "identifier": {
                  "value": "stratifier 4"
                },
                "criteria": "Stratifier 4"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-drr"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-dsf",
        "status": "active",
        "experimental": true,
        "library": [
          {
            "reference": "Library/library-dsf-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "DSF-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 1"
              },
              {
                "identifier": {
                  "value": "denominator 1"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 1"
              },
              {
                "identifier": {
                  "value": "numerator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator 2"
              },
              {
                "identifier": {
                  "value": "denominator 2"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator 2"
              }
            ],
            "stratifier": [
              {
                "identifier": {
                  "value": "stratifier 1"
                },
                "criteria": "Stratifier 1"
              },
              {
                "identifier": {
                  "value": "stratifier 2"
                },
                "criteria": "Stratifier 2"
              },
              {
                "identifier": {
                  "value": "stratifier 3"
                },
                "criteria": "Stratifier 3"
              },
              {
                "identifier": {
                  "value": "stratifier 4"
                },
                "criteria": "Stratifier 4"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-dsf"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-mrp",
        "url": "http://ncqa.org/fhir/us/hedis/Measure/measure-mrp",
        "identifier": [
          {
            "system": "http://ncqa.org/hedis/identifiers",
            "value": "MRP"
          }
        ],
        "version": "1.0.000",
        "name": "MRP_FHIR",
        "title": "30-Day Medication Reconciliation Post-Discharge",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "publisher": "National Committee for Quality Assurance",
        "description": "Proportion of discharges with a medication reconciliation followup within 30 days of discharge.",
        "approvalDate": "2018-08-14",
        "lastReviewDate": "2018-08-14",
        "effectivePeriod": {
          "start": "2018-01-01",
          "end": "2018-12-31"
        },
        "jurisdiction": [
          {
            "coding": [
              {
                "system": "urn:iso:std:iso:3166",
                "code": "US",
                "display": "United States of America (the)"
              }
            ],
            "text": "United States of America (the)"
          }
        ],
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "contributor": [
          {
            "type": "author",
            "name": "National Committee for Quality Assurance"
          }
        ],
        "contact": [
          {
            "telecom": [
              {
                "system": "url",
                "value": "http://ncqa.org"
              }
            ]
          }
        ],
        "copyright": "HEDIS® is a registered trademark of the National Committee for Quality Assurance (NCQA). The HEDIS measures and specifications were developed by and are owned by the National Committee for Quality Assurance (“NCQA”). NCQA holds a copyright in the HEDIS measures and specifications and may rescind or alter these measures and specifications at any time. Users of the HEDIS measures and specifications shall not have the right to alter, enhance or otherwise modify the HEDIS measures and specifications, and shall not disassemble, recompile or reverse engineer the HEDIS measures and specifications. Anyone desiring to use or reproduce the materials without modification for a non-commercial purpose may do so without obtaining any approval from NCQA. All commercial uses or requests for alteration of the HEDIS measures and specifications must be approved by NCQA and are subject to a license at the discretion of NCQA. HEDIS measures and specifications are not clinical guidelines, do not establish a standard of medical care and have not been tested for all potential applications. The measures and specifications are provided “as is” without warranty of any kind. NCQA makes no representations, warranties or endorsements about the quality of any product, test or protocol identified as numerator compliant or otherwise identified as meeting the requirements of a HEDIS measure or specification. NCQA also makes no representations, warranties or endorsements about the quality of any organization or clinician who uses or reports performance measures. NCQA has no liability to anyone who relies on HEDIS measures and specifications or data reflective of performance under such measures and specifications. No measure rate resulting from calculations based on the HEDIS specifications may be called a HEDIS rate until it is audited and approved by an NCQA-certified HEDIS auditor. Until NCQA has approved a validation process and validates a calculated measure rate, users must prominently display a disclaimer near each uncertified calculated rate. Henceforth in this publication and in any other NCQA publication, “HEDIS measure” refers to the specifications and “HEDIS data” refers to and assumes data audited by an NCQA-certified auditor. Limited proprietary coding is contained in the measure specifications for convenience. Users of the proprietary code sets should obtain all necessary licenses from the owners of these code sets. NCQA disclaims all liability for use or accuracy of any coding contained in the specifications. The American Medical Association holds a copyright to the CPT® codes contained in the measures specifications. Some measure specifications contain coding from LOINC® ([http://loinc.org](http://loinc.org)). The LOINC table, LOINC codes, LOINC panels and form file, LOINC linguistic variants file, LOINC/RSNA Radiology Playbook, and LOINC/IEEE Medical Device Code Mapping Table are copyright © 1995–2017, Regenstrief Institute, Inc. and the Logical Observation Identifiers Names and Codes (LOINC) Committee and is available at no cost under the license at [http://loinc.org/terms-of-use](http://loinc.org/terms-of-use). No part of this publication may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopy, recording or any information storage and retrieval system, without the written permission of NCQA. © 2018 by the National Committee for Quality Assurance, all rights reserved.",
        "library": [
          {
            "reference": "Library/library-mrp-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "type": [
          {
            "coding": [
              {
                "code": "process"
              }
            ]
          }
        ],
        "improvementNotation": "increase",
        "group": [
          {
            "identifier": {
              "value": "main-group"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator"
              },
              {
                "identifier": {
                  "value": "denominator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-mrp"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-pvs",
        "status": "active",
        "experimental": true,
        "library": [
          {
            "reference": "Library/library-pvs-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "proportion"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "PVS-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "Initial Population"
              },
              {
                "identifier": {
                  "value": "numerator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "numerator"
                    }
                  ]
                },
                "criteria": "Numerator"
              },
              {
                "identifier": {
                  "value": "denominator"
                },
                "code": {
                  "coding": [
                    {
                      "code": "denominator"
                    }
                  ]
                },
                "criteria": "Denominator"
              }
            ],
            "stratifier": [
              {
                "identifier": {
                  "value": "stratifier 1"
                },
                "criteria": "Stratifier 1"
              },
              {
                "identifier": {
                  "value": "stratifier 2"
                },
                "criteria": "Stratifier 2"
              },
              {
                "identifier": {
                  "value": "stratifier 3"
                },
                "criteria": "Stratifier 3"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-pvs"
      }
    },
    {
      "resource": {
        "resourceType": "Measure",
        "id": "measure-wcc-aba",
        "text": {
          "status": "generated"
        },
        "identifier": [
          {
            "use": "official",
            "system": "http://hl7.org/fhir/cqi/ecqm/Measure/Identifier/payer-extract",
            "value": "WCCABA"
          }
        ],
        "version": "1.0.0",
        "title": "Adult BMI Assessment Cohort Definition",
        "status": "active",
        "experimental": true,
        "date": "2015-03-08",
        "description": "Adult BMI Assessment Cohort Definition",
        "topic": [
          {
            "coding": [
              {
                "system": "http://hl7.org/fhir/c80-doc-typecodes",
                "code": "57024-2"
              }
            ]
          }
        ],
        "library": [
          {
            "reference": "Library/library-wcc-aba-logic"
          }
        ],
        "scoring": {
          "coding": [
            {
              "code": "cohort"
            }
          ]
        },
        "group": [
          {
            "identifier": {
              "value": "WCCABA-cohort"
            },
            "population": [
              {
                "identifier": {
                  "value": "initial-population-identifier"
                },
                "code": {
                  "coding": [
                    {
                      "code": "initial-population"
                    }
                  ]
                },
                "criteria": "WCCABA.&quot;In Demographic&quot;"
              }
            ]
          }
        ]
      },
      "request": {
        "method": "PUT",
        "url": "http://localhost:8080/cqf-ruler/baseDstu3/Measure/measure-wcc-aba"
      }
    }
  ]
}